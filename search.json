[{"title":"一款简单易用的反向代理神器","url":"/undefined/7e2174f.html","content":"\n\n前言\n--\n\n在上一篇文章《[使用 Docker 快速搭建一个 Typecho 个人博客网站](https://ilaozhu.com/archives/59/)》的最后，我们留下了几个问题，这些问题会导致我们的网站看起来不那么专业。今天我们先解决域名和端口的问题，让网站至少看起来是正常的，至于 `HTTPS` 安全协议的问题，由于涉及到腾讯云子账号权限，略微有一些麻烦，我将放在下一篇文章中单独说明。\n\n但无论是哪个问题，我们需要用到反向代理工具。至于什么是代理，什么又是反向代理，网上的资料很多，感兴趣的请自行搜索，我就不在这里啰嗦了。\n\n这里我强烈推荐大家使用 **Nginx Proxy Manager**(后面简称`NPM`)，它是基于 **Nginx** 实现的，并且提供了一个易于使用的 Web 界面，更重要的是，它可以免费申请 `SSL` 证书 (包括泛域名证书)，并且实现自动续期，可以方便的管理各种规模和类型的网站，想了解更详细的内容，可以参看[官方文档](https://nginxproxymanager.com/guide/)。\n\n1. 安装 Nginx Proxy Manager\n-------------------------\n\n虽然，`NPM` 提供了基于 **MySQL** 数据库的安装方式，但是对我们而言，`NPM` 说白了就是一个可视化的配置文件管理工具而已，使用内置的 **SQLite** 就够了，没必要依赖 **MySQL**，从而增加部署的复杂性，因此，我直接参考 **Quick Setup**，也就是基于 **SQLite** 数据库安装。\n\n这里我也准备了一个文件夹，目录结构如下图所示：  \n![](https://ilaozhu.com/usr/uploads/2024/01/2506561549.png)  \n其中，`docker-compose.yml` 的内容如下：\n\n```\nversion: '3.8'\nservices:\n  npm:\n    image: 'jc21/nginx-proxy-manager:latest'\n    container_name: 'nginx-proxy-manager'\n    restart: unless-stopped\n    ports:\n      - '80:80'\n      - '443:443'\n      - '81:81'\n\n    volumes:\n      - ./data:/data\n      - ./letsencrypt:/etc/letsencrypt\n    networks:\n      - ilaozhu_net\n\nnetworks:  \n  ilaozhu_net:                                \n    driver: bridge\n    name: ilaozhu_net\n    external: true                # 使用已存在的网络，如果不存在，则会报错\n\n```\n\n*   上述配置直接源自于官方给出的配置，只有稍许修改，并且为了让各容器能够网络互通，也加入了 `ilaozhu_net`；\n*   `80` 和 `443` 分别是 `HTTP` 和 `HTTPS` 的默认端口，这两个端口均由反向代理服务器暴露，具体的网站或应用不再暴露该端口；\n*   `NPM` 还内置了一个可视化的 Web 管理后台，`81` 即为管理后台的默认端口。\n\n具体安装过程和上一篇文章的 **Typecho** 相同，先将文件夹上传到服务器，然后执行如下脚本即可：\n\n```\n$ cd /data/nginx_proxy_manager/ && chmod +x start.sh && ./start.sh\n\n```\n\n效果如下图所示：  \n![](https://ilaozhu.com/usr/uploads/2024/01/2567758520.png)\n\n2. 放通端口\n-------\n\n从上面的 `docker-compose.yml` 文件中可以看到，`NPM` 的管理后台对外暴露的是 `81` 端口，因此需要到**腾讯云**的**防火墙**中放通该端口，如下图所示：  \n![](https://ilaozhu.com/usr/uploads/2024/01/1325704592.png)\n\n3. 配置管理员账号\n----------\n\n浏览器访问`http://ilaozhu.com:81`，即可打开登录：  \n![](https://ilaozhu.com/usr/uploads/2024/01/2165118713.png)  \n从官网可以查到，默认的账号密码分别是 `admin@example.com` 和 `changeme`。通过该账号密码登录后设置自己的账号密码：  \n![](https://ilaozhu.com/usr/uploads/2024/01/1667007163.png)  \n![](https://ilaozhu.com/usr/uploads/2024/01/1635176210.png)  \n保存后，就可以试试使用新的账号密码重新登录了。\n\n4. 配置反向代理\n---------\n\n管理后台本身就是一个网站，因此，也可以配置反向代理。我们不妨将管理后台的域名设置成 `proxy.ilaozhu.com`，将 `81` 端口映射到 `80`。\n\n登录管理后台，找到如下图所示的入口：  \n![](https://ilaozhu.com/usr/uploads/2024/01/1881847435.png)  \n添加如下图所示的配置，然后 “保存” 即可。  \n![](https://ilaozhu.com/usr/uploads/2024/01/2603906771.png)  \n保存成功后就可以在浏览器中通过`http://proxy.ilaozhu.com`访问 `NPM` 后台了。  \n![](https://ilaozhu.com/usr/uploads/2024/01/2444610054.png)\n\n趁热打铁，我们将个人博客也通过反向代理的方式配置一下，如下图所示：  \n![](https://ilaozhu.com/usr/uploads/2024/01/3916273034.png)  \n接下来就可以通过`http://ilaozhu.com`访问我的个人博客了。  \n![](https://ilaozhu.com/usr/uploads/2024/01/1354039517.png)\n\n5. 配置默认页\n--------\n\n由于我们域名解析配置的是泛解析，因此，当访问形如`http://abc.ilaozhu.com`的网址时，也可以路由到我们的服务器，可能会出现一些奇怪的现象。如果希望这些网址有配置反向代理，则打开具体网站，没有配置，则自动跳转到`http://ilaozhu.com`主站，那么可以到 **Settings** 的 **Default Site** 中添加如下图所示的配置：  \n![](https://ilaozhu.com/usr/uploads/2024/01/1405721284.png)\n\n再试试访问`http://www.ilaozhu.com`和`http://blog.ilaozhu.com`等网址，看看效果吧，怎么样，简单吧！\n\n6. 收回自定义端口\n----------\n\n虽然有了上面的配置，反向代理生效了，但原先的路并没有被堵死，我们仍然可以通过`http://ilaozhu.com:81`和`http://ilaozhu.com:8080`访问管理后台和个人博客，这明显不合适，因此，需要将这两个端口收回。\n\n其实操作也简单，只需要在**腾讯云**的**防火墙**中删除这两个规则即可。  \n![](https://ilaozhu.com/usr/uploads/2024/01/4236614906.png)\n\n再去试试吧，是不是已经无法访问了？\n\n结语\n--\n\n好了，域名和端口的问题就这样被我们轻松的解决了，有直接用 **Nginx** 部署反向代理服务器的人必定深有体会，用 `NPM` 做相同的工作，简直不要太方便了。不仅如此，`NPM` 还可以让我们统一管理所有的网站（比如我们这里就已经有了两个），这又是一个让人不得不爱的亮点。\n\n另外，在下一篇文章中即将要解决的 `HTTPS` 安全协议问题，`NPM` 也给出了堪称完美的解决方案。\n\n总之，独立开发部署网站，用 `NPM` 就对了。\n\n----\n\n**本文作者：** [老朱](https://ilaozhu.com/ \"老朱独立开发\")\n\n**原文链接：** [一款简单易用的反向代理神器](https://ilaozhu.com/archives/73/ \"一款简单易用的反向代理神器\")\n\n**版权声明：** 本站所有文章除特别声明外，均采用 [BY-NC-SA](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh) 许可协议。转载请注明出处！\n\n**免责声明：** 文中如涉及第三方资源，均来自互联网，仅供学习研究，禁止商业使用，如有侵权，联系我们 24 小时内删除！\n","tags":["转载","教程","NPM","反向代理"],"categories":["工具"]},{"title":"免费申请永久泛域名 SSL 证书的方法","url":"/undefined/507f60ec.html","content":"\n\n前言\n--\n\n上一篇文章中，我们通过使用 **Nginx Proxy Manager**(简称`NPM`) 非常方便的解决了同一台服务器部署多个网站，并共享 `80` 端口的问题。  \n本文我们继续处理 `SSL` 证书的问题，也就是如下图所示，提示不安全的问题：  \n![](https://ilaozhu.com/usr/uploads/2024/01/822994134.png)\n\n1. 解决思路\n-------\n\n通常来说，要申请免费的 `SSL` 证书，我们一般会用到 `Let's Encrypt`，用这个的人也最多。`Let's Encrypt` 支持单域名证书和 DNS 证书两种形式，而如果要申请泛域名证书（也就是可以用一个证书通用所有主域名相同的网站，而不用每个网站都申请一个证书），就只能使用 DNS 方式。\n\n还有一个问题就是，`Let's Encrypt` 的证书有效期只有 `90` 天，所以为了不每次到期后都手动续期，我们需要一个自动续期的机制，这通常是通过 `acme.sh` 来实现的。\n\n只要解决了这两个问题，虽然证书有效期依然只有 `90` 天，但也等同于实现了免费申请永久泛域名证书的目的了。\n\n然而，通过查询资料可以发现，解决上述两个问题的步骤还是很繁琐的，可以劝退很多人，而 `NPM` 恰好集成了 `Let's Encrypt` 和 `acme.sh` 这两个工具，并提供了一个非常简洁的界面，让我们可以相对轻松的实现证书申请。\n\n2. 参数要求\n-------\n\n登录 `NPM`，打开 **SSL Certificates** 中的 **Add Let's Encrypt Certificate** 弹窗，启用 **Use a DNS Challenge**，**DNS Provider** 选择 **TencentCloud**（根据你具体的情况选择，你可能是 **Aliyun** 或其它），我们可以看到如下界面：  \n![](https://ilaozhu.com/usr/uploads/2024/01/732485953.png)  \n参数不多，也很好理解，其中，\n\n*   **Domain Names** 就是泛域名，也就是我们想要申请泛域名证书的域名，比如`*.ilaozhu.com`；\n*   **Email Address for Let's Encrypt** 就是我们用于申请 `Let's Encrypt` 证书的邮箱地址，因此，必须是有效邮箱；\n*   不难看出，大部分的工作 `NPM` 都帮我们做了，而我们要解决的核心问题，就是获取 `TENCENT_CLOUD_SECRET_ID` 和 `TENCENT_CLOUD_SECRET_KEY` 两个值了。\n\n3. 获取 `ID` 和 `KEY`\n------------------\n\n这里涉及到腾讯云的账号权限问题，我们可以直接用主账号，给最大权限，然而这并不是一个安全的做法，而且腾讯云也不推荐这么做，因此，我们最好还是创建一个子账号，并授予必要的权限。\n\n### 3.1 新建权限策略\n\n首先，登录 **腾讯云**，进入**访问管理 -> 策略** 页面，然后**新建自定义策略**。  \n![](https://ilaozhu.com/usr/uploads/2024/01/2074519780.png)\n\n然后，选择**按策略语法创建 -> 空白模板**，并填入如下内容：\n\n```\n{\n    \"version\": \"2.0\",\n    \"statement\": [\n        {\n            \"action\": [\n                \"dnspod:DescribeRecordFilterList\",\n                \"dnspod:DescribeRecordList\",\n                \"dnspod:CreateRecord\",\n                \"dnspod:DeleteRecord\"\n            ],\n            \"effect\": \"allow\",\n            \"resource\": [\n                \"*\"\n            ]\n        }\n    ]\n}\n\n```\n\n效果如下图所示：  \n![](https://ilaozhu.com/usr/uploads/2024/01/803709063.png)  \n最后，完成保存即可。\n\n### 3.2 新建子账号\n\n首先，登录 **腾讯云**，进入**访问管理 -> 用户 -> 用户列表** 页面，然后**新建用户**。  \n![](https://ilaozhu.com/usr/uploads/2024/01/2081230107.png)\n\n然后，选择**快速创建**，填写用户名，访问方式选择**编程访问**，用户权限选择上一步创建的权限策略。  \n![](https://ilaozhu.com/usr/uploads/2024/01/4123807279.png)  \n最后，点击**创建用户**即可完成用户创建，并关联上相应的权限。\n\n### 3.3 获取 `Id` 和 `Key`\n\n用户创建完成后就会跳转到如下的**成功新建用户**页面，其中，`SecretId` 和 `SecretKey` 就是我们要获取的 `TENCENT_CLOUD_SECRET_ID` 和 `TENCENT_CLOUD_SECRET_KEY` 了。  \n![](https://ilaozhu.com/usr/uploads/2024/01/4122022324.png)\n\n4. 申请证书\n-------\n\n接下来就简单了，获取到 `SecretId` 和 `SecretKey` 之后，就可以回到 `NPM` 管理界面完善配置参数，并申请证书了，配置后的效果如下图所示：  \n![](https://ilaozhu.com/usr/uploads/2024/01/406258089.png)  \n值得注意的是，这里域名包括了 `ilaozhu.com` 和`*.ilaozhu.com`，这样证书就能对主域名和所有二级域名都生效了。该过程可能会有点慢，也可能会失败，多试几次就好了。申请成功后的效果如下图所示：  \n![](https://ilaozhu.com/usr/uploads/2024/01/24377508.png)\n\n5. 添加证书\n-------\n\n接下来就可以给各个网站都添加上证书了。以 `proxy.ilaozhu.com` 为例，如下图所示：  \n![](https://ilaozhu.com/usr/uploads/2024/01/1021945295.png)  \n选择刚申请的证书，选项也都是提升安全性相关的，全部开启即可，最后点击**保存**。同理也给 `ilaozhu.com` 设置相同的配置，最终效果如下：  \n![](https://ilaozhu.com/usr/uploads/2024/01/1361306058.png)  \n再通过浏览器访问一下`https://proxy.ilaozhu.com`试试看，“不安全” 的标记消失了。  \n![](https://ilaozhu.com/usr/uploads/2024/01/4278493425.png)\n\n6. 修改默认页\n--------\n\n还剩最后一步了，不知大家是否记得，在上一篇文章中，我们将默认页配置成了跳转到`http://ilaozhu.com`，现在我们支持了 `HTTPS`，因此需要略作修改，如下图所示：  \n![](https://ilaozhu.com/usr/uploads/2024/01/3539306098.png)\n\n结语\n--\n\n好了，`SSL` 证书的问题解决了，现在可以通过 `https` 协议来保护我们的网站了。怎么样，整个过程除了获取 `Id` 和 `Key` 麻烦一点，其他部分是不是很简单？\n\n到这里，整个博客网站的搭建也差不多完成了，可以开启漫长的创作之旅了。可能唯一美中不足的就是网站有点丑，不过这个见仁见智，下一篇文章，我们再简单优化一下网站配置，让其变得好看一点。\n\n----\n\n\n**本文作者：** [老朱](https://ilaozhu.com/ \"老朱独立开发\")\n\n**原文链接：** [堪称免费申请永久泛域名 SSL 证书的完美解决方案](https://ilaozhu.com/archives/87/ \"堪称免费申请永久泛域名SSL证书的完美解决方案\")\n\n**版权声明：** 本站所有文章除特别声明外，均采用 [BY-NC-SA](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh) 许可协议。转载请注明出处！\n\n**免责声明：** 文中如涉及第三方资源，均来自互联网，仅供学习研究，禁止商业使用，如有侵权，联系我们 24 小时内删除！","tags":["转载","教程","NPM","SSL 证书"],"categories":["工具"]},{"title":"Alass：一种文本字幕批量自动调轴工具","url":"/undefined/13234df3.html","content":"## 介绍\n\n在观看非母语的影视作品时往往都需要搭配一份母语字幕食用，然而经常会遇到好不容易找到的字幕其时间轴无法与作品相匹配的情况。人工调轴又会耗费大量时间和精力，对此，在这儿推荐一个可以对文本字幕进行批量自动调轴的工具：alass。\n\n该自动调轴工具源自github仓库：[kaegi/alass: \"Automatic Language-Agnostic Subtitle Synchronization\" ](https://github.com/kaegi/alass)\n由于原仓库release版本较旧，个人编译了新版本并制作了批量bat工具以方便使用：[Releases · dyphire/alass](https://github.com/dyphire/alass/releases)\n\n效果示例：\n\n| Turn this:                                                   | Into this:                                                   |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| ![img](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2022/02/05/tearing-me-apart-wrong.gif) | ![img](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2022/02/05/tearing-me-apart-correct.gif) |\n\n**以下为使用教程**：\n\n> 特别注意：**所有路径不要有中文**\n> 特别注意：**所有路径不要有中文**\n> 特别注意：**所有路径不要有中文**\n\n## 第一步，配置环境\n\n运行`alass.bat`\n\n在`alass(xxx ver).bat`中设置路径（已设好，无需变动）\n\n> 以上操作只需配置一次，后续无需再执行此步骤\n\n## 第二步，准备文件\n\n1. 参考文件为` <xxx.xxx>`（参考文件可以是视频文件，也可以是另一份正确时轴的字幕）\n2. 原始字幕文件命名为` <xxx_TV.ass>` or `<xxx_TV.ssa>` or `<xxx_TV.srt>`，视文件格式而定\n3. 需要用到的`alass(xxx ver).bat`（对应字幕文件的格式）\n\n>文件名最好不要有特殊符号，比如空格之类会导致程序出错\n>\n>以上文件全部放在同一个文件夹中（参考文件和原始字幕文件可以通过硬链接或符号链接（推荐）放入alass所在文件夹）\n>\n>批量重命名可使用好压批量命名工具（内置）\n>也可以选择自己喜欢的批量重命名工具\n>\n>创建符号链接的工具推荐 ：Hardlink Shell Extension（内置）\n\n## 第三步，开工\n\n把参考文件`<xxx.xxx>`拖到`alass(xxx ver).bat`上（一次性可处理多个）\n\n泡一杯咖啡等待，bat会自动依次处理所有的字幕，直到全部处理完毕\n\n> BDsub文件夹内是调轴后的字幕\n>\n> TVsub文件夹内是原始字幕\n>\n> Log文件夹内是调轴记录日志\n\n## 第四步，人工查错\n\n打开Log目录下生成的`<xxxx_check.log>`文件，人工检查提示的有问题的行和画面字\n\n## 注释\n\n> 更多灵活的参数用法请参考README.md或运行`alass --help`获取详细的命令行参数\n\n**原理解释**：\nalass是利用了字幕靠卡音频打轴的特点，将字幕和音频或其他正确字幕进行对比，并参考此时间的差值对字幕时间轴进行平移的，所以台词基本上都是准的，但画面字不一定准。理论上，声音的波形越容易辨识，调轴就越准，理论上如此。\n\n**特殊用法**：\n\n1. 关于**参考文件可以为另一份正确时轴的字幕**这点，其实存在一些骚操作\n\n\t- 比如用来调轴不同字幕组版本以供食用，经测试极为方便（\n\t- 美剧之类还可以把nf/亚马逊的官中字幕当作参考字幕来调轴字幕组版本，未测试。\n\t- 理论上其他语言的正确时轴字幕也可以当作参考字幕（比如英文字幕），但往往这类字幕会多很多的背景音标注字之类。所以不先批量去除干扰的话效果应该不会很好，未测试。经他人测试这一方案可行\n\t- **注意**：参考字幕和需调轴的字幕其中一方不能有漏译问题，否则无法正确处理（缺失相同的对话时无影响）\n2. 这工具还可以通过视频制作带时间轴的空srt文件，以便制作字幕使用\n\t- 命令行参考：`alass myMovie.mkv _ reference.srt`，经测试120分钟视频生成时间轴的空srt文件大概耗时1-2分钟\n\n**已知问题**：\n\n- 原始字幕缺译较多时无法正确处理（字幕本身漏译或BD增加新的对话场景）\n- BD片源开头/结尾处和放送源不一致时无法正确处理（常见于前情提要和下集预告的缺失）\n- 字幕开头存在画面字时无法正确处理（可以先行移除后再处理）\n- srt字幕单个时轴存在多行字幕时可能无法正确处理（常见于双行）\n\n**备注**：bat文件和使用指南制作参考sushi批量操作包作者 Shizuru @Kamigami  [Sushi: 自动调轴工具批量处理](https://bbs.acgrip.com/thread-1692-1-1.html)，特此感谢！\n","tags":["alass","字幕工具"],"categories":["Course"]},{"title":"Shell 终端美化教程","url":"/undefined/57389c55.html","content":"\n\n\n## Mac 和 Linux\n\n### 安装 zsh \n\n**macos**\nmac 默认已经安装了 zsh, 只需切换\n\n```shell\nchsh -s /bin/zsh\n```\n\n如果想还原回去执行`chsh -s /bin/bash`即可\n\n**ubuntu**\n\n```shell\nsudo apt install zsh\nchsh -s /bin/zsh\n```\n\n### 安装 oh-my-zsh\n\n基于 zsh 命令行，是对 zsh 的包装，提供了主题配置，插件机制.\ncurl\n\n```shell\nsh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n```\n\nwget\n\n```shell\nsh -c \"$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)\"\n```\n\n### 安装 Powerlevel9k / Powerlevel10k 主题\n\nzsh 使用最多的主题\n\n```shell\ngit clone https://github.com/romkatv/powerlevel10k.git $ZSH_CUSTOM/themes/powerlevel10k\n```\n\n`vim`编辑 `~/.zshrc` 设置 `ZSH_THEME=\"powerlevel10k/powerlevel10k\".`\n\n```shell\nvim ~/.zshrc\n```\n\n```shell\nZSH_THEME=\"powerlevel10k/powerlevel10k\n```\n\n再增加一行配置:`POWERLEVEL9K_MODE=\"awesome-patched\"`\n\n### 安装字体\n\n- ubuntu\n\n```shell\napt-get install fonts-powerline\n```\n\n- macos\n\n```shell\nhttps://github.com/powerline/fonts/blob/master/SourceCodePro/Source%20Code%20Pro%20for%20Powerline.otf\nhttps://github.com/Falkor/dotfiles/blob/master/fonts/SourceCodePro%2BPowerline%2BAwesome%2BRegular.ttf\n```\n\n打开下载的字体，然后按 “安装字体”。\n在 iTerm2 中设置字体（Preperence->Profiles->Text→Change Font）, 选择`Source Code Pro + Font Awesome`, 大小 18，最好对 “字体” 和“非 ASCII 字体”都进行设置。重新启动 iTerm2，以使所有更改生效.\n\n### zsh 配置主题\n\n```shell\nsource ~/.zshrc\n```\n\n或者执行下面的命令, 重新配置\n\n```shell\np10k configure\n```\n\n开始配置 Powerlevel10k, 根据提示 (喜好) 选择 1234 或 yes、no\n\n记得选用 `unicode`\n\n### iterm2 主题配置 (针对 mac)\n\n下载主题:[https://iterm2colorschemes.com](https://github.com/mbadolato/iTerm2-Color-Schemes/archive/master.zip)\nPreperence->Profiles->Colors->color Presets, 点击 import, 选择刚解压的目录, 点击目录下的 schemes, 选择你想要导入的主题 (可多选全部导入), 导入后选择自己喜欢的主题, 这里我选择了 ubuntu 主题\n\n### 一些常用的插件\n\n#### zsh-autosuggestions\n\n下载插件\n\n```shell\ngit clone git://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions\n```\n\n编辑 `~/.zshrc` , 设置 plugins\n\n```shell\nvim ~/.zshrc\n```\n\n```shell\nplugins=(zsh-autosuggestions git)\n```\n\n使插件生效\n\n```shell\nsource ~/.zshrc\n```\n\n上次敲过的命令 , 会自动提示, 按右方向键➡️确认填充上次的命令\n\n#### zsh-syntax-highlighting\n\n下载插件\n\n```shell\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git $ZSH_CUSTOM/plugins/zsh-syntax-highlighting\n```\n\n写入到配置\n\n```shell\necho \"source $ZSH_CUSTOM/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\" >> ${ZDOTDIR:-$HOME}/.zshrc\n#or\nplugins=(git\n  zsh-autosuggestions\n  zsh-syntax-highlighting\n)\n```\n\n使插件生效\n\n```shell\nsource ~/.zshrc\n```\n\n命令会自动高亮显示\n\n### 查看主题名称\n\n- **Oh My Zsh** 默认自带了一些默认主题，存放在 **~/.oh-my-zsh/themes** 目录中。我们可以查看这些主题\n- 终端输入：\n\n```shell\ncd ~/.oh-my-zsh/themes && ls\n```\n\n查看更多主题样式：[github.com/robbyrussell/oh-my-zsh/wiki/Themes](https://github.com/robbyrussell/oh-my-zsh/wiki/Themes)\n\n## Windows\n\n### 推荐：安装 PowerShell 7\n\n本文需要用到 `PowerShell 7` 或以上版本，可以从 GitHub 下载安装 `PowerShell 7`，在 release 页找一个正式版下载安装即可（预览版也行），例如` PowerShell-7.0.1-win-x64.msi`。\n`PowerShell Releases` :[PowerShell7](http://github.com/PowerShell/PowerShell/releases)\n\n`PowerShell 7` 带来了一系列的新功能、语法和改进，如 `null` 传播符` ?.`、`??`，并发的 `ForEach-Object -Parallel`，`&&`和`||`操作符，自动更新检测，简短的错误提示，等等\n\n为什么不用 Windows 自带的 PowerShell 5.1 呢？因为\n\n- 慢\n- 难用\n- 配色丑\n- 语法落后\n- 不能跨平台\n- 报错信息太长\n- ......\n\n**PSReadLine**\n\n`PSReadLine` 是一个由微软发布的用于` PowerShell` 的行读取实现，提供了以下功能：\n\n- 语法着色\n- 简单语法错误通知\n- 良好的多行体验\n- 可自定义的键绑定\n- Cmd和Emacs模式\n- 许多配置选项\n- Bash 样式的补全\n- Bash/zsh 样式的交互式历史记录搜索\n- Emacs yank/kill ring\n- 基于 PowerShell Token 的单词移动和删除\n- 撤销/重做\n- 自动保存历史记录，包括在实时会话中共享历史记录\n- 菜单补全、Intellisense\n\n目前发布了 2.1.0-beta1 版本，为了能够达到本文中的体验，需要使用 2.1.0-beta1 或者以上版本。如果是使用 PowerShell 7.1 或以上版本则自带了 PSReadLine 2.1，不需要手动安装。\n\n[PSReadLine](https://github.com/PowerShell/PSReadLine)\n\n### 安装 oh-my-posh 主题\n\n**1. 首先**，先贴上 oh-my-posh 的官方文档：[https://ohmyposh.dev/docs/](https://ohmyposh.dev/docs/)\n\n**2. 然后**，打开`Windows Terminal`，没安装的可以到 Microsoft store 搜索 “Windows Terminal” 安装即可。\n\n**3.** 安装好之后，**使用管理员身份**打开 `Windows Termina`l。安装 `oh-my-posh` 和 `posh-git`。\n\n*   第一条命令（绕过 `power shell` 执行策略，使其可以执行脚本文件 <后面会用到>）\n\n```shell\nSet-ExecutionPolicy Bypass\n#or\nSet-ExecutionPolicy RemoteSigned -Scope CurrentUser\n```\n\n*   第二条命令（oh-my-posh 提供主题）\n\n```shell\nInstall-Module oh-my-posh -Scope CurrentUser\n```\n\n*   第三条命令（posh-git 将 git 信息添加到提示中）\n\n```shell\nInstall-Module posh-git -Scope CurrentUser\n```\n\n> **注意：如果中途有询问，直接 Y 就好了。**\n\n### 编辑相应配置文件\n\n**1. 在 Windows Terminal 中敲下下面两行命令**\n\n*   第一条（启动编辑 power shell 配置文件的引擎）\n\n```shell\nif (!(Test-Path -Path $PROFILE )) { New-Item -Type File -Path $PROFILE -Force }\n```\n\n*   第二条（使用VScode打开配置文件）\n\n```shell\ncode $PROFILE\n```\n\n**2. 在打开的文件中写入如下内容**（**脚本文件**）**，并保存**\n\n```shell\nImport-Module posh-git # 引入 posh-git\nImport-Module oh-my-posh # 引入 oh-my-posh\n\nSet-PoshPrompt powerlevel10k_rainbow # 设置主题\n\nSet-PSReadLineOption -PredictionSource History # 设置预测文本来源为历史记录\n \nSet-PSReadlineKeyHandler -Key Tab -Function Complete # 设置 Tab 键补全\nSet-PSReadLineKeyHandler -Key \"Ctrl+d\" -Function MenuComplete # 设置 Ctrl+d 为菜单补全和 Intellisense\nSet-PSReadLineKeyHandler -Key \"Ctrl+z\" -Function Undo # 设置 Ctrl+z 为撤销\nSet-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward # 设置向上键为后向搜索历史记录\nSet-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward # 设置向下键为前向搜索历史纪录\n```\n\n*   第一条命令表示导入 posh-git\n*   第二条命令表示导入 oh-my-posh\n*   第三条命令表示设置主题为 powerlevel10k_rainbow\n\n**配置完后**，每次打开 Windows Terminal 中的 Power shell 都会执行脚本文件中的命令。\n\n```\n#注意：此处的第三行是oh-my-posh2与3的不同之一，在oh-my-posh2里的是： Set-Theme XXXX\n#如果不是很喜欢这个主题，可以使用以下命令来查看所有主题以及主题的名称：Get-PoshThemes\n##注意：此处获取主题在oh-my-posh2的命令为： Get-Theme\n#找到喜欢的主题后，可以在之前的脚本文件中将主题名称替换为你想要主题的名称。\n```\n\n> 这时，你会发现出现了一些方框，效果并不像图片上那么好。那是因为，还没有给主题安装适应的字体。\n\n![](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/09/11/v2-6744a2687f6245fcf3f7dd5b708228c7_r.jpg)\n\n### 安装 Nerd Fonts 字体并应用\n\n**1. 安装字体**\n\n*   进入nerdfonts网站:[https://www.nerdfonts.com](https://www.nerdfonts.com/)\n*   点击 **_Downloads_**\n*   随便下载一款字体（推荐 <**DejaVuSansMono Nerd Font**> 或 <**Cousine Nerd Font**>，这两套字体比较全，适配也还不错。）\n*   下载完成后，**解压**到当前文件夹，然后 CTRL+A 全选，右键点击**安装**，等待安装完成即可。\n\n**2. 使用字体**\n\n*   打开 **Windows Terminal**，并在上方**标签栏**点击下拉按钮找到**设置**，并点击，然后在左侧最下方点击打开 JSON 文件。\n*   如果有 **vscode**，将会在 **vscode** 中打开 **settings.json**，这个就是 **Windows Terminal** 的配置文件。\n*   这个配置文件最开始几行表示的是**架构**和**默认配置**。下面几行有 3 个包含着字典的列表，分别表示**快捷键（keybindings）、配置（profiles）、配色方案（schemes）**。而我们需要设置的地方在**配置（profiles）**中，在 **profiles** 中，我们能看到有多个字典，我们需要设置美化 power shell，故找到字典中包含：\n\n```json\n\"guid\": \"{61c54bbd-c2c6-5271-96e7-009a87ff44bf}\"\n```\n\n这是 power shell 的全局唯一标识符（guid）。\n\n*   找到后，将其中键为 \"fontFace\" 的键值对改为（如果没有 fontFace 就自己添加一下，放在 guid 下一行，记得加逗号）：\n\n```json\n\"fontFace\": \"DejaVuSansMono Nerd Font\"\n```\n\n> 注意：此处字体的名称请参考上方 [Nerd Fonts 网站](https://www.nerdfonts.com/font-downloads)中的字体名称，否则无法显示出来。\n\n*   设置好之后保存 settings.json 文件（若 vscode 未开启自动保存设置，可使用 CTRL+S 进行保存。）\n*   完成之后重启 Windows Terminal 即可发现样式改变了，若未改变，请重启 Windows Terminal。\n\n![](https://pic3.zhimg.com/v2-bb147db11591117a813cfce658d0027e_r.jpg)\n\n### 优化 PowerShell 的配色\n\n接下来，我们可以使用微软提供的一个方便更改默认终端配色的工具 `colortool`来优化powershell中的颜色，下载地址:\n\nhttps://github.com/microsoft/terminal/releases/download/1904.29002/ColorTool.zip\n\n这个工具也支持读取 iTerm 主题文件。\n\n- 首先，使用上面的地址将 ColorTool 下载至本地，并解压\n- 打开`Windows terminal`的`Powershell Tab`\n\nColorTool 使用非常简单，该工具自带了几种配色主题，我们可以利用下面这个命令进行查看：\n\n```bash\n.\\ColorTool.exe -s\n```\n\n![](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/09/11/1573532383_6d8a16d174141ab.png)\n\n其中前面列出的几个 `.ini` 和 `.itermcolors` 就是主题配置文件，我们可以直接通过下面这个命令设置主题：\n\n```bash\n# 临时查看\ncolortool <主题名称>\n# 定义默认值\ncolortool -d <主题名称>\n```\n\n比如我们希望将主题配色更换为 `OneHalfDark.itermcolors`，只需要输入下面这个命令就可以更换并预览更新：\n\n```bash\n.\\ColorTool.exe solarized_light.itermcolors\n```\n\n###  在 vscode 中 power shell 样式（可选）\n\n**1. 使用 `CTRL+，` 打开 `vscode` 的设置**\n\n**2. 在顶部输入框输入以下字符：**\n\n```json\nIntegrated:Font Family\n```\n\n**3. 在所显示（Terminal › Integrated:Font Family）的输入框中输入（在我的电脑上 Cousine Nerd Font 适配比较好，不会出现偏移的现象）：**\n\n```json\nCousine Nerd Font\n```\n\n**或**\n\n```json\nDejaVuSansMono Nerd Font\n```\n\n**4.VSCode 整合**\n\n点击右上角的图标，打开配置的 json 文件，加入如下配置。\n\n![img](https://pic1.zhimg.com/v2-b06b42c579e3de397ed5a86681d31fd0_r.jpg)\n\n```json\n{\n\"files.autoGuessEncoding\": true,\n\"editor.fontFamily\": \"Sarasa Mono SC\", //后边的引号中写上要设置的字体类型\n\"editor.fontLigatures\": true,//这个控制是否启用字体连字，true启用，false不启用，这里选择启用\n\"editor.fontSize\": 14,//设置字体大小，这个不多说都明白\n\"editor.fontWeight\": \"normal\",\n\"workbench.iconTheme\": \"helium-icon-theme\",\n\"files.associations\": {\n  \"*.vpy\": \"python\"\n},\n\"background.enabled\": true,\n\"background.useDefault\": true,\n\"background.customImages\": [\n],\n\"workbench.colorTheme\": \"One Dark Pro\",\n\"files.autoSave\": \"afterDelay\",\n\"terminal.integrated.rendererType\": \"dom\",\n\"workbench.editorAssociations\": {\n  \"*.ipynb\": \"jupyter-notebook\"\n},\n\"git.autofetch\": true,\n\"git.enableSmartCommit\": true,\n\"notebook.cellToolbarLocation\": {\n  \"default\": \"right\",\n  \"jupyter-notebook\": \"left\"\n},\n\"terminal.integrated.shell.windows\"    : \"C:/WINDOWS/System32/WindowsPowerShell/v1.0/powershell.exe\",\n\"terminal.integrated.fontFamily\": \"DejaVuSansMono Nerd Font\",\n\"terminal.integrated.shellArgs.windows\": [\n\"-ExecutionPolicy\", \"Bypass\",\n\"-NoLogo\", \"-NoExit\",\n// 初始化命令\n\"-Command\", \"clear;cd d:\"\n]\n}\n```\n\n**5. 使用 CTRL+` 召唤终端，即可看到样式发生改变，如果看不到，请重启 vscode。**\n\n![](https://pic1.zhimg.com/v2-d77e3576b75b92c4156cc4bfa11c96f8_r.jpg)\n\n","tags":["shell","终端"],"categories":["工具"]},{"title":"Scoop 包管理教程","url":"/undefined/198c7fc6.html","content":"\n## scoop 是什么\n\n> 简而言之 scoop 是一个包管理工具, 可以在命令行安装一些软件\n\nscoop 项目地址:  \n[lukesampson/scoop: A command-line installer for Windows. (github.com)](https://github.com/lukesampson/scoop#installation)\n\n### chocolatey VS scoop\n\n- `chocolatey`权限要求高, `scoop` 使用`-g`安装才需要管理员权限, 默认普通用户权限.\n- `scoop`可以建软件包仓库, 如果官方仓库里没有想用的软件, 可以自己建一个仓库, 存放自己的软件.\n- `chocolatey`很多软件安装位置不固定, 会污染`Path`\n\n## 安装 scoop\n\n- 设置`powershell`\n\n  ```powershell\n  set-executionpolicy remotesigned -s currentuser\n  ```\n\n- 默认安装 (安装到`C:\\Users\\<user>\\scoop`), 在`powershell`里面运行:\n\n  ```powershell\n  iex (new-object net.webclient).downloadstring('https://get.scoop.sh')\n  #or\n  iwr -useb get.scoop.sh | iex\n  ```\n\n- 安装到指定目录 (`E:\\Tools\\Scoop`)\n\n  ```powershell\n  [environment]::setEnvironmentVariable('SCOOP','E:\\Tools\\Scoop','User')\n  $env:SCOOP='E:\\Tools\\Scoop'\n  iex (new-object net.webclient).downloadstring('https://get.scoop.sh')\n  ```\n\n- 指定`-g`安装目录 (`D:\\tool\\scoop_global`)，需管理员身份运行\n\n  ```powershell\n  [environment]::setEnvironmentVariable('SCOOP_GLOBAL','E:\\Tools\\Scoop_global','Machine')\n  $env:SCOOP_GLOBAL='E:\\Tools\\Scoop_global'\n  ```\n\n验证 scoop 是否安装成功执行:\n\n```powershell\nscoop help\n```\n\n### 更换 Scoop-Core 源（可选）\n\n可以选择更换为维护状态更为活跃的`scoop-Core` :[shovel](https://github.com/Ash258/Scoop-Core)\n\n执行以下操作：\n\n1. `scoop install 7zip git`\n2. `scoop config SCOOP_REPO 'https://github.com/Ash258/Scoop-Core'`\n3. `scoop update`\n4. `scoop status`\n5. `scoop checkup`\n\n安装后，运行`scoop help`以获取更多信息。\n\n## scoop 使用方法\n\n### 常用命令\n\n```powershell\nscoop help              #帮助\nscoop bucket known      #查看推荐仓库\nscoop bucket add 仓库名  #添加指定仓库       \nscoop list              #查看当前已安装软件\nscoop info app          #查看软件信息\nscoop search app        #搜索软件\nscoop install app       #安装软件\nscoop install 仓库名/app #安装指定仓库下软件\nscoop uninstall app     #卸载软件\nscoop status            #查看更新\nscoop cleanup           #删除旧版本\nscoop cache rm app      #删除指定软件缓存\nscoop cache rm *        #清理缓存\nscoop checkup           #自身诊断\nscoop update app        #更新指定软件\nscoop update *          #更新安装的软件和scoop\n\n# 设置代理(http)\nscoop config proxy 127.0.0.1:4412\n```\n\n- shims 目录\n\n  `scoop`安装程序后会在`scoop`安装目录下的`shims`里生成一个对应程序的`shim.exe`(不知道为啥不用快捷方式).\n\n  安装`scoop`后 会自动把`shims`目录加到用户的`Path`里.\n\n- persist 目录\n\n  这个目录下面放的是已安装软件的配置文件, 后续更新软件的时候这部分内容不会修改.\n\n#### 命令示例\n\n**安装指定的版本**\n\n```shell\n#查找应用程序\nscoop  search curl\n\n'main' bucket:\n    curl (7.74.0_2)\n    gnupg1 (1.4.23) --> includes 'gpgkeys_curl.exe'\n    gow (0.8.0) --> includes 'curl.exe'\n    grpcurl (1.7.0)\n\nscoop install curl@7.74.0\n```\n\n**一次安装多个软件，打开多个窗口同时安装**\n\n```\nscoop install git 7zip python\n```\n\n**安装指定Bucket的应用**\n\n```shell\nscoop install main/curl\n```\n\n**删除所有旧版本**\n\n```shell\nscoop cleanup *\n```\n\n**导出软件列表**\n\n```shell\nscoop list > %HOMEPATH%\\Desktop\\Apps.txt\n```\n\n**版本切换**\n\n```shell\nscoop reset python\n```\n\n**卸载**\n\n```shell\nscoop uninstall AppName\n```\n\n如果要用管理员运行命令, 无需用管理员打开 cmd(or powershell) 直接在命令行前加一个 sudo 即可.  \n\n**安装 sudo**\n\n```powershell\nscoop install sudo\n#or t\nscoop install gsudo\n```\n\n**安装 grep**\n\n```powershell\nscoop install grep\n```\n\n安装完之后就可以在 windows 的终端使用 grep\n\n```powershell\nls | grep something\n```\n\n#### 安装增强命令-可选\n\n一组用 PowerShell 编写的命令行实用程序 ：[lukesampson/psutils](https://github.com/lukesampson/psutils)\n\n这些设计为与[Scoop](http://scoop.sh/)一起安装。\n\n- *gitignore* -`.gitignore`从[gitignore.io](https://www.gitignore.io/)获取文件模板并将它们写入标准输出。\n- *ln* - 类似 Unix `ln`命令的。\n- *runat* - 替代`at`，Microsoft 已在 Windows 2012 中弃用和删除的命令。\n- *say* - 类似 macOS 的[`say`](https://ss64.com/osx/say.html)。\n- *shasum* -类似 [shasum](http://linux.die.net/man/1/shasum)。\n- *sudo* - 类似 Unix`sudo`命令，不幸的是显示了一个 UAC 弹出窗口。\n- *time* - 类似 Unix`time`命令。\n- *touch* - 类似 Unix`touch`命令。\n- *vimtutor* - `vimtutor`Vim for Windows 附带的不适用于 Scoop，这个可以。\n- *set*,*less*,……\n\n### 常见问题\n\n1. 安装某些 `gui` 程序后, 运行对应的 `shim.exe` 会出现 `cmd` 窗口 (`nvim-qt` `cmd`窗口一直显示, `cmder` `cmd`窗口一闪而过 )。 解决办法: 把`Scoop Apps`目录加到`path`里, 目录在`C:\\Users\\fcying\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Scoop Apps`\n\n2. `raw.githubusercontent.com` 未能解析\n\n   解决办法: 在`C:\\Windows\\System32\\drivers\\etc\\hosts`中添加host解析：\n\n   `199.232.68.133 raw.githubusercontent.com`\n\n3. `fatal: not a git repository (or any of the parent directories): .git`\n\n   添加bucket时，由于网络问题，未成功添加，bucket文件夹为空。\n\n4. 添加快捷方式\n\n   开始菜单栏 `Scoop Apps` 目录，右键打开文件位置，你需要的快捷方式就在这。\n\n   设置快捷键或[添加右键打开方式](https://www.cnblogs.com/leime/p/9441169.html)非常方便。例如vscode，在快捷方式属性中设置快捷键`Ctrl+Shift+Alt+Z`，快速打开vscode，做个便笺不错。\n\n### aria2 下载加速\n\n> Scoop 可以利用 aria2 来使用多连接下载。只需通过 Scoop 安装 aria2，之后所有下载都将使用它。\n\naria2 是什么\n\n> aria2 是一个跨平台的快速而且可靠的下载工具，支持 HTTP(S)、FTP、BitTorrent、Metalink 等协议. 可以从多个来源 / 协议下载文件，并尝试利用最大下载带宽\n\n**安装**\n\n```powershell\nscoop install aria2\n```\n\n**如果使用代理，有时需要通过如下命令关闭 aria2**\n\n```powershell\nscoop config aria2-enabled false\n```\n\n **aria2 配置参数**\n\n```powershell\n# aria2 在 Scoop 中默认开启\nscoop config aria2-enabled true\n# 关于以下参数的作用，详见aria2的相关资料\nscoop config aria2-retry-wait 4\nscoop config aria2-split 16\nscoop config aria2-max-connection-per-server 16\nscoop config aria2-min-split-size 4M\n```\n\n###  安装 Git 来添加新仓库\n\n```powershell\nscoop install git\n```\n\n###  添加 bucket 仓库\n\n  **添加官方维护的 extras 仓库（含大量 GUI 程序）**\n\n```powershell\nscoop bucket add extras\nscoop update\n```\n\n**查看官方推荐仓库**\n\n```powershell\nscoop bucket known\n\nmain [默认]\nextras [推荐]\nversions\nnightlies\nnirsoft\nphp\nnerd-fonts\nnonportable\njava\ngames\njetbrains\n```\n**第三方 bucket**\n\n若在 scoop search 中找不到需要的软件，可以上 github 上的[第三方bucket](https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Frasa%2Fscoop-directory%2Fblob%2Fmaster%2Fby-score.md)查找一下。\n比如安装cajviewer，添加bucket：\n\n```csharp\nscoop bucket add scoopbucket https://github.com/yuanying1199/scoopbucket\n```\n\n安装cajviewer：\n\n```powershell\nscoop install scoopbucket/cajviewerlite\n```\n\n```powershell\n# 社区提供 \nscoop bucket add echo https://github.com/echoiron/echo-scoop \nscoop bucket add dorado https://github.com/chawyehsu/dorado \nscoop bucket add dodorz https://github.com/dodorz/scoop\nscoop bucket add apps https://github.com/kkzzhizhou/scoop-apps\n```\n\n### 搜索功能增强\n\n`scoop`自带的搜索加载体验实在是糟糕，推荐安装 scoop-search 改善 scoop 搜索体验 ：[https://github.com/shilangyu/scoop-search](https://github.com/shilangyu/scoop-search)\n\n```shell\nscoop install scoop-search\n```\n\n安装后使用`vscode`打开`$PROFILE`\n\n```shell\ncode $PROFILE\n```\n\n添加相关hook（可选）\n\n```shell\nInvoke-Expression (&scoop-search --hook)\n```\n\n以后就可以使用`scoop-search`来搜索仓库已有软件名称，速度比原本自带的搜索功能快非常多\n\n### 换源：提高下载速度\n\n要改善 Scoop 的下载速度，详细可以参照 [Scoop | Gitee 版](https://gitee.com/squallliu/scoop#install-scoop-to-a-custom-directory-by-changing-scoop) 的说明更换下载源。换源之后的Scoop，速度提升很明显。\n\n- 更换 Scoop 源\n\n```powershell\nscoop config SCOOP_REPO https://gitee.com/squallliu/scoop\nscoop update\n```\n\n- 更换 bucket 源\n\n```shell\nscoop install git\n\n# 注意：引号里面换成自己的路径，如果是默认路径则为${Env:USERPROFILE}\\scoop\\buckets\\<bucket_name>\n\ngit -C \"E:\\Tools\\Scoop\\buckets\\main\" remote set-url origin https://github.com.cnpmjs.org/ScoopInstaller/Main.git\n\ngit -C \"E:\\Tools\\Scoop\\buckets\\extras\" remote set-url origin https://github.com.cnpmjs.org/lukesampson/scoop-extras.git\n```\n\n```shell\nscoop bucket rm apps\nscoop bucket add apps https://github.com/kkzzhizhou/scoop-apps\n# 国内网络\nscoop bucket add apps https://gitee.com/kkzzhizhou/scoop-apps\n```\n\n也可以使用镜像网址来加速 github 访问，以下为示例镜像：\n\n```shell\n#将 https://github.com 替换为\n#推荐，阿里镜像\nhttps://github.com.cnpmjs.org\n#fastgit 镜像\nhttps://hub.fastgit.org\n\nhttps://download.fastgit.org\n#Cloudflare Workers 镜像\nhttps://github.91chifun.workers.dev\n```\n\n\n\n### 安装 oh-my-posh 主题\n\n参考: [Home | Oh my Posh](https://ohmyposh.dev/)  \n安装 oh-my-posh\n\n```shell\n scoop install https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/oh-my-posh.json\n```\n\n**更新 oh-my-posh**\n\n```shell\nscoop update oh-my-posh\n```\n\n**使用 oh-my-posh 的主题**\n\n主题预览  \n[Themes | Oh my Posh](https://ohmyposh.dev/docs/themes)  \n一. 执行`$PROFILE `会输出 powershell 的配置文件路径, 如果没有就新建一个\n\n```powershell\nC:\\Users\\19154\\Documents\\WindowsPowerShell\\Microsoft.PowerShell_profile.ps1\n```\n使用VScode打开配置文件\n```powershell\ncode $PROFILE\n```\n\n二. 在配置文件中追加一行如下代码:\n\n```powershell\noh-my-posh --init --shell pwsh --config ~/.mytheme.omp.json | Invoke-Expression\n```\n\n其中`~/.mytheme.omp.json`是本地的主题文件, 路径在`~\\scoop\\apps\\oh-my-posh\\current\\themes\\`  \n三. 执行`. $PROFILE`命令使配置文件生效\n\n四. oh-my-posh 安装成功之后, 所有的主题存在`~\\scoop\\apps\\oh-my-posh\\current\\themes\\`文件夹下 (就是一些 json 文件).\n\n## 更多进阶操作\n\n### 维护自己的 bucket 仓库\n\n> *下面的操作涉及到一定的开发经验，需要 `git` 的版本控制知识和对 `json` 文件的了解。如果上面介绍的方法已经满足了你的需求，就可以忽略这里的介绍了。*\n\n**「想要安装的软件在已有仓库里都找不到」**\n\n针对这种需求也可以自己维护一个 bucket ([Creating your own bucket](https://github.com/lukesampson/scoop/wiki/Buckets#creating-your-own-bucket))，在里面写上所需要软件的安装步骤配置文件，从而自定义一个自己的 bucket。以在 GitHub 上托管一个名字为 `my-bucket` 的 bucket 为例子：\n\n- 建立一个 GitHub 仓库名为 my-bucket\n- 在 PowerShell 中执行下面的操作，向 my-bucket 中添加一个名字叫 hello 的 App：\n\n```shell\n# 将仓库克隆至本地\ngit clone https://github.com/<你的 GitHub 用户名>/my-bucket\n# 进入 my-bucket\ncd my-bucket\n# 创建 App 的安装配置文件 hello.json\n'{ version: \"1.0\", url: \"https://gist.github.com/lukesampson/6446238/raw/hello.ps1\", bin: \"hello.ps1\" }' > hello.json\n# 将本地更改同步至 GitHub\ngit add .\ngit commit -m \"add hello app\"\ngit push\n```\n\n- 在 Scoop 中将 my-bucket 添加至你的 Scoop bucket 列表：\n\n```shell\nscoop bucket add my-bucket https://github.com/<你的 GitHub 用户名>/my-bucket\n```\n\n- 测试是否成功：\n\n```shell\n# 安装 hello 这个 App\nscoop install hello\n# 运行 hello\nhello\n```\n\n应该会看到 `Hello, <你的 Windows 用户名>!`。\n\n![img](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/09/12/d9796ca2b3062e16dc9cd9bef7b498e9.png)\n\n这就是官方给出的自定义 bucket 的 demo，你需要继续对 `hello.json` 进行配置，包括你所想要安装 App 的下载地址、安装步骤等一系列配置方法，参考：[App Manifests](https://github.com/lukesampson/scoop/wiki/App-Manifests)\n\n### 备份还原\n\n#### 常规备份还原操作\n\n**导出 Scoop 软件列表**\n\n备份 Scoop 的方式为：\n\n```shell\nscoop export > %HOMEPATH%\\Desktop\\Apps.txt\n```\n\n可以对 Scoop 的导出列表进行额外处理，以方便后续安装。使用 VSCode 打开 `scoop.txt` 文件，以正则表达式搜索：\n\n```shell\n(.*?) .*\n```\n\n并全部替换成：\n\n```shell\n$1\n```\n\n注意正则式中包含空格，请完整复制。\n\n**重新安装**\n\n按照上面导出的软件列表执行 scoop 安装命令\n\n```shell\nscoop install app1 app2 app3 ...\n```\n\n#### 备份及还原（离线安装）\n\n使用备份还原脚本实现 `scoop` 离线安装\n\n脚本地址：[https://github.com/fsdrw08/SysOps/tree/master/Scoop](https://github.com/fsdrw08/SysOps/tree/master/Scoop)\n\n注意：执行备份前建议关掉所有通过 `scoop` 安装的程序\n\n演示视频： \n\n{% bilibili 416394452 %}\n\n","tags":["scoop","包管理"],"categories":["工具"]},{"title":"Now-subconverter 使用指南","url":"/undefined/dc535e76.html","content":"\n> 原文地址 [blogsue.vercel.app](https://blogsue.vercel.app/#/article/4)\n\n> 生成一个 repo 权限的 github token。 具体步骤见官方文档，其中第 7 步只勾选第一个钩 (repo)，保存好生成的 token 待用。\n\n*   github 账号\n*   [vercel](https://vercel.com/dashboard) 账号 (可使用 github 账号登录)\n*   能理解本篇指南的智力\n*   基础的电脑操作能力\n*   能够在 github 上编辑修改项目文件\n*   对 subconverter 与 sub-web 项目有一定了解，知道它们的配置方法\n\n生成一个 repo 权限的 github token。 具体步骤见[官方文档](https://docs.github.com/cn/free-pro-team@latest/github/authenticating-to-github/creating-a-personal-access-token#%E5%88%9B%E5%BB%BA%E4%BB%A4%E7%89%8C)，其中第 7 步只勾选第一个钩 (repo)，保存好生成的 token 待用。\n\n纯傻瓜式搭建\n------\n\n[![](https://vercel.com/button)](https://vercel.com/import/git?s=https%3A%2F%2Fgithub.com%2Fzhongfly%2Fnow-subconverter) 点击即可，一路无脑选择下一步，等待部署成功。\n\n*   搭建自己的包含前端 + 后端的完整订阅转换接口\n*   前端 sub-web 项目修改后，now-subconverter 项目自动更新其中的 sub-web 部分\n\n一、Fork 项目\n---------\n\n1. 在 github 上 fork 我的 [now-subconverter 项目](https://github.com/zhongfly/now-subconverter) 2. 在 github 上 fork 一个你喜欢的 subconverter 前端项目，此处推荐 [sub-web](https://github.com/CareyWang/sub-web)，其常见的修改版有 [leosam2048](https://github.com/leosam2048/sub-web)。不过为满足需要，仅以[我修改的版本](https://github.com/zhongfly/sub-web)为例，在 sub-web 提交修改后会自动推送修改给你预设的 now-subconverter 仓库。\n\n二、启用并配置项目的 github action\n------------------------\n\n> github action 可视为 github 提供的自动化服务，可以自行设置触发事件，然后执行你需要的操作 (例如编译版本 / 自动关闭 issue)。\n\n对以上 fork 的项目做以下操作： 1. 点击你的仓库右上角的 Settings，打开 Actions 这一项，Actions permissions 中勾选 Allow all actions\n\n如果 fork 了我的 sub-web 项目还需要对你 fork 的 sub-web 仓库做以下操作： 1. 点击你的仓库右上角的 Settings，找到 Secrets 这一项，添加一个名为 REPO_TOKEN 的变量，值是有 repo 权限的 github token(预先准备中获得的)\n\n三、now-subconverter 项目的参数设置\n--------------------------\n\n详细见`/.github/workflows/`下的`main.yml` 中 `env` 下各参数的注释 `env`下为**自动**触发时默认使用的设置 `workflow_dispatch` 中各参数的 default 一项为**手动**触发时使用的默认设置，手动触发时还可以自定义设置 ![](:/be74e3aba6b14d638b64fb646b5d40d7)\n\n### 3.1 message\n\n提交说明的内容\n\n### 3.2 branch\n\n从何处更新 subconverter\n\n<table><thead><tr><th>可选值</th><th>含义</th></tr></thead><tbody><tr><td>release</td><td>从 release 中下载稳定版本，可用下面的 tag 参数指定版本</td></tr><tr><td>action</td><td>从最新代码所关联 github action 的 Artifacts 里下载已经编译好的</td></tr><tr><td>build</td><td>拉取最新代码自己编译</td></tr></tbody></table>\n\n### 3.3 tag\n\n当 branch 参数设置为 release 时，这个参数指定下载的版本 设置为 latest 时，自动选择最新版本 release\n\n### 3.4 modify_method\n\n自定义配置文件的方法 **不建议直接修改**`subconverter/`内的`pref.ini`等配置文件，因为会在更新后端（subconverter）时被全新的文件覆盖 ，配置就丢失了。\n\n<table><thead><tr><th>可选值</th><th>含义</th></tr></thead><tbody><tr><td>sed</td><td>在 Modify pref.ini by sed 步骤中，用 sed 命令修改配置文件</td></tr><tr><td>files</td><td>使用本项目中 / files 文件夹中的文件覆盖</td></tr></tbody></table>\n\n#### 3.4.1 sed（需要有相关知识）\n\n`/.github/workflows/`下的`main.yml`中的步骤`Modify pref.ini by sed`使用 sed 命令修改 subconverter 的默认配置`pref.ini`的方法 仿照此示例即可\n\n#### 3.4.2 files（简单）\n\n1.  将你要使用的配置文件（包括但不限于`pref.ini`）放入`now-subconverter`仓库的`files`目录下\n2.  任务运行时会自动将`/files`目录下所有文件复制到`subconverter/`内\n\n四、修改 now-subconverter 中的 sub-web 源\n----------------------------------\n\n编辑 /.github/workflows/sub-web.yml 文件中的 25 行，修改为你的 sub-web 项目; 51 行的 commit 信息可以自定义修改。\n\n五、修改 sub-web 项目文件\n-----------------\n\n1.  修改`/.github/workflows/build.yml` 中的 39 行，其中的链接为`.../zhongfly/now-subconverter/...`即我的 now-subconverter 项目，**请修改成你的项目地址**.\n2.  自定义修改 sub-web 项目满足你的个人需要，请参考 sub-web 的 readme.md，此处不过多介绍. 当在你的 sub-web 项目中提交修改后，会自动触发你的 now-subconverter 项目更新其中的 sub-web 文件\n\n六、部署到 vercel\n------------\n\n1.  打开 [vercel](https://vercel.com/dashboard)\n2.  选择 Import Project – Import Git Repository，输入你的 now-subconverter 项目地址\n3.  一路下一步即可\n\n补充：手动更新后端 (subconverter)\n------------------------\n\n当需要更新后端时，进入 now-subconverter 项目的 action 页面，在左侧选择 Update subconverter，点击页面右侧的 Run workflow→Run now，设置好相关参数，点击绿色按键即可开始运行 ![](:/be74e3aba6b14d638b64fb646b5d40d7)\n\ntindy2013/subconverter 更新后，本项目自动更新\n----------------------------------\n\n参考项目 [wiki](https://github.com/zhongfly/now-subconverter/wiki)\n\n点 star 或定时运行任务\n--------------\n\n参见`/.github/workflows/`下的`main.yml`中的`on:`下的触发条件设置","tags":["转载","subconverter"],"categories":["工具"]},{"title":"OneComic 教程","url":"/undefined/75417d5b.html","content":"\n# 一本漫画\n\n**尊重版权，请支持正版**\n\n**该项目仅供技术研究使用，请勿用于非法用途，否则后果自负**\n\n**通过本工具下载或生成的资源禁止传播分享！禁止利用该项目从事营利性活动！**\n\n项目地址： https://github.com/hardwarecode/onecomic\n\n## 安装 / 升级步骤 \n\n自己找安装 Python 的教程（Python 版本大于等于 3.6）\n\n安装 nodejs 环境，自己找教程安装\n\n```\n# 检查python版本\npython --version\n# 检查pip版本\npip --version\n\n\n```\n\n```\n# 在线安装/升级（最新版本）\npip install -U onecomic\n\n# 查看帮助\nonecomic --help\n\n\n```\n\n## 常规使用 \n\n**Windows 下，以下所有示例命令需要添加`python -m`前缀**\n\n如: `python -m onecomic --url \"http://ac.qq.com/Comic/ComicInfo/id/505430\"`\n\n```\n# 注意参数里的 - 和 -- 的区别\n# 从章节列表页面的URL 下载漫画的最新一集\nonecomic --url \"http://ac.qq.com/Comic/ComicInfo/id/505430\"\n\n# 下载漫画 id=505430 最新一集 注意不同站点的漫画id区别\nonecomic -s qq -id=505430\n\n# 下载所有章节\nonecomic -s qq -id 505430 --all\n\n# 下载第800集\nonecomic -s qq -id 505430 -c 800\n\n# 下载倒数第二集\nonecomic -s qq -id 505430 -c -2\n\n# 下载1到5集,7集，9到10集\nonecomic -s qq -id 505430 -c 1-5,7,9-10\n\n# 拼接成长图\nonecomic -s qq -id 505430 --single-image --quality 95 --max-height 20000\n\n# 压缩成zip文件\nonecomic -s qq -id=505430 --zip\n\n# 设置代理\nonecomic -s qq -id 505430 --proxy \"socks5://127.0.0.1:1080\"\n\n# 自定义保存目录\nonecomic -s qq -id=505430 --output MyComicBook\n\n# 将多话合并到单个文件夹和zip文件\nonecomic -s manhuagui -id 1128 -c 320-322 --merge --merge-zip\n\n# 下载单行本\nonecomic -s manhuagui -id 1128 --ext-name 单行本 -c -1\n\n# 跟据名字搜索comicid\nonecomic -s qq --name 海贼\n\n# 生成pdf文件\n# 注意: 生成pdf文件需要额外安装依赖，需要先执行 pip install img2pdf 或 pip install reportlab\nonecomic -s qq -id 505430 --pdf\n\n# 推送到邮箱\n# 注意: 发送到邮箱需预先配置好信息（详情请看配置文件部分）\nonecomic -s qq -id 505430 --pdf --mail --config config.ini\n\n\n```\n\n从其它站点下载，注意不同站点的 comicid 区别\n\n```\n# 从哔哩哔哩漫画下载\nonecomic -s bilibili -id mc24742 -c 1\n\n# 从有妖气漫画下载\nonecomic -s u17 -id 195 -c 1\n\n# 从章节列表页面的URL下载\nonecomic --url \"https://manga.bilibili.com/detail/mc28603\" -c 1\n\n\n```\n\n## 关于登录\n\n登录后可下载已购买的付费资源\n\n1.  [安装 EditThisCookie 插件](https://chrome.google.com/webstore/detail/editthiscookie/fngmhnnpilhplaeedifhccceomclgfbg)\n    \n2.  在浏览器上登录某个站点，然后通过插件导出某个站点的 cookies，并保存到本地文件 如`qq.json`\n\n```\nonecomic -s qq -id=505430 -c -1 --cookies-path=\"qq.json\"\n\n\n```\n\n## 高级批量下载\n\n```\n# 通过指定的URL文件列表批量下载\nonecomic --url-file test/test-url-file.txt\n\n\n```\n\n文件示例`test/test-url-file.txt`\n\n```\n# 海贼王\nhttp://ac.qq.com/Comic/ComicInfo/id/505430\n# 雏蜂\nhttps://www.u17.com/comic/195.html\n\n\n```\n\n* * *\n\n```\n# 有些站点不一定支持，其它的通用参数也适用，可自行组合\n# 下载最近更新页面的1到10页 所有漫画的最新一集\nonecomic -s nvshens --latest-all --latest-page 1-10\n\n# 展示支持的标签\nonecomic -s nvshens --show-tags\n\n# 下载标签搜索结果页面的1到10页 所有漫画的全集\nonecomic -s nvshens --tag-all --tag 女神 --tag-page 1-10 --all\n\n# 下载搜索结果的所有漫画的全集\nonecomic -s nhentai --search-all --search-name 汉化 --search-page 1 --all\n\n\n```\n\n## 其它说明\n\n### cookies 使用说明\n\n- 下载付费内容需要 cookies，Toomics、qootoon 站点下载 R18 内容也需要 cookies\n  \n- 最好保证脚本与在浏览器导出的 cookies 在同一个网络环境（如果浏览器使用代理，脚本也要使用同样的代理环境）\n  \n- 若使用了 cookies 还是下载不了，需检查账号在站点浏览是否正常，若正常浏览则重新导出一份新的 cookies 文件再做尝试\n  \n- 若还是下载不了，请加群反馈。付费内容的下载问题还请提供 cookies 或账号（私聊群主），不提供大概率会被无视\n\n### 关于 cocomanhua 的下载 \n\n1.  安装 nodejs 环境\n    \n2.  安装 crypto-js 依赖，命令：`npm install crypto-js`，默认在当前目录下生成`node_modules`目录\n    \n3.  下载 `onecomic -s cocomanhua -id 12187` 或者 `onecomic -s cocomanhua --node-modules ./node_modules`\n\n# 配置文件\n\n根据示例创建配置文件\n\n## 配置文件示例\n\n```\n[mail]\n\n# SMTP主机 发送账户是163邮箱则设置为 smtp.163.com\nsmtp_server=smtp.qq.com\n\n# SMTP服务端口（SSL）\nsmtp_port=465\n\n# 发送者账户\nsender=xx.qq.com\n\n# 登录失败可能需要使用授权码登录 https://service.mail.qq.com/cgi-bin/help?subtype=1&&id=28&&no=1001256\n# 发送者账户密码或者授权码\nsender_passwd=密码或授权码\n\n# 邮件接收者列表，多个则以半角逗号隔开。如 xxx@qq.com,yyy@qq.com\nreceivers=11111@qq.com,22222@qq.com\n\n\n[crawler]\n# 默认的下载目录\n# download_dir=/home/xxx/MyComicBook\n\n# 配置指定站点代理地址\n# proxy_18comic=socks5://127.0.0.1:1080\n# proxy_manhuagui=socks5://127.0.0.1:1080\n# proxy_nhentai=socks5://127.0.0.1:1080\n# proxy_wnacg=socks5://127.0.0.1:1080\n# proxy_acg456=socks5://127.0.0.1:1080\n# proxy_mh1234=socks5://127.0.0.1:1080\n# proxy_177pic=socks5://127.0.0.1:1080\n# proxy_18hmmcg=socks5://127.0.0.1:1080\n# proxy_xiuren=socks5://127.0.0.1:1080\n# proxy_twhentai=socks5://127.0.0.1:1080\n# proxy_copymanga=socks5://127.0.0.1:1080\n# proxy_toomics=socks5://127.0.0.1:1080\n# proxy_webtoons=socks5://127.0.0.1:1080\n\n\n# webdriver 配置\n# driver_type=Chrome\n# driver_path=/home/xxx/chromedriver_win32/chromedriver.exe\n\n# node模块位置\n# node_modules=/home/xxx/js/node_modules\n\n# cookies存放目录（自动读取该目录下的cookeis文件），文件名命名规范: 如 toomics.json qq.json {site}.json\n# cookies_dir=/home/xxx/cookies\n\n# 长图质量 最大100\n# quality=95\n# 长图最大高度 最大65500\n# max_height=20000\n\n# 图片下载超时时间 单位秒\nimage_timeout=30\n\n# 站点访问超时时间 单位秒\ncrawler_timeout=30\n\n# 每个章节下载时间间隔 单位秒\ncrawler_delay=0\n```\n\n将上述配置保存为`config.ini`\n\n如`onecomic -s u17 -id 195 -c 1`会默认读取当前目录下的`config.ini`配置文件\n\n或者通过环境变量配置默认的配置文件\n\n```\n# 将以下命令添加到 ~/.bashrc 或 ~/.zshrc 文件末尾\nexport ONECOMIC_CONFIG_FILE=\"/home/xxx/MyConfig/config.ini\"\n```\n\n也可以通过参数指定配置文件`onecomic -s u17 -id 195 -c 1 --config config.ini`\n\n# 一本漫画API\n\n**尊重版权，请支持正版**\n\n**该项目仅供技术研究使用，请勿用于非法用途，否则后果自负**\n\n**通过本工具下载或生成的资源禁止传播分享！禁止利用该项目从事营利性活动！**\n\n项目地址： https://github.com/hardwarecode/onecomic-api\n\n## 接口部署\n\n自己找安装Python的教程（Python版本大于等于3.6）\n\n安装nodejs环境\n\n```\ngit clone git@github.com:hardwarecode/onecomic-api.git\n\n# 切换工作目录\ncd onecomic-api\n\n# 安装依赖\npip install -r requirements.txt\n\n# 复制`api/config.py.example`并命名为`api/config.py` 并根据实际情况修改`api/config.py`的参数\n# 注意配置 api/config.py  NODE_MODULES\ncp api/config.py.example api/config.py\n\n# 启动接口\ngunicorn 'api:create_app()' -b \"127.0.0.1:8000\" --workers=2 --timeout=10\n\n# 查看可选的配置选项 gunicorn --help\n# 文档 http://docs.gunicorn.org/en/latest/settings.html\n```\n\n更新\n\n```\n# 只更新onecomic（修复bug、添加更多的源等）\npip install -U onecomic\n\n# 更新项目。注意`api/config.py.example`有无新增的配置，如果有的话需要重新配置`api/config.py`\ngit pull\npip install -U onecomic\npip install -r requirements.txt\n```\n\n## 接口文档\n\n### 1.1 获取漫画概要信息\n\n```\nGET /api/<site>/comic/<comicid>\n```\n\n请求示例\n\n```\ncurl \"http://127.0.0.1:8000/api/bilibili/comic/24742\"\n{\n    \"author\": \"尾田荣一郎 集英社\",\n    \"chapters\": [\n        {\n            \"chapter_number\": 1,\n            \"source_url\": \"https://manga.bilibili.com/m/mc24742/218087\",\n            \"title\": \"ROMANCE DAWN冒险的序幕\"\n        },\n        {\n            \"chapter_number\": 2,\n            \"source_url\": \"https://manga.bilibili.com/m/mc24742/218093\",\n            \"title\": \"戴草帽的路飞\"\n        }\n    ],\n    \"cover_image_url\": \"http://i0.hdslb.com/bfs/manga-static/8cfad691e8717f8c189f2b5e93a39d272708f91a.jpg\",\n    \"crawl_time\": \"2020-08-16 15:06:29\",\n    \"desc\": \"【此漫画的翻译由版权方提供】拥有财富、名声、权力、这世界上的一切的男人 “海盗王”高路德·罗杰，在临死之前说了一句话，让全世界的人都涌向了大海。“想要我的财宝吗？想要的话，就去拿吧，我把世界上的一切都放在了那里！”，这个世界迎来了“大海盗时代”。\",\n    \"name\": \"航海王\",\n    \"source_name\": \"哔哩哔哩漫画\",\n    \"site\": \"bilibili\",\n    \"source_url\": \"https://manga.bilibili.com/m/detail/mc24742\",\n    \"tag\": \"奇幻,热血,冒险\",\n    \"ext_chapters\": [\n        {\n            \"ext_name\": \"番外篇\",\n            \"chapters\": []\n        }\n    ],\n    \"comicid\": \"24742\",\n    \"tags\": [\n        {\n            \"name\":\"奇幻\",\n            \"tag\":\"style_id_998\"\n        },\n        {\n            \"name\":\"热血\",\n            \"tag\":\"style_id_999\"\n        },\n        {\n            \"name\":\"冒险\",\n            \"tag\":\"style_id_1013\"\n        }\n    ]\n}\n```\n\n- `tags`: 可用于标签搜索，如 `http://127.0.0.1:8000/api/bilibili/list?tag=style_id_998&page=1`\n\n------\n\n### 1.2 获取章节详情\n\n```\nGET /api/<site>/comic/<comicid>/<chapter_number>\n```\n\n请求示例\n\n```\ncurl \"http://127.0.0.1:8000/api/bilibili/comic/24742/1\"\n\n# 获取单行本第一卷\ncurl \"http://127.0.0.1:8000/api/manhuagui/comic/1128/1?ext_name=单行本\"\n{\n    \"chapter_number\": 1,\n    \"image_urls\": [\n        \"https://i0.hdslb.com/bfs/manga/a978a1834b3ad58fad020e56aaac9faaa0aa941a.jpg?token=73441250b03e3f16%3ANyuRMmMH4QSq3VoxAtaxG5yw%2Bd0%3D%3A1597561590\",\n        \"https://i0.hdslb.com/bfs/manga/535548cebdd5d96cfa87247f07171ccebfa1efa7.jpg?token=73441250b03e3f16%3Awk76wOeUd7daRpAfc%2FHSs1Qkql0%3D%3A1597561590\",\n        \"https://i0.hdslb.com/bfs/manga/f6e50a5bdd38af33c152f7929ee63325b519bfdc.jpg?token=73441250b03e3f16%3Ad57MJZIADxnHC%2FG9TkOIvlK1pLU%3D%3A1597561590\"\n    ],\n    \"source_url\": \"https://manga.bilibili.com/m/mc24742/218087\",\n    \"title\": \"ROMANCE DAWN冒险的序幕\",\n    \"source_name\": \"哔哩哔哩漫画\",\n    \"site\": \"bilibili\",\n    \"comicid\": \"24742\",\n}\n```\n\n------\n\n### 1.3 搜索接口\n\n```\nGET /api/<site>/search?name={name}&page={page}\n```\n\n请求示例\n\n```\ncurl \"http://127.0.0.1:8000/api/qq/search?name=海贼&page=1\"\n{\n    \"search_result\":[\n        {\n            \"comicid\":\"505430\",\n            \"cover_image_url\":\"https://manhua.qpic.cn/vertical/0/17_16_48_0e28c8aabf48e91d395689b5f6a7689f.jpg/420\",\n            \"name\":\"航海王\",\n            \"source_url\":\"https://ac.qq.com/Comic/ComicInfo/id/505430\",\n            \"source_name\": \"腾讯漫画\",\n            \"site\": \"qq\",\n        },\n        {\n            \"comicid\":\"531616\",\n            \"cover_image_url\":\"https://manhua.qpic.cn/vertical/0/17_17_06_cb4ba7f7af603a3380bb1e5ed415804b.jpg/420\",\n            \"name\":\"航海王（番外篇）\",\n            \"source_url\":\"https://ac.qq.com/Comic/ComicInfo/id/531616\",\n            \"source_name\": \"腾讯漫画\",\n            \"site\": \"qq\",\n        }\n    ]\n}\n```\n\n------\n\n### 1.4 获取最近更新\n\n```\nGET /api/<site>/latest?page={page}\n```\n\n请求示例\n\n```\ncurl \"http://127.0.0.1:8000/api/qq/latest?page=1\"\n{\n    \"latest\":[\n        {\n            \"comicid\":\"505430\",\n            \"cover_image_url\":\"https://manhua.qpic.cn/vertical/0/17_16_48_0e28c8aabf48e91d395689b5f6a7689f.jpg/420\",\n            \"name\":\"航海王\",\n            \"source_url\":\"https://ac.qq.com/Comic/ComicInfo/id/505430\",\n            \"source_name\": \"腾讯漫画\",\n            \"site\": \"qq\",\n        }\n    ]\n}\n```\n\n### 1.5 获取所有tag\n\n```\nGET /api/<site>/tags\n```\n\n请求示例\n\n```\ncurl \"http://127.0.0.1:8000/api/qq/tags\"\n{\n    \"tags\":[\n        {\n            \"category\":\"属性\",\n            \"tags\":[\n                {\n                    \"name\":\"全部\",\n                    \"tag\":\"\"\n                },\n                {\n                    \"name\":\"付费\",\n                    \"tag\":\"vip_2\"\n                },\n                {\n                    \"name\":\"免费\",\n                    \"tag\":\"vip_1\"\n                }\n            ]\n        },\n        {\n            \"category\":\"进度\",\n            \"tags\":[\n                {\n                    \"name\":\"全部\",\n                    \"tag\":\"\"\n                },\n                {\n                    \"name\":\"连载\",\n                    \"tag\":\"finish_1\"\n                },\n                {\n                    \"name\":\"完结\",\n                    \"tag\":\"finish_2\"\n                }\n            ]\n        },\n        {\n            \"category\":\"标签\",\n            \"tags\":[\n                {\n                    \"name\":\"恋爱\",\n                    \"tag\":\"theme_105\"\n                },\n                {\n                    \"name\":\"玄幻\",\n                    \"tag\":\"theme_101\"\n                }\n            ]\n        }\n    ]\n}\n```\n\n### 1.6 根据tag搜索\n\n```\nGET /api/<site>/list?tag={tag}&page={page}\n```\n\n请求示例\n\n```\n# 多个标签搜索不一定支持\ncurl \"http://127.0.0.1:8000/api/qq/list?tag=theme_105,finish_2&page=1\"\n{\n    \"list\":[\n        {\n            \"comicid\":\"623251\",\n            \"cover_image_url\":\"https://manhua.qpic.cn/vertical/0/12_20_16_eefe809e406d5076dd13012d48869f89_1499861764052.jpg/420\",\n            \"name\":\"出柜通告\",\n            \"site\":\"qq\",\n            \"source_name\":\"腾讯漫画\",\n            \"source_url\":\"https://ac.qq.com/Comic/ComicInfo/id/623251\",\n            \"status\":\"\"\n        },\n        {\n            \"comicid\":\"642093\",\n            \"cover_image_url\":\"https://manhua.qpic.cn/vertical/0/27_15_21_78309f29cd87c7cc377394e7eff7451a_1558941691349.jpg/420\",\n            \"name\":\"早安，亿万萌妻\",\n            \"site\":\"qq\",\n            \"source_name\":\"腾讯漫画\",\n            \"source_url\":\"https://ac.qq.com/Comic/ComicInfo/id/642093\",\n            \"status\":\"\"\n        }\n    ]\n}\n```\n\n### 1.7 聚合搜索\n\n```\nGET /aggregate/search?name={name}&site={site}\n```\n\n请求示例\n\n```\ncurl \"http://127.0.0.1:8000/aggregate/search?name=海贼&site=bilibili,u17\"\n{\n    \"list\":[\n        {\n            \"comicid\":24742,\n            \"cover_image_url\":\"http://i0.hdslb.com/bfs/manga-static/7bcf22ed4904a4346c7aa33887be0e6540d5908f.png\",\n            \"name\":\"航海王\",\n            \"site\":\"bilibili\",\n            \"source_name\":\"哔哩哔哩漫画\",\n            \"source_url\":\"https://manga.bilibili.com/m/detail/mc24742\",\n            \"status\":\"连载\"\n        },\n        {\n            \"comicid\":\"53210\",\n            \"cover_image_url\":\"https://cover.u17i.com/2016/06/3531898_1465634794_j1xJ1WwX0zh3.small.jpg\",\n            \"name\":\"当火影遇上海贼\",\n            \"site\":\"u17\",\n            \"source_name\":\"有妖气\",\n            \"source_url\":\"https://www.u17.com/comic/53210.html\",\n            \"status\":\"\"\n        }\n    ]\n}\n```\n\n### 1.8 根据url获取comicid\n\n```\nGET /tools/urlinfo\n```\n\n请求示例\n\n```\ncurl \"http://127.0.0.1:8000/tools/urlinfo?url=https://www.u17.com/comic/53210.html\"\n{\n    \"comicid\": \"53210\",\n    \"site\": \"u17\",\n    \"url\": \"https://www.u17.com/comic/53210.html\"\n}\n```\n\n### 1.9 获取所有可用的站点配置\n\n```\nGET /crawler/config\ncurl \"http://127.0.0.1:8000/crawler/config\"\n{\n    \"configs\": [\n        {\n            \"r18\": false,\n            \"site\": \"acg456\",\n            \"source_index\": \"http://www.acg456.com/\",\n            \"source_name\": \"ACG肆伍陆\"\n        },\n        {\n            \"r18\": false,\n            \"site\": \"bilibili\",\n            \"source_index\": \"https://manga.bilibili.com/\",\n            \"source_name\": \"哔哩哔哩漫画\"\n        },\n        ...\n    ]\n}\n```\n\n### 2.0 API管理相关\n\n**2.x 下的接口，只是实验功能，只能用于单点，多点部署的话不适用**\n\n**2.x 下面的接口，需要登录校验，用户名和密码可以在`config.py`中的`USERS`配置，若留空则不用验证**\n\n**登录**: `POST /user/login?next=`\n\n- username: 用户名\n- password: 密码\n\n**登出**: `GET /user/logout?next=`\n\n**获取用户信息**: `GET /user/info`\n\n### 2.1 添加到异步任务\n\n```\nGET /manage/task/add\n```\n\n- site: 站点\n- comicid: 漫画id\n- params: json字符串\n\n```\n{\n    \"chapters\": \"1,2,3\",\n    \"is_download_all\": true,\n    \"is_gen_pdf\": true,\n    \"is_gen_zip\": true,\n    \"is_single_image\": true,\n    \"quality\": 95,\n    \"is_send_mail\": true,\n    \"receivers\": \"123@qq.com,456@qq.com\"  \n}\n```\n\n- chapters: 下载的章节数 默认下载最新一集\n- is_download_all: 是否下载全部 默认否\n- is_gen_pdf: 是否生成pdf文件 默认否\n- is_gen_zip: 是否生成zip文件 默认否\n- is_single_image: 是否生成单图文件 默认否\n- quality: 生成的单图图片质量 默认95\n- is_send_mail: 是否发送邮件 默认否\n- receivers: 邮件接收者，多个以逗号隔开，不传默认发送到配置文件里的收件人\n\n**注意**： 生成PDF需要安装额外依赖，`pip install img2pdf 或 pip install reportlab`\n\n请求示例\n\n```\ncurl 'http://127.0.0.1:8000/manage/task/add?site=qq&comicid=505430&params={\"chapters\": \"1\",\"is_download_all\":false}'\n{\n    \"data\": {\n        \"comicid\": \"505430\",\n        \"cost_time\": 0,\n        \"create_time\": \"2020-11-27 21:17:18\",\n        \"id\": 1,\n        \"name\": \"航海王\",\n        \"params\": {},\n        \"reason\": \"\",\n        \"site\": \"qq\",\n        \"start_time\": \"2020-11-27 21:17:18\",\n        \"status\": \"运行中\",\n        \"update_time\": \"2020-11-27 21:17:18\"\n    }\n}\n```\n\n### 2.2 查看任务列表\n\n```\nGET /manage/task/list?page={page}\n```\n\n若任务超过10min，任务状态还没变成完成/失败，可能需重新添加异步任务\n\n请求示例\n\n```\ncurl \"http://127.0.0.1:8000/manage/task/list?page=1\"\n```\n\n### 2.3 查看站点cookies\n\n```\nGET /manage/cookies/{site}\n```\n\n请求示例\n\n```\ncurl \"http://127.0.0.1:8000/manage/cookies/qq\"\n```\n\n### 2.4 更新站点cookies\n\n```\nPOST /manage/cookies/{site}\n```\n\n请求示例\n\n```\ncurl -XPOST \"http://127.0.0.1:8000/manage/cookies/qq\" \\\n    -H \"Content-Type: application/json\" -d \\\n'{\n    \"cookies\": [\n        {\n            \"domain\": \".ac.qq.com\",\n            \"name\": \"xxx\",\n            \"path\": \"/\",\n            \"secure\": false,\n            \"value\": \"1604080000\"\n        }\n    ],\n    \"cover\": false\n}'\n```\n\n- `cover`: 可选参数，是否覆盖，默认不覆盖\n\n### 2.5 查看站点代理配置\n\n```\nGET /manage/proxy/{site}\n```\n\n请求示例\n\n```\ncurl \"http://127.0.0.1:8000/manage/proxy/qq\"\n```\n\n### 2.6 设置站点代理\n\n```\nGET /manage/proxy/{site}?proxy={proxy}\n```\n\n请求示例\n\n```\ncurl \"http://127.0.0.1:8000/manage/proxy/wnacg?proxy=socks5://127.0.0.1:1080\"\n```\n\n# 站点收录情况\n\n## 漫画站点\n\n| 站点         | site       | 站点主页                       | 最近更新 | 关键词搜索 | 标签搜索 |\n| ------------ | ---------- | ------------------------------ | -------- | ---------- | -------- |\n| 拷贝漫画     | copymanga  | https://copymanga.com/         | ✓        | ✓          | ✓        |\n| 二次元动漫   | 2animx     | https://www.2animx.com/        | ✓        | ✓          | ✓        |\n| 古风漫画网   | gufengmh8  | https://www.gufengmh8.com/     | ✓        | -          | ✓        |\n| 36漫画网     | 36mh       | https://www.36mh.net/          | ✓        | -          | ✓        |\n| 土豪漫画网   | tuhao456   | https://www.tuhao456.com/      | ✓        | ✓          | ✓        |\n| 漫画DB       | manhuadb   | https://www.manhuadb.com/      | ✓        | ✓          | ✓        |\n| DM5          | dm5        | https://www.dm5.com/           | ✓        | ✓          | ✓        |\n| bilibili漫画 | bilibili   | https://manga.bilibili.com/    | ✓        | ✓          | ✓        |\n| 腾讯漫画     | qq         | https://ac.qq.com/             | ✓        | ✓          | ✓        |\n| 有妖气漫画   | u17        | https://www.u17.com/           | ✓        | ✓          | ✓        |\n| 动漫之家     | dmzj       | https://www.dmzj.com/          | ✓        | ✓          | ✓        |\n| 快看漫画     | kuaikan    | https://www.kuaikanmanhua.com/ | ✓        | ✓          | ✓        |\n| 漫画柜       | manhuagui  | https://www.manhuagui.com/     | ✓        | ✓          | ✓        |\n| 漫画柜       | mhgui      | https://www.mhgui.com/         | ✓        | ✓          | ✓        |\n| 漫画1234     | mh1234     | https://www.mh1234.com/        | ✓        | ✓          | ✓        |\n| 新新漫画     | 77mh       | https://www.77mh.cc/           | ✓        | ✓          | ✓        |\n| 漫画台       | manhuatai  | https://www.manhuatai.com/     | ✓        | -          | -        |\n| ACG肆伍陆    | acg456     | http://www.acg456.com/         | ✓        | -          | ✓        |\n| COCO漫画     | cocomanhua | https://www.cocomanhua.com/    | ✓        | ✓          | ✓        |\n| WEBTOON      | webtoons   | https://www.webtoons.com/      | ✓        | -          | -        |\n| qootoon      | qootoon    | https://www.qootoon.net/       | ✓        | -          | -        |\n| 扑飞漫画     | pufei8     | http://www.pufei8.com/         | -        | -          | ✓        |\n| 歪漫屋       | yymh889    | http://yymh889.com/            | ✓        | ✓          | -        |\n| 爱飞漫画     | 2feimh     | https://www.2feimh.com/        | -        | -          | -        |\n| 优酷漫画     | ykmh       | https://www.ykmh.com/          | ✓        | ✓          | -        |\n| 来漫画       | laimanhua  | https://www.laimanhua.com/     | ✓        | ✓          | ✓        |\n| 漫画160      | mh160      | https://www.mh160.xyz/         | ✓        | ✓          | ✓        |\n| 奇漫屋       | qiman6     | http://www.qiman6.com/         | ✓        | ✓          | ✓        |\n| 奇妙漫画     | qimiaomh   | https://www.qimiaomh.com/      | ✓        | ✓          | ✓        |\n| 6漫画        | sixmh6     | http://www.sixmh6.com/         | ✓        | ✓          | ✓        |\n| 波动boodo    | boodo      | https://boodo.qq.com/          | ✓        | ✓          | ✓        |\n| 3250漫画     | 3250mh     | https://www.3250mh.com/        | ✓        | ✓          | ✓        |\n| 漫番漫画     | myfcomic   | http://www.myfcomic.com/       | ✓        | ✓          | ✓        |\n\n## R18\n\n| 站点      | site    | 站点主页                 | 最近更新 | 关键词搜索 | 标签搜索 |\n| --------- | ------- | ------------------------ | -------- | ---------- | -------- |\n| 18H漫画区 | 18hmmcg | http://18h.mm-cg.com/    | ✓        | ✓          | ✓        |\n| 177漫畫   | 177pic  | http://177pic.info/      | ✓        | ✓          | ✓        |\n| 绅士漫画  | wnacg   | http://www.wnacg.org/    | ✓        | ✓          | ✓        |\n| 禁漫天堂  | 18comic | https://18comic.org/     | ✓        | ✓          | ✓        |\n| NHentai   | nhentai | https://nhentai.net/     | ✓        | ✓          | ✓        |\n| 禁漫之家  | jmzj    | http://jmzj.xyz/         | ✓        | ✓          | ✓        |\n| 污污漫画  | 55comic | https://www.55comic.com/ | ✓        | ✓          | ✓        |\n\n## 图集\n\n| 站点   | site   | 站点主页               | 最近更新 | 关键词搜索 | 标签搜索 |\n| ------ | ------ | ---------------------- | -------- | ---------- | -------- |\n| 秀人网 | xiuren | http://www.xiuren.org/ | ✓        | -          | ✓        |\n| MMKK   | mmkk   | https://www.mmkk.me/   | ✓        | -          | ✓        |\n\n## 其它站点（未收录）\n\n| 站点     | 说明                         | 站点主页              |\n| -------- | ---------------------------- | --------------------- |\n| e-hentai | 配合 Ehviewer 食用           | https://e-hentai.org/ |\n| exhenta  | 配合 Ehviewer 食用           | https://exhentai.org/ |\n| Nsfwpicx | NSFW图集（看看就好，别爬了） | http://picxxxxx.top/  |\n| Toomics  | 之前适配过，现在不能用了     | https://toomics.com/  |\n","tags":["转载","OneComic"],"categories":["工具"]},{"title":"最强渲染器 madVR - 使用指南（下篇）","url":"/undefined/fa26939c.html","content":"\n{% note blue 'fas fa-bullhorn' %}\n\n {% post_link 最强渲染器madVR-使用指南（上篇） ' ⚡️ 最强渲染器madVR-使用指南（上篇）' %} - {% post_link 最强渲染器madVR-使用指南（下篇） ' ⚡️ 最强渲染器madVR-使用指南（下篇）' %} \n\n{% endnote %}\n\n## madVR 概述\n\n![](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/9e1a97067f3c4d6b8faf59fcfb23945c.jpg)\n\n（madVR的开发者，德国人Madshi）\n对于madVR渲染器，使用PC视频播放器的用户不会陌生。说它是PC电脑上的最强渲染器一点都不为过。有了它，PC播放的画质超过顶级蓝光播放器不再是”不可能的任务“。即使是这个神一般的工具，使用起来依然与大多数PC软件一样 - 设置选项繁多而且复杂。再加上这是一个由德国人开发的软件，菜单统统是英文的，对于大多数用户来说并不是很友好。\n\n即使看到过几篇关于使用电脑播放器+madVR播放的文章，感觉作者也只是人云亦云，一知半解。以为自己安装了madVR就万事OK了。殊不知，madVR的强大远远超出了人们的想象。\n\n幸好，一名叫做“萬年冷凍庫”的朋友（应该是台湾人），在Blogspot发布一篇大约3万字的madVR使用指南。详细到每一项设置该如何调整，最终测试效果如何。相信读完这篇文章，大家都能成为PC视频播放的高手。原文在此：[萬年冷凍庫: 系列之3─最強渲染器-madVR ](http://lysandria1985.blogspot.com/2013/01/3-madvr.html)\n\n由于一些不可抗力的原因，原文页面无法被大多数人访问，因此一烧体验馆将此文章搬运过来，分2篇进行连载。\n\n上篇 {% post_link 最强渲染器madVR-使用指南（上篇） %}\n\n下篇开始 **（以下约一万字，请收藏文章后阅读）**\n\n**=================**\n\n## Scaling algorithms\n\n### 简单介绍\n\n接下来要进入重头戏，关于scaling算法的设置，这部分是影响效能最大也是影响画质表现最明显的地方，也是madVR的最大特色，我们可以看到有四个地方需要设置算法，分别是chroma upscaling、image downscaling、image upscaling和upscaling refinement\n\n<img width=\"690\" height=\"429\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/603b992632f14e8abc2dad8f68d462c7.jpg\" class=\"jop-noMdConv\">\n\n简单解释一下这四者的意义：\n\n1.  chroma upscaling是指色度升频，通常我们常见的YCbCr 4:2:0的图像文件就是经过色度抽样的，人眼对色度的改变不及亮度敏感，所以用较多的信息储存亮度信息(Y)，较少的信息储存色度信息(CbCr)以节省带宽，以YCbCr 4:2:0而言，水平方向及垂直方向的色度分辨率都只有YCbCr 4:4:4的一半。举例来说，一个分辨率1920\\*1080的影片，在4:4:4的情况下，亮度分辨率是1920\\*1080，色度分辨率也是1920\\*1080，但是在4:2:0的情况下，亮度分辨率一样是1920\\*1080，色度信息水平和垂直都只取一半，也就是说色度分辨率是960*540。常见的影视内容多半是抽样成4:2:0储存，因此我们播放一个YCbCr 4:2:0的图像文件时，首先要将其色度信息升频到原始分辨率，也就是YCbCr 4:4:4，这时就会用到色度升频的算法。关于色度取样的相关知识也可参考维基百科：[色度抽样 - 维基百科，自由的百科全书 (wikipedia.org)](https://zh.wikipedia.org/wiki/色度抽样)\n\n1.  image downscaling就是指影像降频，也就是影像缩小，只要目标分辨率小于原始分辨率就会用到这部分的算法。\n1.  image upscaling就是指影像升频，也就是影像放大，只要目标分辨率大于原始分辨率就会用到这部分的算法。\n1.  upscaling refinement这部分是锐化算法，跟前面的iamgeenhancements不同，**其目的在于改善放大演算后造成的模糊，作用在放大演算之后，属于post-processing**。如果是1:1无放大的影像，这部分勾选了也不会有作用。\n\n### chroma upscaling\n\n**通常一个图像文件播放，到渲染器这步骤时，渲染器会先对其做色度升频，然后再将其原始分辨率依需要做影像升降频到目标分辨率，也就是说，一个1080p YCbCr 4:2:0的档案，就算在分辨率1920*1080的屏幕播放，它不需要做任何影像升降频演算，但还是需要做色度升频的演算。**\n\n**chroma upscaling里面指定的的算法，在完成原始分辨率YCbCr 4:2:0→RGB 4:4:4的升频后即完成任务，之后影像要放大缩小都跟其无关。后续的resize需要的亮度和色度升降频由image upscaling或是image downscaling所指定的算法来负责。**\n\n**在对视觉感受的影响上，影像升降频算法的影响比色度升频演算的影响要大得多。换句话说，改变影像升降频的算法，你比较容易感觉的到差别，改变色度升频的算法比较难感受到差别。**\n\n接下来我们来看看算法内容，右上角有个表格，每种算法有不同的数值，通常绿色是优点(sharpness = 锐利度)，越高越好，红色部分是失真，缺陷(aliasing = 锯齿、ringing = 振铃效应)，越低越好。\n\n再来以各算法的消耗效能来说，Nearest Neighbor、bilinear、DXVA2这几种消耗的效能最低(DXVA2在此处是指DXVA-scaling，这项演算优劣直接受显卡影响，因卡而异，有些类似bilinear，有些则类似Bicubic或Lanczos的水平)，再来是Cubic(Mitchell-Netravali、Catmull-Rom、Bicubic、Softcubic)这几种，消耗效能其次，再来是Lanczos、Spline，消耗效能又高一点，再来是Jinc和super-xbr，消耗效能更高，不过效果也比前面几种都好，再来是NGU系列，NGU-low消耗跟 Jinc差不多；NGU-med以上消耗比Jinc多，但效果也更好。\n\n此外，勾选\"activate anti-ringing filter\"(以下简称AR)能够有效的抑制算法本身产生的振铃效应，相对的也会增加一点点效能消耗。\n\n看到chroma upscaling这页，上面也提过chroma upscaling的提升对整体画面的影响比较难察觉，通常只会影响一些颜色边缘、色块，在一些对比高的场景才会看得到一点点差别(红底黑字或黑底红字之类)，故不用投资太多效能在这里。\n\n几个建议的设置是super-xbr 100以上+ AR、NGU Anti-Alias(以下简称NGU AA)low、med、high(chroma upscaling这边设到very high没必要)、Bilateral(soft或sharp)或Reconstruction(soft)。\n\nNGU-Sharp则在锐利度的表现不错，其锐利度仅次于Reconstructionsharp和placebo，但有些地方会有点锐化过头，个人不是很喜欢。另外就是抑制artifacts的能力，这边我没有做太多测试，doom9上有几位认为这一项super-xbr + AR或Reconstruction soft又比NGU-Sharp好一点，仅供参考。\n\nsuper-xbr + AR、NGU-low或med、Bilateralsoft、Reconstruction soft这几个效能消耗都差不多。\n\n上面几个跑不动的话，再退一步则是Cubic(Bicubic 75)+AR，或不开AR，还是跑不动的话才用Bilinear。\n\n根据madshi说法NGU在这边还非最终版本，以后还会像Bilateral一样加入luma channel做为参照，所以也许NGU的一些不足之处还有进步空间，可以期待一下。\n\n这边提一下Bilateral，它是以亮度频道(luma channel)做为色度的参考，但是其结果比较极端，受片源影响很大，有些片源它的色度升频效果明显比NNEDI3和super-xbr甚至目前的NGU还要好，但有些却又比较糟糕。\n\nBilateral有三个版本，old是原始版本，消耗的资源很少，大概跟Bicubic差不多，但上面提到的受片源影响最明显，soft和sharp则是改良版本，资源消耗跟super-xbr差不多，sharp比soft锐利一些。\n\nBilateral soft或sharp拿来当常驻选项也是一个不错的选择，个人喜欢soft多于sharp\n\n而Reconstruction算是基于Bilateral的改造版本，也有三个版本，soft比较泛用，不会那么极端，但相对优点就没那么明显，sharp跟placebo则强化了锐利度(另外两个是各加了AR滤镜)，但有时候会让人觉得锐化过头了，而且效能消耗比soft高太多，个人不是很建议，不过请自行判断，也许有人喜欢。\n\nReconstruction系列中个人认为比较适合当常驻的是Reconstruction soft\n\n下面AR滤镜基本上能开就开，至于要不要开SuperRes则见仁见智，个人是不喜欢开(这边的SuperRes跟后面upscaling refinement里面的SuperRes并没有关系，是各自独立的选项，但一样都是额外做锐化处理)\n\n在我个人的测试中Bilateral soft是我最喜欢的选项，锐利度跟抑制artifacts效果都很棒很平衡，其次是NGU-AA high，但我不是很确定Bilateral soft会不会有表现比较糟的片源，所以这个仅供参考。super-xbr100或125 + AR和Reconstruction soft则是doom9上比较多人推荐的选项，但我个人觉得有点不够锐利就是了。\n\n另外值得注意的是，不同分辨率/帧率的片源对于chroma upscaling的效能消耗也不同，像4K>>1080>480，这方面的差别，需要透过设置profile才能达到最大限度的显卡资源应用。\n\n<img width=\"690\" height=\"433\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/2abf1caffa7d4cd39113484f567bb384.jpg\" class=\"jop-noMdConv\">\n\n### image downscaling\n\n在image downscaling的部分，SSIM是目前表现最好的算法，在缩小画面的同时很好的保留了原分辨率的细节跟锐利度，不过效能消耗也比较大。1D是以Bicubic为基础，2D则是以Jinc为基础，在4K→FHD的场合，某些场景中2D比1D稍微好一点点，但是效能消耗大很多，请斟酌使用。(以GTX 960来说，4K@60p→FHD屏幕，只能开到1D，2D会负荷不了)后面的强度%数越高画面越锐利，但相对的可能会让画面有些刺刺的，哪个强度比较适合自己请自行测试。另外建议勾选\"activate anti-ringing filter\"(以下简称AR)跟\"scalein linear light\"(以下简称LL)。\n\nAR滤镜后面有一个strict(soft)跟relaxed，前者是AR滤镜预设强度，后者是降低AR滤镜强度，换得一些锐利度的提升(但ringing也会比较多)，relaxed个人认为一些本身就比较柔和的算法比较适合，像Catmull-Rom，不过这个没有绝对，自己试试看比较重要。\n\n至于\"activate anti-bloating filter\"(以下简称AB)，它会强化高频讯号并移除低频讯号，用在SSIM上面，效果很类似直接把强度%数降低，不过madshi认为某些场景用AB滤镜效果比直接降低%数好，需不需要用这个滤镜，要用的话要开多强，也是请各位自行测试，每个人喜好跟观赏环境不一样。\n\n如果显卡跑不动SSIM的话，次一级的选项是Cubic(Bicubic 150)+AR+LL，再次一级是Cubic(Catmull-Rom)+AR+LL，如果还是跑不动再依次把LL跟AR拿掉，还是跑不动的话最后再去考虑bilinear或DXVA2\n\n值得注意的是，降频演算跟升频演算一样，各种算法的差异也是倍率差越多越明显，例如在4K→1080的场合，有些场景我可以观察到SSIM 2D跟SSIM 1D的差别，但如果是1440→1080的场合，就很难看出差别了，而如果是升频再降频的场合，例如720→1440→1080，由于升频上去的影像本来细节就比原生高分辨率的影像少，因此这时候SSIM 1D和Bicubic 150的差别也很小了。如何对各种不同分辨率的影片作最适合的设置以达到最好的效能利用，就要靠profile设置了。\n\n**备注：madVR v0.91.4之后，\"升频再降频\"所使用的降频算法不在image downscaling里设定，而是在image upscaling里的子选项\"if any(more) scaling needs to be done:\"里设定**\n\n<img width=\"690\" height=\"429\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/eca41d88b6b34c988bb7757a16da6692.jpg\" class=\"jop-noMdConv\">\n\n### image upscaling\n\n接下来看到image upscaling，Bilinear和DXVA2，是对于一些比较弱的显卡或内显，效能无法负担其他任何算法时的选择，但其效果远不如其他算法。\n\nCubic系列(image upscaling这边一般使用下拉式选单里的Bicubic，后面数字越高锐化越高，但超过100的不建议)Lanczos、Spline这几种，效能消耗在伯仲之间(Lanczos、Spline比Cubic略高)，而效果互有利弊，可参考右上角图表，一般来说Lanczos比Spline和Bicubic好一点。而Jinc，效能消耗比上面三种高一点，锐利度稍低于Lanczos，但对于artifacts的抑制做得很好，综合表现在上面三种之上。使用这几种算法时，下面的\"activate anti-ringing filter\"(AR滤镜)都建议勾选，至于\"scalein sigmoidal light\"这个选项，照madshi的说法它在有些场景可以稍微降低一些锯齿(aliasing)，但某些场景可能又糟一些些，故各位自行测试决定要不要勾。\n\n至于super-xbr和NGU系列，比较特别一点，它只能做2的次方倍的放大(2倍、2倍再2倍=4倍)，不过NGU-(Sharp、Standard、Soft)可以做4倍的直接放大。就效果而言，这几种算法(尤其是NGU系列)跟其他几种完全不是同一等级，提升非常明显，当然效能消耗也会比较大。同时，很多情形下2的次方倍放大不会刚好等于目标分辨率，所以还会需要其他的升降频算法辅助把画面scale到目标分辨率。\n\nNGU系列下面第一个下拉式选单里，algorithmquality–luma doubling，即亮度分辨率的翻倍，选择luma的运算强度，有四个等级，very high(非常高)、high(高)、med(一般)、low(低)，越高运算越精密，消耗的效能也越多，low 的效能消耗大概跟Jinc差不多。在锐利度上四者有一点点差别但不是差很大那种，very high在线条的聚焦上会稍微好一点点，最主要是差在artifacts的抑制程度，越高抑制效果越好。\n\n第二个下拉式选单，luma quadrupling，这项选择\"let madVR decide\"的话，会自动根据luma doubling里的翻倍强度设定来决定二次翻倍是否启用和强度。NGU Anti-Alias(以下简称NGU-AA) luma doubling选low~med，\"let madVR decide\"不会启用二次翻倍，lumadoubling选high~very high则\"let madVR decide\"二次翻倍会使用med。\n\n选择\"disable\"则是不启用二次翻倍。\n\n另外NGU-(Sharp、Standard、Soft)可以自行指定四倍放大时是使用\"翻倍后再翻倍\"的再次翻倍double again模式，或是直接四倍放大direct quadruple模式(NGU-(Sharp、Standard、Soft)限定，AA没有)。纯以锐利度来说double again会比direct quadruple高一点，但direct quadruple效能消耗会比double again低很多，而且对于噪声抑制和整体自然感而言direct quadruple都比较好，个人推荐direct quadruple，NGU-(Sharp、Standard、Soft)选择\"let madVR decide\"的话预设也就是用directquadruple。\n\n第三个下拉式选单，chroma，影响色度升频到目标分辨率所使用的算法，选择\"let madVR decide\"时，luma doubling选择low~high，会使用Bicubic60+AR；luma doubling选择very high，会使用NGU-med。\n\n- normal = Bicubic60+AR\n\n- high = NGU-low\n\n- very high = NGU-med (此项如果luma doubling设定high时会跳回high)\n\n第四个下拉式选单，activate doubling，是设定翻倍的启用条件，达到条件才会启用NGU进行翻倍。\n\n- NGU-AA的选项：\n\n选择\"let madVR decide\"时，默认是目标分辨率宽或高大于或等于原始分辨率1.2倍时启用，没达到1.2倍启用条件的话则会使用Jinc+AR替代。\n\n- NGU-(Sharp、Standard、Soft)的选项：\n\n选择\"let madVR decide\"时，默认是目标分辨率宽或高大于或等于原始分辨率1.2倍时启用，没达到1.2倍启用条件的话则会使用Jinc+AR替代。\n\n- 其他选项：\n\n  - …only if scaling factor is 2.0x (orbigger) 当目标分辨率宽或高大于或等于原始分辨率2倍时启用\n\n  - …only if scaling factor is 1.5x (orbigger) 当目标分辨率宽或高大于或等于原始分辨率1.5倍时启用\n\n  - …only if scaling factor is 1.2x (orbigger) 当目标分辨率宽或高大于或等于原始分辨率1.2倍时启用\n\n  - …only if any upscaling is needed 只要目标分辨率宽或高大于原始分辨率就启用\n\n  - …always - supersampling 强制启用，即一般所谓的\"超取样\"\n\n**关于超取样，选择此项的话即使在1:1播放时(例如1920\\*1080影片在1920\\*1080屏幕上播放)，也会启用翻倍算法(看选的是super-xbr还是NGU)，强制升频后再降频回来，这个使用在super-xbr或NGU-AA时一般是搭配upscaling refinement里面的锐化算法一起用来取得锐利度的强化，当独使用并没什么效果。或是使用在NGU-Sharp时，可以受惠于它自带的deringing效果。不过这个选项并不是很建议，除非你的显卡效能非常强非常够用，而且实际使用上也真的看的出1:1播放强制升频再降频的画面区别才去用它，千万不要盲目的认为用了画质一定会变好。**\n\n第五个下拉式选单，activate quadrupling，是设定二次翻倍的启用条件，达到条件才会启用NGU进行二次翻倍。\n\n- NGU-AA的选项：\n\n选择\"let madVR decide\"时，默认是目标分辨率宽或高大于或等于原始分辨率2.4倍时启用。(但如果前项手动设定成1.5倍启用的话这边会变成3倍启用；如果前项手动设定成2倍启用的话这边会变成4倍启用)\n\n- NGU-(Sharp、Standard、Soft)的选项(第二个选单选择doubleagain时)：\n\n选择\"let madVR decide\"时，默认是目标分辨率宽或高大于或等于原始分辨率2.4倍时启用。(但如果前项手动设定成1.5倍启用的话这边会变成3倍启用；如果前项手动设定成2倍启用的话这边会变成4倍启用)\n\n- NGU-(Sharp、Standard、Soft)的选项(第二个选单选择directquadruple时)：\n\n选择\"let madVR decide\"时，默认是目标分辨率宽或高大于或等于原始分辨率2.00001倍时启用。(直接四倍消耗比再次翻倍小很多，所以自动启用判定很宽松)\n\n- 其他选项：\n\n  - …only if scaling factor is 4.0x (orbigger) 当目标分辨率宽或高大于或等于原始分辨率4倍时启用\n\n  - …only if scaling factor is 3.0x (orbigger) 当目标分辨率宽或高大于或等于原始分辨率3倍时启用\n\n  - …only if scaling factor is 2.4x (orbigger) 当目标分辨率宽或高大于或等于原始分辨率2.4倍时启用\n\n  - …only if any upscaling is needed 只要目标分辨率宽或高大于原始分辨率就启用\n\n第六个下拉式选单，if any(more) scaling needs to be done – upscaling algo，则是当翻倍或二次翻倍后，可能还小于目标分辨率，必须再升频到目标分辨率，这个选项影响此时使用的升频算法，选择\"let madVR decide\"时，luma doubling选择NGU-low~high，会使用Bicubic60+AR；luma doubling选择NGU-very high，会使用Jinc+AR。也可以直接指定想用的算法。\n\n第七个下拉式选单，if any(more) scaling needs to be done – downscaling algo，则是当翻倍或二次翻倍后，可能大于目标分辨率，必须再降频一次到目标分辨率，这个选项影响此时使用的降频算法，选择\"let madVR decide\"时，Luma选择NGU-low~high，会使用Bicubic150+AR；Luma选择NGU-very high，会使用SSIM1D100+AR。\n\n如果不想用上面两种算法，可以选择\"use image downscaling settings\"，沿用imagedownscaling里面的设定。或也可直接指定选单里任何一种你想用的算法。(doom9有很多使用者认为升频再降频用的算法不需要加LL，当然这个主要还是看个人喜好)\n\n**现在的madVR版本，使用NGU系列时其实几乎只要指定luma (doubling和quadrupling)的强度就好，其它交给\"let madVR decide\"就自动帮你选择好了，其实非常方便，对于新手来说友善多了，也避免了一些无谓浪费效能的设定。**\n\n另外关于super-xbr，个人认为它可以被NGU取代，不过有些人还是会想要使用它(可能因为效能消耗够低，约等于Jinc+AR的程度，或是其它原因等等)，这部分选项上跟NNEDI3和NGU大同小异，第一个下拉选单是选择锐化程度，一般选择100左右，可依自己喜好调整。第二个下拉式选单是选择是否要二次翻倍及二次翻倍锐化程度。\n\n第四个下拉式选单，选择\"let madVR decide\"时，默认是目标分辨率宽或高大于或等于原始分辨率1.2倍时启用，没达到1.2倍启用条件的话则会使用Jinc+AR替代。\n\n第五个下拉式选单，选择\"let madVR decide\"时，默认是目标分辨率宽或高大于或等于原始分辨率3倍时启用(但如果前项手动设定成2倍启用的话这边会变成4倍启用)。\n\n而第六个下拉式选单(upscaling algo)，选择\"let madVR decide\"，会使用Bicubic60+AR；第七个下拉式选单(downscalingalgo)，选择\"let madVR decide\"，会使用Bicubic150+AR。\n\n<img width=\"690\" height=\"433\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/f434ea607a3c4d3a97e08575e9eff716.jpg\" class=\"jop-noMdConv\">\n\n以下举几个例子来说明整个流程，设定如上图，屏幕分辨率是1920*1080，\n\n当我要播放一个1280*720的影片时，首先：\n\nYCbCr 1280\\*720 4:2:0 → RGB1280\\*720 4:4:4 (chroma upscaling算法)\n\nRGB再转回YCbCr 并把Y(亮度频道)跟CbCr(色度频道) 拆开处理\n\n1280\\*720亮度分辨率升为2560\\*1440 (符合1.2倍条件，NGU Sharp翻倍启用，强度high)\n\n1280\\*720色度分辨率升为1920\\*1080 (chroma选项决定，此例会使用Bicubic60+AR)\n\n亮度分辨率2560\\*1440 → 1920\\*1080 (downscaling algo选项决定，此例会使用Bicubic150+AR)\n\n合并色度信息和亮度信息，转换为RGB输出1920*1080到屏幕上\n\n<img width=\"690\" height=\"433\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/1d5f20c2f8b846968e4c28092d88481d.jpg\" class=\"jop-noMdConv\">\n\n设定如上图，当我要播放一个640*360的影片时，首先：\n\nYCbCr 640\\*360 4:2:0 → RGB 640\\*3604:4:4 (chroma upscaling算法)\n\nRGB再转回YCbCr 并把Y(亮度频道)跟CbCr(色度频道) 拆开处理\n\n640\\*360亮度分辨率升为2560\\*1440 (符合2.00001倍条件，NGU Sharp直接四倍启用，强度veryhigh)\n\n640\\*360色度分辨率升为2560\\*1440 (chroma选项决定，此例会使用NGU-med直接四倍)\n\n色度和亮度分辨率2560\\*1440降为1920\\*1080 (downscale algo选项决定，此例会使用SSIM1D100+AR)\n\n合并色度和亮度信息，转换为RGB输出1920*1080到屏幕上\n\n对于各种算法的选择，实际上还是要依显卡等级，各种不同的片源及对各种算法的主观感受去调整，找出能够顺畅播放而且自己看了也喜欢的组合，强烈建议设置profile，可以编写切换逻辑或设置热键方便快速切换，这方面需要经过一定时间的测试才能找出最适合自己计算机的设定。\n\n另外要如何判断显卡负荷不负荷的了此种算法呢？第一个当然是看画面会不会很顿，再来看看GPU使用率是否高达9X%快破表，再来也可以在播放时按Ctrl+J叫出OSD，看看有没有掉帧(dropped frames)，render queue是否一直很低，rendering time是否超过movie frame interval，如果都没有那就恭喜啦，可以放心看片！\n\n现在我们来谈谈关于NGU系列，在此之前不得不先谈到NNEDI3，NNEDI3这个算法原本是在转文件编码时用来升频及去交错等等处理的算法，因为其消耗资源过大，速度不够快到可以拿来做实时演算(real-time)，因此一直没被拿来用在影片播放时使用的升频演算。直到Doom9上有高手重新编写了这个算法的OpenCL版本，madshi将之修改之后加入到早先的madVR版本之中实现了此算法的实时演算(现今版本已经拿掉)，即使如此，这个算法消耗的显卡资源仍然相当惊人，但它带来的升频效果也是同样惊人，可以打趴一堆高阶蓝光机和高阶电视号称的4K影像升频，绝不夸张。\n\n我们可以看到madshi自己对这个算法的说明和范例图片：\n\n[madVR - high quality video renderer (GPU assisted) - Page 1080 - Doom9's Forum](https://forum.doom9.org/showthread.php?p=1663610#post1663610)\n\n基本上除了2^N倍的限制之外，这个算法升频出来的影像，锐利度和噪声抑制程度相比Jinc+AR，都有着可说是跳跃性的进步，它有让影片看起来不像是升频上来的影片的实力，但是这个算法也并非完美，它在某些场合中可能会出现一些莫名其妙的artifacts(原因似乎是因为它\"太聪明\")，madshi的范例里就有这个现象，这些是在使用Jinc时不会出现的，提高运算强度的话可以减低这些artifacts的出现，但消耗的效能也是倍数成长。\n\n这边也提供一个简单测试比较：\n\n原始分辨率640*360 (点图放大)\n\n![](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/ff42284bb9d14003a9e2e9278c1b905b.jpg)\n\n目标分辨率1440*810 (点图放大) NNEDI3 64\n\n<img width=\"690\" height=\"431\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/3b4f0433626047e8952269199dbacc7a.jpg\" class=\"jop-noMdConv\">\n\n目标分辨率1440*810 (点图放大) Jinc+AR\n\n<img width=\"690\" height=\"431\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/2acfa08a41af4eaea974b08516408e40.jpg\" class=\"jop-noMdConv\">\n\nHow amazing!! right?\n\n不过其实Jinc+AR比较\"忠于原味\"，NNEDI3则把锯齿状线条都拉成直的还不失锐利度，整体观感会比较讨喜，当然这只是一个小例子，真要比较必须要用大量的影片来比较才会比较中肯。**以实测的结果来说，NNEDI3对于低解析影片，多反差线条(游戏或动画的影片)，锯齿边缘明显的改善最为明显且巨大，对于真人影片比较没那么神奇的效果，虽然仍就有非常优异的表现，但跟Jinc+AR的差别就没上面那个例子那么大了。所以由此可见，影片的内容也是选择算法的重要因素。**\n\n接下来谈谈NGU吧，这是madVR v0.91之后加入的新算法，全名是\"Next Generation Upscaling\"，是madshi自己写的算法，据他的说法也花了不少时间研究、参考好几篇论文加上他自己的idea才做出来的东西，就实测效果来看颇令人惊艳，在很多地方可以说已经超越了NNEDI3。NGU有四个版本(AA、Soft、Standard、Sharp)，其中Sharp几乎就是最原始的NGU版本，其目的是尽可能把低分辨率影像还原到接近高分辨率\"母片\"的程度，在不增加artifacts的前提下。下面两个连结是madshi自己po的测试图，里面的NG1就是NGU之前暂定的名称\n\n[madVR - high quality video renderer (GPU assisted) - Page 2002 - Doom9's Forum](https://forum.doom9.org/showthread.php?p=1785599#post1785599)\n\n[madVR - high quality video renderer (GPU assisted) - Page 2006 - Doom9's Forum](https://forum.doom9.org/showthread.php?p=1785876#post1785876)\n\n可以发现，NGU的锐利度胜过NNEDI3不少，接近NNEDI3 256+SuperRes 4，而画面又比NNEDI3 256+SuperRes 4更接近原图，仅次于waifu2x(但waifu2x是对照用，运算太复杂不可能在实时演算使用)\n\n不过高度还原这点虽然是优点但有些情形下也可能变成缺点，在我个人的测试中，NGU-Sharp的确非常适合真人类的影片，其他算法没有一个锐利度比它好而artifacts更少的，包括NNEDI3，NNEDI3要达到NGU-Sharp的锐利度至少要搭配SuperRes 4，但这个组合artifacts又比NGU严重一点，效能消耗也高很多。但对于动画类而言，NGU-Sharp虽然也有很惊人的效果，但提前是片源必须够\"干净\"，如果片源本身有很多artifacts或锯齿的话，这些也会被NGU-Sharp当成细节如实的放大，出来的结果就有点残念了，偏偏动画类，尤其是低分辨率或是高压缩比的，这种情况还不少。NNEDI3，如同我前面提过的，对治这种片源缺陷的能力特别强大，而锐利度不足的地方则可以透过锐化算法补齐，达到跟NGU-Sharp接近的锐利度。\n\n在0.91.6版发布时，madshi加入了NGU的另一个修改版本─ NGU-AA，这个版本跟原始NGU(NGU-Sharp)大不相同，不过度的强调细节还原，而是如同其字面意义Anti-Alias，强化消除线条锯齿和画面的artifacts等缺陷的能力，也就是说，跟NNEDI3非常的类似，但却可以比NNEDI3花费更少的效能就做出相同甚至超越的结果。在我个人的测试中，某些画面它消除锯齿的能力比NNEDI3还要好，而线条也比NNEDI3更为聚焦，其它的画面至少也跟NNEDI3差不多，而doom9上大部分使用者也认同画面上NGU-AA略胜或不输NNEDI3。因此最后madshi决定把NNEDI3自madVR中移除，把NGU系列作为madVR的招牌升频算法。\n\n目前对于低分辨率或是高压缩比动画类我个人会视情形，如果锯齿不是很严重的话，我会使用NGU Sharp+RCA算法，RCA对artifacts有很好的抑制效果，再配上NGU Sharp的高还原度可谓天作之合。如果是干净的片源则单独使用NGU-Sharp。如果是锯齿严重的片源，则使用NGU-AA，当然NGU-AA可以再搭配锐化算法使用，效果比单独使用NGU-AA更好。\n\n另外关于NGU-Soft和NGU-Standard，跟NGU-Sharp的基本调性是一样的，只是降低锐化的程度，有些画面用NGU-Sharp放大的结果可能会显得太过锐利或刺眼，那它可能就比较适合用NGU-Standard。至于NGU-Soft，个人认为它的锐利度降得有点低(比NGU-AA还低)，可能适用的场合并不多，不过还是以各位亲自测试为准。NGU-Soft和NGU-Standard两个并不像NGU-AA带有消锯齿的功能，所以跟NGU-Sharp一样比较适用在干净的片源，或是搭配RCA使用。\n\n**另外就是NGU-(Sharp、Standard、Soft)已经内建有deringing的效果，所以不要跟artifact removal底下的reduce ringing artifects(deringing)一起开，不然可能损害画质。**\n\n下面看看几张范例：\n\n640\\*480→1440\\*1080(点图放大)\n\n一般的老动画DVD放大到FHD的情形，注意衣服上的噪声以及眼睛和头发的部分\n\nJinc+AR\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/b25accd0b9c5463b860ac74674b37653.jpg\" class=\"jop-noMdConv\">\n\nNGU Sharp very high (direct 4X)\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/87493afbc11b4684be752ce6e277b092.jpg\" class=\"jop-noMdConv\">\n\nNGU Sharp very high(direct 4X) + RCA 6\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/b1253a4125624e09874d9c523587f617.jpg\" class=\"jop-noMdConv\">\n\nNGU AA very high 2X > very high 2X\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/04edd4fe54c84713814b4c8c425a3906.jpg\" class=\"jop-noMdConv\">\n\nNGU AA very high 2X > very high 2X + RCA6 (high)\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/0677ad50f9b743699b24277e5e742b46.jpg\" class=\"jop-noMdConv\">\n\nNGU AA very high 2X > very high 2X + RCA6 (high) + crispen edges 2.0 + thin edges 1.0 + AR (crispen edges和thin edges皆为upscalingrefinement)\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/ca37f65f342b46a8b44c0def4b61a055.jpg\" class=\"jop-noMdConv\">\n\n可发现这边NGU Sharp very high(direct 4X) + RCA 6的组合可得到最理想的还原效果，噪声也得到充分抑制，最后一张所使用的组合NGU AA very high 2X > very high 2X + RCA 6 (high) + crispen edges2.0 + thin edges 1.0 + AR虽然也有接近的效果，但还原细节仍差了一点点，重点是消耗的效能高太多了，因此这类动画最适合NGU Sharp + RCA的组合。\n\n720\\*480→1920\\*1080(点图放大)\n\n注意衣服跟皮肤的细节，及线条边缘轮廓\n\nJinc+AR\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/3147414142cc4eb7b2ee5eee7a4f920f.jpg\" class=\"jop-noMdConv\">\n\nNGU Sharp very high (direct 4X)\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/03d2429de53b4320b530f1e1aab568ce.jpg\" class=\"jop-noMdConv\">\n\nNGU AA very high 2X > very high 2X\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/117d220f46e64dfa9ec2d8a866bda06b.jpg\" class=\"jop-noMdConv\">\n\nNGU AA very high 2X > very high 2X +SuperRes 4\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/7d15880b1c2444d483219ec4a29d531c.jpg\" class=\"jop-noMdConv\">\n\n可以发现锐利度NGU AA very high 2X > very high 2X + SuperRes 4可能稍微高一点点，但artifacts也比较多，而NGU Sharpvery high (direct 4X)则把画面细节还原的很好，artifacts也比较少，重点是这边NGU Sharp very high (direct 4X)消耗的效能要少得多。\n\n另外一个是上面用过的初音范例，再比较一次，可以看出NGU Sharp在低分辨率动画类并带严重锯齿的状况可能遇到的问题\n\n640\\*360→1920\\*1080(点图放大)\n\nJinc+AR\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/47f8532e56a747e58f5719d4c99bc3b6.jpg\" class=\"jop-noMdConv\">\n\nNGU Sharp very high(direct 4X)\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/3684f59128a14ee6a3d16ba6bad28625.jpg\" class=\"jop-noMdConv\">\n\nNGU Sharp very high(direct 4X) + RCA 6\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/3b0c9f417e9b44fb84cbbad1a3861c25.jpg\" class=\"jop-noMdConv\">\n\nNGU AA very high 2X > very high 2X\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/d81cff99f803425ebb7bafb55a57c6e8.jpg\" class=\"jop-noMdConv\">\n\nNGU AA very high 2X > very high 2X + RCA7(high) + deringing + crispen edges 2.0 + thin edges 1.0 + AR (crispen edges和thin edges皆为upscalingrefinement)\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/de82c78a78f94065a5425fecb5db0c6e.jpg\" class=\"jop-noMdConv\">\n\n可以发现这个例子NGU Sharp就不太适合，即使它是很忠实的还原了原图上的细节跟锯齿，但那可能不是我要的，NGU AA消锯齿效果良好但锐利度差了些，而NGU-AA再加上噪声修饰跟锐化算法结果就不错，不过效能消耗也比较高。\n\n另外doom9上也有网友收集了各种madVR的升降频算法以及artifact removal算法的效果对比图片，可至下列网址把图片点开参考：\n\n[Image Gallery of madVR Image Processing Settings - Doom9's Forum](https://forum.doom9.org/showthread.php?t=175429)\n\n如果不想搞太复杂，只想要一组设定打天下，那就这样设定吧，显卡不够强就自己换成med或low，显卡够力可换成very high，片源不够干净再加个RCA即可。但有心的话自己可以慢慢去做不同组别的设定来对应不同的分辨率/帧率/片源，madVR的profile功能，让我们可以用各种不同的设置去应付各种不同的状况，最大限度去利用有限的显卡效能，这部分我在另一篇文章皆有说明。\n\n<img width=\"690\" height=\"433\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/de4641299a694e12aec8aa9e042c057a.jpg\" class=\"jop-noMdConv\">\n\n### upscaling refinement\n\n接下来看到upscaling refinement的部分，这边可将其视为改善放大算法专用的锐化演算，跟前面image enhancements相较，这边处理过后的影像差距不会太巨大，但锐化造成的副作用也会小很多**，这边我的习惯仍然是第一组profile常驻的不启用任何锐化算法，其它几组设置热键视情况切换。**开启锐化算法也会增加显卡负担，务必注意。另外原则上，可以同时开1~3种算法，只要注意互补性，不要过度重迭，不要锐化过度就好，但是image enhancements跟upscaling refinement最好不要同时开，很容易会锐化过头。(锐化过头画面会变的尖尖的、刺刺的、失去立体感、或是充满油画感)\n\n**特别要注意的是使用NGU-(Sharp、Standard、Soft)的时候，除了其专属搭配的两个算法外不建议再开其他任何锐化算法，因为NGU-Sharp本身就已经非常锐利了，再开其他的就锐化过头了。**\n\n<img width=\"690\" height=\"433\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/86b6e6886cf241a89b64b14b9b2f0909.jpg\" class=\"jop-noMdConv\">\n\n这边简单介绍一下各个锐化算法\n\n- sharpen edges：针对边缘线条锐化，不锐化纹理内容，适合开启AR和AB滤镜使用\n\n- crispen edges：FineSharp的改良版本，有不错的整体细节锐化效- 果，新版本里也抑制了噪声被锐化的程度，madshi认为它有最自然的锐化效果\n\n- thin edges：把边缘线条变细，适合低分辨率的动画类放大时使用\n\n- enhance detail：针对纹理内容锐化，例如皮肤跟衣服之类的细节，不过也有噪声被锐化的可能\n\n- soften edges：柔化线条边缘，**是NGU-Sharp专属搭配使用的**，NGU-Sharp可能造成线条边缘过于锐利，这个选项可稍加修饰。至于要不要开以及开多少，则视个人口味跟片源而定，例如有人认为SD片源→FHD的升频，本身锐利度已经不足了，不太适合再柔化，而FHD片源→UHD的升频就比较有需要。当然这只是一种个人看法而已…\n\n  **不过madVR在v0.91.8之后加入NGU-(Standard和Soft)，想要低一点的锐化程度选择这两个就好，所以这个选项个人认为已经没有必要**\n\n- add grain：在纹理内容上面加上颗粒，**也是NGU-(Sharp、Standard、Soft)专属搭配使用的**，NGU-Sharp虽然能把低分辨率内容的线条提升到接近原生高分辨率的锐利度，但纹理内容缺失的部分并无法完美的还原，加上颗粒让影像比较有真实感。这边建议开1~2，但这选项只适合真人影像，不适合动画类(动画开了看起来会像噪声)\n\n- LumaSharpen：整体锐化，强化线条跟适度的细节提升，并避免强化噪声，强烈建议开启AR和AB滤镜使用，开了后效果很类似crispen edges\n\n- AdaptiveSharpen：整体锐化，特别注重强化中等锐利程度的线条，但会避开全平面区域跟高锐利的线条，强烈建议开启AR和AB滤镜使用，AR+AB有开没开差很多，开了后效果很类似crispen edges\n\n- SuperRes：包含一整套的后处理过程，得到的也是整体性的锐化效果，后面的LL、AR滤镜则不建议开启(LL可能有副作用而且增加的效能消耗太大，SuperRes本身不太产生ringing所以不需要AR)，后面的数字代表跑几次SuperRes流程，数字越高锐化效果越强，但锯齿跟artifacts也会更明显，效能消耗也越大SuperRes跟非NGU的升频算法一起用有不错改善效果。跟NGU-AA一起用也可以增加不少锐利度。**但并不适合跟NGU-(Sharp、Standard、Soft)一起用，SuperRes并无法让NGU-Sharp效果再改善或提升锐利度，反而可以造成锯齿和artifacts再次被凸显出来**\n\n  个人测试的结果认为SuperRes很适合在真人影片中使用(如果使用NGU-(Sharp、Standard、Soft)以外的算法的话)，但极度不建议在动画类使用(包括2D和3D动画)，只要一开锯齿跑出来了，破坏非常明显，强度只开 1也一样…\n\n- refine the image after every ~2X upscalingstep\n\n- refine the image only once after upscalingis complete\n\n前者是每放大两倍就锐化一次，后者是不管放大多少倍总共只锐化一次，这个选项只对极大倍率(4倍以上)的放大会有影响，理论上每放大两倍就锐化一次最能维持锐化效果，但是对显卡的效能消耗也是倍增，还是要视自己显卡能力而定\n\n以下是个人使用的两组upscaling refinement设定，分别是真人影片(FHD片源升频4K)跟动画类(仅限需要消锯齿的片源)使用，用热键控制切换，供各位参考\n\n需要消锯齿的动画片源(配合image upsclaing里的NGU-AA使用)\n\n<img width=\"690\" height=\"433\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/8f5a837fd06548dd8402cbf27337a329.jpg\" class=\"jop-noMdConv\">\n\n真人影片类FHD的片源升频4K(配合image upscaling里的NGU-Sharp或Standard使用)\n\n<img width=\"690\" height=\"433\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/a901936d02274c26b1e9bb7d9fb231d8.jpg\" class=\"jop-noMdConv\">\n\n**要不要开锐化？要用哪几种算法？强度开多少？这个是要由观赏的片源，跟使用的屏幕，显卡的负荷能力，亲自去做测试才能得出结论，不必要盲从，别人的设定不一定是适合自己的设定**\n\n========================================================================\n\n## Rendering\n\n### general setting\n\n接下来继续往下设定，到\"general setting\"这页，我的建议设定(win7适用)如下图：\n\n<img width=\"690\" height=\"429\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/502e4b72d5574d57911679a5d8aa50f9.jpg\" class=\"jop-noMdConv\">\n\n1.  \"delay playback start until renderqueue is full\"建议勾选，可减少开启影片时的掉帧现象，下面的\"delay playback start after seeking\"不建议勾选，勾了拉时间轴会变慢\n2.  \"enable windowed overlay\"N卡跟I卡可勾可不勾，这功能A卡并不支持勾了也没用，优缺点下面总结会解释。\n3.  \"enable automatic fullscreen exclusivemode\"建议勾选，这个选项勾了会在进入全屏幕时使用独占模式(FSE)，优缺点下面总结会解释。\n4.  \"disable desktop composition (Vistaand newer)“跟底下的\"only when media player is in fullscreen mode”，如果有使用全屏幕独占模式的话，就两个都一起勾选；如果没使用全屏幕独占模式的话，就不要勾选(这个选项是播放时或者全屏幕时把win7的AERO关掉，win8以上的系统则没有影响)\n5.  use Direct3D 11 for presentation，勾了会使用D3D11模式，必须显卡跟操作系统支持才能用，而madVR的10bit输出也必须在D3D11跟FSE模式底下才能达成，此外D3D 11模式下从窗口切换到FSE模式速度比较快一些，效率较好。D3D 11模式必须使用AERO，故这里勾选的话\"disable desktop composition (Vista and newer)\"会自动失效。下面的\"presenta frame for every VSync\"建议勾选，可减少presentation glitches的增加，反之若不勾则能节省一点点效能但有可能presentation glitches会变多。\n6.  \"use a separate device forpresentation (Vista and newer)\"建议勾选，不过如果N卡勾了发生问题的话可以取消勾选看看有没有改善，另N卡驱动为 301.42 版以前的话不要勾选。\n7.  “use a separate device for DXVAprocessing (Vista and newer)”，勾或不勾都可。(此项只有在用到DXVA的场合，如硬件去交错或硬件译码时才有影响)\n\n6.、7.这两项主要会影响renderingtimes，而rendering times是越低越好，太高的话会掉帧，可自行测试勾选或不勾选的差别。我的建议设定是使用AMD HD7750显卡驱动13.12 测试，这样设定在fullscreen exclusive mode下的rendering times最低，而N卡使用者也可自行测试这两项勾或不勾哪种组合较好。\n\nCPU queue跟GPU queue，是决定播放时占用的RAM的大小，我喜欢用自来水跟水塔的概念来举例，queue的总量就像是水塔大小，不管大水塔或小水塔，目的都是确保水龙头打开能够源源不绝的出水不会没水用(掉帧)，queue设小的话(小水塔)它很快就会装满，对硬件负担也小，但是一个稍大的变动可能就让它暂存的容量不及应付而降成0，就会掉帧了。queue设太大的话则是吃比较多的RAM，开影像会稍微变慢(如果有勾选\"delay playback start until render queue is full\"，要等它装满)，但相对就比较不会掉帧，这方面要自己多测试取舍。需注意硬件不是太强的话也有queue开太大反而播放不顺的情形发生。\n\n我的建议是如果没有使用smooth motion功能的话，这部分维持预设即可，如果有使用smooth motion的话，这边可以设到CPU queue 20跟GPU queue 12，甚至要更大也可以(在我以前的测试中，使用smooth motion时如果queue不够大有时候会有不顺畅或顿顿的情形发生)。\n\n另外win8/8.1或win10的话，建议设定如下图：\n\n<img width=\"690\" height=\"433\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/1a4e8dd00ba545d99ec812df54764dca.jpg\" class=\"jop-noMdConv\">\n\n“enable automatic fullscreen exclusivemode”，勾选后如果没遇到异常状况(全屏幕时严重LAG、rendering time暴增或无画面)的话也是可以使用。\n\n### windows mode settings\n\n到\"windows mode settings\"这页，如下设置：\n\n勾选\"present several frames in advance\"，会使用0.87.10版加入的新窗口模式，有接近FSE(全屏幕独占)模式的效能跟稳定性，如果你不喜欢FSE模式的话全屏幕播放可直接使用这个新窗口模式。\n\n如果播放出现问题的话则取消勾选\"present several frames in advance\"，会改回使用0.87.10之前版本的旧窗口模式。\n\n如果使用新窗口模式的话，下面的\"'how many video frames shall be presented in advance\"数字依GPU能力去设置，一般在6-12之间，更大也可以，如果有掉帧情形就调整看看，使用smooth motion的话这项最好开大一点。\n\n<img width=\"690\" height=\"433\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/cf57e1d0e2db44d2a05cf77a85d04825.jpg\" class=\"jop-noMdConv\">\n\n欲使用全屏幕\"新\"窗口模式的话还必须如下设置，取消勾选这两项：\n\n<img width=\"690\" height=\"429\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/a820a18cd6884bccb3582fd86c1c5b40.jpg\" class=\"jop-noMdConv\">\n\n### exclusive mode settings\n\n到\"exclusive mode settings\"这页，如下设置：\n\n\"delay switch to exclusive mode by 3seconds\"这项勾选的话会在切换成全屏幕3秒后才进入独占模式，自己决定要不要勾选，像我喜欢它马上进入独占模式所以就不勾选。\n\n下面的\"'how many video frames shall be presented in advance\"数字依GPU能力去设置，一般在6-12之间，更大也可以，如果有掉帧情形就调整看看，使用smooth motion的话这项最好开大一点。\n\n<img width=\"690\" height=\"429\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/ff42279bd57c453c8619a1a8c457f903.jpg\" class=\"jop-noMdConv\">\n\n**这边小总结一下，在非全屏幕时，可以使用的模式及设定方法：**\n\n- **旧窗口模式 windowed mode(old path)**\n- **新窗口模式 windowed mode(new path)**\n- **overlay窗口模式 overlay mode**\n\n**勾选\"enable windowed overlay\"会使用overlay窗口模式(N卡跟I内显限定)，不勾选则使用其他两种窗口模式，新跟旧窗口模式的选择方法如上面的说明。**\n\n**在全屏幕时，可以使用的模式：**\n\n- **旧窗口全屏幕模式 fullscreen windowed mode(oldpath)**\n- **新窗口全屏幕模式 fullscreen windowed mode(newpath)**\n- **overlay全屏幕模式 fullscreen overlay mode**\n- **全屏幕独占模式 fullscreen exclusive mode**\n\n**勾选\"enable automatic fullscreen exclusive mode\"会强制使用全屏幕独占模式，不勾选则使用其他三种模式，有勾选\"enable windowed overlay\"会使用overlay全屏幕模式(N卡跟I内显限定)，不勾选则使用其他两种窗口全屏幕模式，新跟旧窗口全屏幕模式的选择方法如上面的说明。**\n\n下面整理一下各种模式的优缺点，\"+“表示优点，”-\"表示缺点，主要来自madshi本人的回复\n\n[Problem with MadVR using full screen exclusive mode](https://yabb.jriver.com/interact/index.php?topic=76904.msg523475#msg523475)\n\n- **旧窗口模式**\n\n  - \\+ 可使用在非全屏幕及全屏幕模式\n\n  - \\+ 切换全屏幕时不会有额外的延迟\n\n  - \\- 有时会出现画面撕裂(没有打开AERO的情形下)\n\n  - \\- 有时会有播放不顺畅、顿顿的情形(特别容易发生在使用smoothmotion FRC时)，对于描绘时 间的容忍度较低\n\n  - \\- 在老旧的机器上效率低落(比较容易掉帧)\n\n- **overlay模式**\n\n  - \\+ 可使用在非全屏幕及全屏幕模式\n\n  - \\+ 不会有画面撕裂情形\n\n  - \\+ 常保播放顺畅\n\n  - \\+ 效率高，比较不容易掉帧\n\n  - \\- A卡不能使用\n\n- **全屏幕独占模式(FSE)**\n\n  - \\+ 不会有画面撕裂情形\n\n  - \\+ 常保播放顺畅\n\n  - \\+ 效率最高\n\n  - \\+ 即使GPU短期间处在比较忙碌的状态也能有效防止掉帧，是最稳定的播放模式\n\n  - \\+ N卡只有此模式下能够输出10bit\n\n  - \\- 只有全屏幕时能使用\n\n  - \\- 切换全屏幕时会有延迟现象\n\n  - \\- 播放器自己的控制接口无法运作\n\n  - \\- 叫出播放器选单时(例如点右键)会强制跳出FSE模式\n\n- **新窗口模式**\n\n  - \\+ 有FSE模式一切优点，但没有其缺点(运行机制跟FSE只差在没有进 入Direct 3D模式)\n\n  - \\- 必须搭配AERO才能使用(在win7下AERO的compositionrate是以主屏幕为准，这在使用多屏幕 时会成为麻烦，因为不能让它对应当下屏幕的更新率，win8之后则无此问题)\n\n  - \\- 在某些系统有兼容性问题，导致播放不顺\n\n  - \\- win10以外的系统无法输出10bit (win10除N卡外可在全屏幕窗口模式输出10bit)\n\n### stereo 3D\n\n到\"stereo 3D\"这页，madVR在v0.90之后加入对3D影片的支持，这一页的设定在有播放3D影片的需求时才有需要勾选，当然要播3D还必要达成其他几个条件：\n\n要有支持3D的显示器跟眼镜\n\n操作系统要win8.1以上\n\n桌面右键>屏幕分辨率>进阶，里面有一个3D选项要勾\n\n使用LAV 0.68之后的版本 (3D原盘OK，但如果是mkv格式封装则必须是MVC编码)\n\n3D输出目前仅限制在1080p23模式\n\n<img width=\"690\" height=\"429\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/d8e888634e2e42e889265d7b6de66265.jpg\" class=\"jop-noMdConv\">\n\n### smooth motion\n\n到\"smooth motion\"这页\n\n<img width=\"690\" height=\"429\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/bc2b757c1d454e219aa41608e364f066.jpg\" class=\"jop-noMdConv\">\n\n这是madVR v0.86.0加入的功能\"smoothmotion frame rate conversion\".，详见官方论坛：\n\n[madVR - high quality video renderer (GPU assisted) - Page 876 - Doom9's Forum](https://forum.doom9.org/showthread.php?p=1616520#post1616520)\n\n这个功能相当好用，解决了帧率跟屏幕更新率不同步所产生的judder问题(详细可参考我在reclock那篇所提到的内容)，开发者madshi提到这功能有两大优点：\n\n1.能够让任何帧率去对应任何屏幕更新率，并保持影像的流畅\n\n2.如果硬件能够应付，在完整的播放中不会有任何的帧drop或repeat，且不需要依靠reclock来达 成。\n\n两个缺点：\n\n1.稍微增加一点GPU的负担\n\n2.会损失一点锐利度，影片帧率小于屏幕更新率的话损失较少，例如24fps的影片在60Hz屏幕使用这功能播放的锐利度损失是不太容易看出来的：而影片帧率等于屏幕更新率的话，使用这功能锐利度损失就较多而且很容易看出来。\n\nReclock难以处理的非整数倍的同步问题，像最常见的**24fps(23.976)影片在60Hz屏幕上播放，就很适合让madVR的smoothmotion FRC功能来解决**，把这功能打开会发现影像的judder都消失了，就有如同步播放时的那种流畅感。\n\nmadVR的smooth motion FRC功能是透过Blending来达成的而非补帧，当然也没有补帧带来的副作用像soap opera effect和一堆artifacts。madshi有提到Blending是\"30% of frame A and 70% of frame B to calculate the outputframe (pixelC = pixelA * 0.3 + pixelB * 0.7)\"。\n\n我不是很确定它运行的方式，不过猜想可能是接近以下的情形：\n\n1 1 1 2 2 3 3 3 4 4 (24fps@60Hz屏幕，不做任何处理的呈现方式，是一个3:2的pattern，每个帧停留时间不一样，造成judder)\n\n1 1 1+2 2 2 3 3 3+4 4 4 (24fps@60Hz屏幕，经过Blending处理的呈现方式，每个帧停留时间相同，接近2.5/60秒)\n\n透过Blending来达成的同步，没有像补帧那种顺到不可思议的流畅感，但是影像相对比较自然，比较接近原汁原味。至于喜欢哪种就交由各位自己决定。以下介绍设置方法：\n\n到\"smoothmotion\"这个分页，如图设置，下面三个选项是判断要不要启用smooth motion FRC的方法，\n\n第一个选项判定的基准似乎是帧率跟屏幕更新率差超过0.5时会启用，反之不启用。\n\n第二个选项是屏幕更新率为帧率的精确整数倍时不启用，反之启用\n\n第三个选项是强制启用\n\n另外也可以设置热键手动控制这个功能的开关\n\n**使用SVP或AMD的Fluid Motion或其他补帧软件的话，这个功能就取消勾选不要启用**\n\n### screenshots\n\n到\"screenshots\"这页，这边的设定主要是搭配播放器的截图功能(例如MPC-BE的截图热键是\"F5\"，截下来的图片会在\"本机\">\"图片\"文件夹中)\n\n<img width=\"690\" height=\"433\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/dda5eecfc6fb4d2b8e031dc6899612bf.jpg\" class=\"jop-noMdConv\">\n\n- “create screenshots with a custom zoomfacter”，这项不勾选的话，截图就是看目前播放器放出来的目标分辨率多少就直接截那个分辨率，有勾选的话就可以自己指定，看是要影片原分辨率50%、100%、200%、300%、400%、800%，或是指定720p、1080p、2160p这些常见分辨率。举例来说，没有4K屏幕，但想看看某些算法升频到4K的效果，就可以善用这个选项。\n  - 至于edcoded video size，指的是影片压制编码出来的原始分辨率，但是跟100%的不同之处在于，有些影片原始分辨率跟它100%播放时的分辨率不一定一样，影片串流中会夹带一个Display aspect ratio(DAR，显示宽高比例 )的标签，100%播放时会依DAR所指定的比例去拉伸，举例来说，日本电视台录制下来的档案就常见这种形式，其原始分辨率是1440x1080，但夹带一个16:9的DAR，因此100%播放时会拉伸成1920x1080去播放，这个例子如果选100%去截图，图片会是1920x1080，如果选edcoded video size去截图，则图片会是1440x1080。\n\n- “use high quality scaling algos -image upscaling:”，这项勾选的话可以直接指定截图要套用的升频算法，有NGU Sharp、NGU Standard和NGU AA三种，以及这三种各自再搭配add grain，总共六种\n\n- “don't draw OSD”，勾选的话，截图一律不显示OSD\n\n- “don't perform color & gammaprocessing, calibration etc”，勾选的话，截图会忽略color & gamma和calibration里面套用的设定\n\n- “don't draw subtitles”，勾选的话，则截图就不会把字幕挂上去\n\n- “don't perform artifact removalprocessing”，勾选的话，截图会忽略artifact removal里面套用的算法\n\n- “don't perform image enhencementprocessing”，勾选的话，截图会忽略image enhencement 里面套用的锐化算法\n\n- “don't perform upscaling refinementprocessing”，勾选的话，截图会忽略upscaling refinement里面套用的锐化算法\n\n- “don't execute custom shaders”，勾选的话，截图会忽略套用的自定义shaders效果\n\n### dithering\n\n到\"dithering\"这页\n\n<img width=\"690\" height=\"433\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/e7b5077042f94ee889b4c18b24ef95f1.jpg\" class=\"jop-noMdConv\">\n\n关于error diffusion和ordered dithering，是0.87版后新加入的dither方法。madVR在输出8bit的讯号时，是把内部用16bit高精度处理完的讯号以dithered 8bit RGB的形式输出，在色彩阶调上跟10bit输出是不会有差别的，差别在于画面上会多了一些\"噪点\"，我前面有个连结也解释过dither的原理，是以噪点来模拟更多的色阶数，某些场景下你也许会看到这些噪点，并将其视为画面的负面因素。madVR过去一直使用的是random dithering的演算方法，在大部分画面都会制造噪点使得其比较容易被查觉，而新的error diffusion算法只在必要的地方制造噪点，也就是说它可以维持同样的色彩阶调，但是大幅降低画面的\"底噪\"。至于ordered dithering则是madVR在v0.87.5之后做为默认取代random dithering的算法，其效能消耗跟random dithering差不多低，但是有接近error diffusion的低噪点表现。我的建议是你如果有一个不算小的屏幕(40吋以上)，去使用error diffusion才会比较察觉得出效果，一般计算机屏幕尺寸太小可能很难感觉到它带来的差别，维持预设ordered dithering即可。error diffusion的话会增加一些显卡消耗(开启smooth motion FRC会再增加一些，因为其消耗是跟最终输出的帧数成正比)如果显卡效能许可的话要将error diffusion做为常驻选项也是可以。\n\nerror diffusion是用DirectCompute写的，由于DirectCompute是DirectX 11的一部分，必需要显卡及操作系统支持DX11才能使用。\n\n下面两个选项，\"use colored noise\"勾选的话是使用多色噪点，不勾的话是使用单色噪点；\"change dither for every frame\"勾选的话是使用动态噪点，不勾的话是使用静态噪点，静态噪点在主观上会让你觉得噪点数量较少，但是一些噪点的排列纹路可能会比较容易被查觉到。\n\n也就是说，不考虑random dithering的话，我们目前有三种dither算法，ordered dithering、error diffusion-option 1和errordiffusion-option 2，以及两个控制选项，总共12种不同排列组合的设置可以去使用，这边请各位有兴趣自行去测试，每个人喜欢的画面重点可能不太一样，很多情况下其实差别很小，但都优于random dithering就是了。\n\n至于有兴趣测试者，由于在8bit输出的情况下不太容易看得出差别，我们可到前面屏幕设定那边去选用较低的bit数，如此一来可更明显看出各种dither算法和选项的差别。例如我们如果选择3bit的话，则RGB三色每一色都只有2^3=8个色阶数，三色总共只有8\\*8\\*8=512个色阶数可用(跟8bit的1670万个色阶数比起来是\"非常\"低)，dither算法变得极为重要而且任何选项的改变差别都非常明显，以下我们可以看到简易比较图：\n\n8bit ed-op1 两选项皆勾(点图放大)\n\n<img width=\"690\" height=\"417\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/ff8142acc077438180e3df2ed55bf892.jpg\" class=\"jop-noMdConv\">\n\n3bit ed-op1 两选项皆勾(点图放大)\n\n<img width=\"690\" height=\"417\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/71dea488ff4043aa8cfb12097f1d73b5.jpg\" class=\"jop-noMdConv\">\n\n3bit none(无dither) (点图放大)\n\n<img width=\"690\" height=\"417\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/7e0891256eb043d2be83548b450b4b58.jpg\" class=\"jop-noMdConv\">\n\n以上只是简单让各位看一下dither用低色阶数输出高色阶的强大效果，这边各种算法的差异请自行测试。**测试完毕别忘了再到屏幕设定那边改回8bit。**\n\n**再次声明，madVR的8bit输出，使用error diffusion或ordered dithering作为dither算法的话，跟10bit输出几乎是没有差别的，肉眼几乎不太可能察觉到那些噪点的存在，虽然madVR有支持10bit输出，我们不必追求一定要用10bit输出，事实上10bit输出反而比较容易遇到问题(不管是显卡方面或是显示器方面)。**\n\n### trade quality for performanc\n\n到\"trade quality for performance\"这页，**这页的选项都是降低质量以换取效能，如果显卡效能够高的话尽可能都不要勾选，**如果显卡负荷不了的话就从最上面开始勾选。有时候你使用某些算法在播放循序式影像或是软解时没问题，播放交错式影像开启硬件去交错时或是硬解时显卡却负荷不了，这时就可以勾选那几个DXVA(deinterlacing or decoding)的选项，如此显卡就只有在用到DXVA运算时才会降低质量，总之这边的选项低阶显卡可以依需要勾选。\n\n<img width=\"690\" height=\"433\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/e5f90f38913b400abc94a3825ad56778.jpg\" class=\"jop-noMdConv\">\n\n这边的选项由上到下依序来看的话：\n\n第1项是跟外挂字幕渲染器xy-SubFilter相关，有使用才有影响。\n\n第2项是使用硬解(DXVA)时，同时使用DXVA的chroma upscaling算法\n\n第3项是使用硬件去交错时，同时使用DXVA的chroma upscaling算法\n\n第4项是跟播放器的自定义pixel sharder功能相关，有使用才有影响。\n\n第5项勾选的话dithering演算会用gamma light取代linear light(gamma light在0.87.7之前的版本是预设使用)，取消勾选的话就是使用linearlight，linear light能提供较好的色彩还原度。\n\n第6项跟第7项是跟debanding的运作有关，勾选的话会取消一些侦测机制。\n\n第8项是如果能节省效能的话把色度升降频分开处理，里面唯一一个我觉得中高阶卡也可以勾选的，这个选项的效果，举例来说，一个4K 4:2:0的影片要在FHD屏幕播放，一般来讲要先把色度分量(1920\\*1080)升频到4K再跟亮度分量一起降频到FHD，勾选这个选项的话，色度分量直接维持1920\\*1080不动，而亮度分量3840\\*2160直接降频到1920\\*1080，对4K影片来说，少了这个色度升频动作节省的效能非常多，对画面质量影响却不多。\n\n第9项是色调映射和色域转换使用较低精度\n\n第10项是去掉影片的BTB(比黑更黑指0~15这段)和WTW(比白更白指236~255这段)的黑位范围信息\n\n第11项是跟smooth motion有关。\n\n第12项跟第13项跟madVR本身的处理精度有关。\n\n第14项跟放器的自定义pixel sharder功能相关，一样有使用才有影响。\n\n第15项是跟DXVA deinterlacing有关，勾了就不会把60i去交错倍帧成60p而是变成30p\n\n第16项也跟DXVA有关\n\n========================================================================\n\n## User interface\n\n### keyboard shortcuts\n\n到\"keyboard shortcuts\"这项，可以依自己喜好设置热键\n\n<img width=\"690\" height=\"429\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/e4ad9d6e36a542f086cf716f5e3f249b.jpg\" class=\"jop-noMdConv\">\n\n另外附上madVR预设设定已有的热键一览表：\n\n- create freeze report - Ctrl+Alt+Shift+Break\n\n- open settings dialog - Ctrl+S (打开选单)\n\n- Enable OSD - Ctrl+J (打开OSD)\n\n- Reset OSD Statistics - Ctrl+R (OSD统计归零)\n\n- Source Primaries - Ctrl+Alt+Shift+P\n\n- Source Decoding Matrix - Ctrl+Alt+Shift+M\n\n- Source Levels - Ctrl+Alt+Shift+I\n\n- Output Levels - Ctrl+Alt+Shift+Y\n\n- Deinterlacing - Ctrl+Alt+Shift+D (强制开关去交错)\n\n- Deinterlacing Field Order -Ctrl+Alt+Shift+F\n\n- Deinterlacing Mode - Ctrl+Alt+Shift+T (切换去交错模式video/film)\n\n- 顺时钟转90度 -Ctrl+Alt+Shift+Right\n\n- 逆时钟转90度 -Ctrl+Alt+Shift+Left\n\n- 3dlut开关 - Ctrl+Shift+3\n\n- 3dlut分割展示 - Ctrl+Alt+Shift+3\n\n- desired display gamma value - increase - Ctrl+Alt+Shift+G (配合\"enablegamma processing\"的设定)\n\n- desired display gamma value - decrease - Ctrl+Alt+Shift+B (配合\"enable gamma processing\"的设定)\n\n建议设置热键的项目：\n\n- debanding - toggle (切换off-low-med-high)\n\n- deringing - toggle (开关deringing)\n\n- deblocking strength - increase (RCA强度增加)\n\n- deblocking strength - decrease (RCA强度降低)\n\n粗体是我认为比较实用的几个，这边要特别提一下Deinterlacing Mode的切换，我们知道图像文件基本上有循序式(或称逐行扫描)跟交错式(或称隔行扫描)两种，循序式(Progressive)如480p、720p、1080p这种后面有个\"p\"的都是，交错式(Interlaced)如480i、1080i这种后面有个\"i\"的都是。遇到交错式影像，必须要进行去交错处理(Deinterlacing)，否则会有明显的横向扫描线，而交错式影像基本上又可分成两大类─Video跟Film，Video通常指原生的交错式影像，为摄影机以60i模式拍摄，一秒60个场(field)，场是指半个画面，也就是半个帧(frame)，这种没办法还原成一个完整的图像，只能靠各种去交错算法去仿真出完整的画面，让其变成30p或60p。\n\n而Film是指原生为循序式影像，把每个图像经过拆场并重新排列让其变成一秒60场(60i)的交错式影像，这个过程称为Telecine，常见于电影或动画(原生24p的影像)经过2:3 pulldown的处理后变成60i的交错式影像，这种影像可以完美的还原为24p的循序式影像，只需将每两个场交迭并去掉多余的场即可，这种方法称为Inverse Telecine(IVTC 即反向Telecine)。\n\n**而madVR侦测到交错式影像，就会呼叫显卡去做硬件去交错(DXVA deinterlacing)，不过madVR目前并不会判断它是video还是film，而一律视为video并呼叫DXVA deinterlacing，就算我们播的是film内容的交错式影像。有时候显卡自己的去交错算法并不能正确的执行IVTC，或是显卡经过IVTC后，一样是用3:2的pattern输出给60Hz屏幕，一样有judder问题，这时候我们就需要手动使用Ctrl+Alt+Shift+T这个指令将其切换为film，这时madVR就会用CPU执行它自身的IVTC算法，而我们就会得到完美的原生24P影像，如果再同时使用smooth motion FRC，就能在60Hz屏幕上得到无judder的播放。**\n\n**不过译码器使用DXVA(native)的时候无法切换成film模式，如果要搭配硬解使用必须使用DXVA(copy-back)，须注意**\n\n以我的经验来说，这个功能用在一些标准DVD格式的电影最为好用(标准DVD输出皆为交错式影像)。\n\n另外电视台录制下来的电影跟动画(常见的为TS檔 60i)，也可以使用IVTC算法将其实时还原为24p。\n\n另外关于\"Debanding custom settings\"这个热键，其实是madVR隐藏起来的dabanding自定义参数功能，可以像测试版时期那样手动更改各项参数，左右键切换项目(被选择到的会变大写)，上下键增减数值，至于各个参数的定义有兴趣请自行到Doom9上找，这功能我懒得玩了，默认值就很好用了。\n\n<img width=\"690\" height=\"33\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/357b45f69c95406c93dcbb24def05d6b.jpg\" class=\"jop-noMdConv\">\n\n接下来介绍在影像播放时按Ctrl+J叫出的OSD上面一些数据的意义，配合图上的标记解说：\n\n![](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/98f8b001fe544bd8b881b2687b48b1bc.jpg)\n\n1.  目前的屏幕更新率。\n2.  影片帧率(音频时钟)与屏幕更新率(影像时钟)的偏移率，此数值越小表示越同步。\n3.  显示smooth motion FRC功能是否启用。\n4.  显示目前为D3D9或是D3D11模式；窗口模式、全屏幕窗口模式(fullscreen windowed mode)、或是全屏幕独占模式(fullscreenexclusive mode)或overlay模式；8bit或是10bit输出。\n5.  来源档案的编码、bit depth和色度信息以及译码器译码完传给madVR的色彩空间、bit depth和色度信息。\n6.  影片的帧数。(由源滤镜提供的信息判断)\n7.  每隔多久会掉1格，这与影片帧数和屏幕更新率的同步程度有关，另一篇会提到的Reclock有一个作用就是提高同步程度。\n8.  影片的原始分辨率及画面比例。\n9.  目标分辨率，有四组数字，分别是\"left, top, right, bottom\"，必须把第三组减第一组 第四组减第二组才是目标分辨率的\"width,height\"。\n10. chroma(色度升频)和luma(影像亮度升频)和chroma(影像色度升频)所使用的算法\n11. 每一个帧容许的绘制时间，这个值跟影片的帧数有关，例如我看24p的影片时，这个时˙间就是1/24=0.04167s=41.67 ms，也就是说每一帧都有41.67ms的时间让显卡去处理；如果是60i的影片，去交错后是60p，这个时间就是1/60=16.67 ms，由此可见帧数越高，可以处理的时间变短了，对显卡的处理能力要求的也就越高，也就是说越容易掉帧。\n12. 影片进行YUV<>RGB转换使用的系数标准，由影像流的信息判断或是madVR自行判断。\n13. 影片的色彩定义标准(色域)，由影像流的信息判断或是madVR自行判断。\n14. 影片的黑位范围，由影像流的信息判断或是madVR自行判断。\n15. on表示有开DXVADeinterlacing ，off表示没开，若madVR把循序式影像跟交错式影像判断错误的话请自行用热键Ctrl+Alt+Shift+D开关。若切换为film mode的话会在下方显示film mode，和侦测到的pulldown的形式。\n16. 各个queue是否充满通常能反应硬件是否能负荷，例如decoder queue很低的话表示CPU负荷不了了，render queue很低的话表示显卡负荷不了了。\n17. dropped frames跟delayedframes为掉帧计数器，若数字一直增加表示硬件无法负荷，请降低设定或找出原因。\n18. 平均绘制时间，通常也可观察GPU负荷情形，越好的算法跟较重的负荷通常会让绘制时间变多，多到超过movie frame interval的时间就会掉帧。\n19. 5秒区间内的最多绘制时间，观察GPU负荷的另一种方式，多到超过movieframe interval的时间就会掉帧。\n\n========================================================================\n\n## 显卡设置\n\n最后，为了避免不必要的负面影响及显卡效能的多余消耗，请进显卡控制接口把一些跟影像播放有关的处理通通关掉只留下去交错的部分，当然madVR本来就会绕过这些后处理，但是有使用到DXVA-deinterlacing跟DXVA-scaling的时候还是会被影响(DXVA译码则没有影响，因为那跟渲染器无关)，所以保险一点还是全部关掉。\n\n以下以A卡的CCC为范例：\n\n<img width=\"690\" height=\"656\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/f34786c31f794b5d91ca18b4add430a5.jpg\" class=\"jop-noMdConv\"> <img width=\"690\" height=\"656\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/27f2eb2d91964e9f9ace135ca6ba27de.jpg\" class=\"jop-noMdConv\"><img width=\"690\" height=\"656\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/b9b810716473411485618703d39400ce.jpg\" class=\"jop-noMdConv\">\n\n以Nvidia控制接口为范例，默认都是\"使用视讯播放器设定\"，这个不用去改它：\n\n<img width=\"690\" height=\"512\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/1b79dce9595f49d4b9789e2426dda597.jpg\" class=\"jop-noMdConv\"> <img width=\"690\" height=\"512\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/b0d05ddfe5bb4bb49316372432cd9c05.jpg\" class=\"jop-noMdConv\">\n\n如果屏幕接HDMI的话，建议使用RGB输出，不要用YCbCr输出，用YCbCr输出的话会在显卡层多一道色彩空间转换，造成画质损失，而且YCbCr都是输出16-235，只有RGB输出才能选择输出0-255或是16-235\n\n<img width=\"690\" height=\"512\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/2434149735f041a19537e23192bb37b1.jpg\" class=\"jop-noMdConv\">\n\nN卡旧驱动有些接HDMI输出RGB也会强制输出16-235，但如果屏幕支持0-255的话，可以用madVR文件夹里的一个小程序\"madLevelsTweaker.exe\"强制让它输出0-255，如下图勾选并套用后重开机即可。\n\n![](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/088ced1babe14e9180bbc30cb70a2db8.jpg)\n\n而N卡347.09之后的驱动，可以直接选择0~255输出不用透过madLevelsTweaker.exe修改\n\n<img width=\"690\" height=\"509\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/695cfc9afc1045a3bf11ed90117fc99c.jpg\" class=\"jop-noMdConv\">\n\n353.06之后位置改到这边\n\n<img width=\"690\" height=\"530\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/7615df842f374e8aa84a388786a9cd8f.jpg\" class=\"jop-noMdConv\">\n\n**另外还有一个很重要的地方，最近的显卡驱动默认值都以省电为主，但是却会造成运行madVR时显卡不会用全力跑，造成效能比预期低落，以NV为例，必须到控制面板选取播放器执行文件(图中范例为mpc-be64.exe)，把电源管理模式设定为\"自适应\"或\"惯用的最大效能\"(广域设定默认值是\"最佳电源\"，一切的元凶…)，如此才能让显卡全力运行madVR。而AMD的控制接口也有电源管理的相关选项要关掉，不然也是可能会降频跑。**\n\n<img width=\"690\" height=\"512\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/bca7ec6b20174c6a8a5b33573bf10623.jpg\" class=\"jop-noMdConv\">\n\n**到此整个设置就算大功告成，enjoy it！**\n\n关于madVR到底需要多少显卡效能的议题，这边也简单做个结论，第一当然就是跟你的设置息息相关，你启用了哪些功能，那些功能吃掉了多少效能？第二就是跟你看的影片种类有关，看的影片跟屏幕分辨率相同时消耗的效能最少，因为只需要做chroma upscaling(但影片本身分辨率越大，例如4K影片，光做chroma upscaling消耗的效能也不少)。而当影片分辨率跟屏幕分辨率不一样时，是放大还是缩小？再来就是影片的帧率，60p的影片稳定播放需要的效能会远大于24p的影片，再来就是interlaced跟progressive的差别，interlaced需要做去交错，所以一个60i的影片消耗的效能又比60p更大…这些不同种类的影片，我们可能都需要不同的设置去对应，因此madVR加入了profile的功能，提供最大的自定义弹性，这部分我将在另一篇文中介绍。\n\n另外介绍madTestPatternSource filter用法，这是一个madVR用的测试工具，首先去下载\n\n[http://madshi.net/madTestPatternSource.zip](https://madshi.net/madTestPatternSource.zip)\n\n解压缩后点击里面的install.bat安装，方法跟安装madVR一模一样\n\n然后打开播放软件，将文件夹里面的.ytp文件拖到播放软件上放开就会自动播放。\n\n不过请注意.ytp檔只能在32bit的播放器上运行，如果使用x64播放器的话请另外抓x86版才能玩这个东西…\n\n里面各种ytp档可测试各种不同的播放条件，下图为SmoothMotion的测试档，可自行测试不同帧率在自己屏幕上播放，有开跟没开SmoothMotion FRC的差别。\n\n<img width=\"690\" height=\"451\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/94b0b86df9814820a337c86e3d7282ac.jpg\" class=\"jop-noMdConv\">\n\n## 档名tag使用教学\n\n其实这是早在v0.85.4版就加入的功能，还蛮实用的，特别提一下，当然随着版本更新陆续有一些新的tag加入。\n\nmadVR可以辨识一些在影音档的档名中加入的tag(标签)，而在开启档案时套用tag上的设定，\n\n这样一些需要特别设定的档案就不用每次都在那边手动调整\n\n以下为所有的tag：\n\n- tag\"matrix=709|601|NTSC|PAL|YCgCo|240M|2020\"\n\n- tag\"primaries=709|SmpteC|EBU|sRGB|NTSC|PAL|470M|240M|170M|2020|DCI\"\n\n- tag\"levels=PC|TV|fullrange|limited|doubleExp|tripleExp\"\n\n- tag “deint=On|Off|Video|Film”\n\n- tag “blacklevel=%value%”, valuerange \\[-50, +50\\]\n\n- tag “whitelevel=%value%”, valuerange \\[-50, +50\\]\n\n- tag “contrast=%value%”, valuerange \\[-100, +100\\]\n\n- tag “brightness=%value%”, valuerange \\[-100, +100\\]\n\n- tag “saturation=%value%”, valuerange \\[-100, +100\\]\n\n- tag “hue=%value%”, value range\\[-180, +180\\]\n\n- tag “frameRate=%value%”, e.g.23.976, 24.000, 23, 24, …\n\n- tag “refreshRate=%value%”, e.g.23.976, 24.000, 23, 24, …\n\n- tag “deband=off|low|medium|high”\n\n- tag “profile=‘profile name’”\n\n- tag\"dering(ing)=on|off|half|full\"\n\n举例来说，一个普通的档案，开启时会按照自动侦测的结果套用预设的设定。\n\n以下以去交错方法为例子来说明，虽然是原生24p的电影，但因为电视录下来是60i的档案，开启时自动使用了显卡硬件去交错\n\n![](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/5adfbaf21fab46d28899bcfacdc799bd.jpg)\n\n<img width=\"690\" height=\"417\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/7558beb42c0a4cbf99f2496480832832.jpg\" class=\"jop-noMdConv\">\n\n文件名中加入标签\"deint=Film\"，于是开启时自动使用了IVTC，不用再手动切换\n\n![](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/a4e43bf7967d436aab33d453b227e9bc.jpg)\n\n<img width=\"690\" height=\"417\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/9fbd41220eed47f0b8c5d668d6cc2708.jpg\" class=\"jop-noMdConv\">\n\n以上只是简单的例子，基本上档案需要特别设置的色域、色阶、去交错方法、亮度、对比、饱和度、色相等等，都可以透过这种加tag方式来减少手动调整的麻烦\n\nmadVR Profile设置实战\n\n[萬年冷凍庫: 系列番外篇之2─madVR Profile設置實戰 ](http://lysandria1985.blogspot.com/2014/01/2madvr-profile.html)\n\n这篇文章常年来随着版本更新增加删减不少内容，虽然我改完会大致看一遍但是难免会有所遗漏，如果你看了觉得哪里有前后矛盾或是文意不顺、文章内容跟现有madVR版本兜不上或是任何难以理解的地方，欢迎留言提问或指教，感谢！\n\n","tags":["转载","madvr","影音相关"],"categories":["Course"]},{"title":"最强渲染器 madVR - 使用指南（上篇）","url":"/undefined/5c519828.html","content":"\n{% note blue 'fas fa-bullhorn' %}\n\n {% post_link 最强渲染器madVR-使用指南（上篇） ' ⚡️ 最强渲染器madVR-使用指南（上篇）' %} - {% post_link 最强渲染器madVR-使用指南（下篇） ' ⚡️ 最强渲染器madVR-使用指南（下篇）' %} \n\n{% endnote %}\n\n## madVR 概述\n\n![](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/9e1a97067f3c4d6b8faf59fcfb23945c.jpg)\n\n（madVR的开发者，德国人Madshi）\n对于madVR渲染器，使用PC视频播放器的用户不会陌生。说它是PC电脑上的最强渲染器一点都不为过。有了它，PC播放的画质超过顶级蓝光播放器不再是“不可能的任务”。即使是这个神一般的工具，使用起来依然与大多数PC软件一样 - 设置选项繁多而且复杂。再加上这是一个由德国人开发的软件，菜单统统是英文的，对于大多数用户来说并不是很友好。\n\n即使看到过几篇关于使用电脑播放器+madVR播放的文章，感觉作者也只是人云亦云，一知半解。以为自己安装了madVR就万事OK了。殊不知，madVR的强大远远超出了人们的想象。\n\n幸好，一名叫做“萬年冷凍庫”的朋友（应该是台湾人），在Blogspot发布一篇大约3万字的madVR使用指南。详细到每一项设置该如何调整，最终测试效果如何。相信读完这篇文章，大家都能成为PC视频播放的高手。原文在此：[萬年冷凍庫: 系列之3─最強渲染器-madVR](https://lysandria1985.blogspot.com/2013/01/3-madvr.html)\n\n由于一些不可抗力的原因，原文页面无法被大多数人访问，因此一烧体验馆将此文章搬运过来，分2篇进行连载。\n\n## Devices\n\n### 播放器准备工作\n\n**正文开始：（以下约一万字，请收藏文章后阅读）**\n\n---------------分割线------------\n\n在介绍这东西之前，先用张图来复习一下上回提到的播放过程：\n\n![](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/dd02b6ef876f4a46ae5cd565c7f5e9df.jpg)\n\n这边可以看到视讯输出的最后一道过程就是Video Renderer(视讯渲染器)的部分，同时这个部份也是对画质影响最吃重的一个部分，在来源档案相同的前提下，可以说影像播放的画质好坏取决于渲染器之上也不为过，而madVR正是以此为最大卖点的渲染器，此渲染器是由DOOM9论坛上的madshi所开发，不惜一切效能代价以换取最大的画质表现，也因此这个渲染器对显卡的要求稍微吃重些，超越了我们一般对播放软件之硬件要求的常识(这个常识是指，只有玩游戏才需要用到较高阶的显卡，影像播放只需要低阶显卡甚至内显已可胜任)，我们最好以run一个游戏的标准来看待其所需要的效能。但并不是说只有好的显卡才能用这个渲染器，事实上madVR内部的选项相当弹性，根据设置的不同它可以让低阶卡跟内显顺顺跑，也可以把TiTan操爆，一般来说，我建议在能力许可的范围内选择一张不算太差的独立显卡才能发挥它该有的战力。\n\n翻译一下开发者madshi提到关于madVR的一些特色：\n\n- 高质量的chroma upscaling(下面内文会再解释这东西)\n- 高质量的scaling(各种升降频算法)\n- 高质量的YCbCr→RGB转换\n- 对屏幕执行gamut和gamma的调色校正\n- 内部演算皆为16bit的高精度处理\n- 最后处理完成的16bit讯号dithered降转成8bit RGB输出\n- 避开各种显卡内加料(对画质有负面影响)的算法\n- 所有作业皆透过GPU shaders完成(IVTC运算除外)\n- 以追求最高质量为第一优先\n\n再重申一个观念，视讯档案的播放，解码吃的是CPU效能(硬解例外，硬解是使用显卡上的译码模块，既不吃CPU也不吃GPU效能)，而渲染才是吃显卡GPU效能，使用madVR时，GPU的效能很重要。\n\n接下来进入正题，首先先到官方讨论页下载最新版的madVR\n\n[madVR - 高品质的视频渲染器（GPU辅助） - 末日9的论坛 (doom9.org)](https://forum.doom9.org/showthread.php?t=146228)\n\n或是到madVR官网下载：\n\n[http://madvr.net/](https://madvr.net/)\n\n[http://madvr.com/](https://madvr.com/)\n\nmadVR目前还没有安装档，madshi说他想到v1.0时再做安装档，所以下载后解压缩完自行将文件夹丢到想放的位置，像我还是习惯丢到Program Files (x86)下面，之后进madVR文件夹里点一下\"install.bat\"就会出现滤镜注册成功的讯息，以后要更新madVR只需要将文件夹整个盖过去即可。\n\n\"restore default settings.bat\"这个执行档可回复所有的madVR设定到初始默认值，如果设定时乱了套或是出现问题，可以点击这个执行档，重新开始。\n\n**madVR的初始默认值是重视效能取向和稳定性的，也就是让大部分的显卡都可以正常运作为前提的设置，懒的研究设置的朋友用默认值也可以顺顺使用madVR，但如果想要进一步发挥madVR强大的功能，我们就再继续看下去。**\n\n![](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/491a4d279b014cc091dc7f2f7f5512e8.jpg)\n\n到MPC-BE（小烧注：MPC-BE播放器，其余支持滤镜的播放器也可以）里的选项>视讯底下应该可以选择madVR了\n\n![](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/e63989d388b6461ea0c3d6a5273cd6ed.jpg)\n\n播放影片时，右键>筛选器，底下选择madVR可以打开madVR的设定页，或是右下角的工具栏madVR图示上点右键并选择\"Edit madVR settings\"，或是**直接按Ctrl+S**，或是在外挂滤镜里加入madVR并点两下都可以打开设定页\n\n<img width=\"690\" height=\"416\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/abc4388c2c7644f996c8d455d3c7dc63.jpg\" class=\"jop-noMdConv\">\n\n![](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/ff9cc38ff0aa48438509e5aed94c3e5d.jpg)\n\n![](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/bad42c2e7e1542b195eb228e7d5d4772.jpg)\n\n### 显示器设置\n\n打开设定页，并将项目展开：\n\n<img width=\"690\" height=\"429\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/9fc18ed661234b7db33c8e7a4ad486e2.jpg\" class=\"jop-noMdConv\">\n\n\"devices\"底下为目前连接的屏幕，目前显卡抓到几个这边看到的就是几个，将屏幕底下的项目展开可再针对各个屏幕做设定\n\n第一个要先选择屏幕的种类，我想应该不用多做解释了，是哪种屏幕就选哪种，一般液晶/电浆/OLED屏幕或电视选择\"Digital Moniter/ TV\"即可，如果是投影机则选择\"DigitalProjetor\"\n\n<img width=\"690\" height=\"429\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/7bbc2c6bcea14c35bd62a03098efa07a.jpg\" class=\"jop-noMdConv\">\n\n### properties\n\n到\"properties\"这页，选择该屏幕的output level，一般而言计算机屏幕选0-255，电视的话选16-235，不过有些较新的电视也接受0-255的讯号，这边注意电视的设置与madVR的设置要一致，否则有些色阶会被切掉，俗称黑位错误。(显卡控制接口上的设置则一律设为\"由应用程序决定\"即可，madVR会决定最后输出的output level)\n\n详细可参考我的另一篇：浅谈HTPC与颜色管理─绪论与前置作业(1/4)\n\n而bitdepth的选择，这边可以维持预设的\"auto\"让madVR自行判断即可。\n\n如果屏幕是原生8bit(16.7百万色)或更高，或6bit dither(抖色)处理后有办法完整显示16.7百万色，则选单里可选择8bit；如果屏幕是6bit dither(抖色)成8bit且只能显示16.2百万色的话，且屏幕自身的抖色效果不佳的话，选单里可选6bit或7bit，madVR会增加抖色(dithered)输出的强度，色阶过渡会比较好点(但会增加一些噪点)，一般而言TN面板的LCD屏幕6bit抖色的居多，IPS/VA面板比较有可能是原生8bit或以上。\n\n**至于10bit输出，除非能完全确定屏幕能够接受10bit讯号输入并且显卡驱动程序也能够输出10bit，才去选择这个选项，如果不能100%确定，那还是建议选择8bit输出，madVR的dithered 8 bit输出的效果跟10bit输出其实差异很小，实际观赏时肉眼几乎难以查觉差异。**\n\n**另外需注意，10bit输出，只有在D3D11 的FSE(全屏幕独占)模式下(这是general serttings那边的设定)或是win10操作系统下的窗口全屏幕模式才能达成(不过目前排除了NV卡，因为其驱动以此法输出10bit会有造成banding的bug出现，故NV卡目前除了FSE模式外都是强制输出8bit)。**\n\n**如果你无法确定你的屏幕要选择哪种bit数，请自行用灰阶影片来测试，看选择哪一个bit数的色阶过渡效果最好，色阶断层(banding)最不明显，那个就是最适合你的屏幕的bit数设置。**\n\n另外关于6bit以下的选项，那些只是给你做dither算法的测试时使用的，不要做为常驻选项\n\n关于dither这技术的原理可参考此篇文章\n\n[[心得\\] 淺談人眼視覺特性與其應用 - 看板 LCD - 批踢踢實業坊 (ptt.cc)](https://www.ptt.cc/bbs/LCD/M.1374130301.A.402.html)\n\n3D format这项，在观看3D影片时才有作用，一般设为auto就好，如果显示设备接受特定的3D显示形式才需要去切换\n\n<img width=\"690\" height=\"433\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/c5f803fec3c0413aa7b1834af9b03405.jpg\" class=\"jop-noMdConv\">\n\n### calibration\n\n到\"calibration\"这页，可以看到四个选项，一般屏幕如果没有经过校色器校色过或是不确定色域的话可维持选第一项\"disable calibration controls for this display\"就好了，最下面那个\"disableGPU gamma ramps\"如果没有校色过的话就不要勾选\n\n<img width=\"690\" height=\"429\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/2a22235909c94b438e115dcad3d802c0.jpg\" class=\"jop-noMdConv\">\n\n如果该屏幕经过校色器校色过或是屏幕有色域选项而且其出厂标准可以信任的话，可以选第二项\"this display is already calibrated\"，gamut跟 gamma就依校色时的条件去选择\n\n第三项\"用yCMS校色\"跟第四项\"用3DLUT檔校色\"，一样需要有校色器的配合，yCMS是将校色过后的三原色跟灰阶信息自行输入，而3DLUT则是用校色后的信息产生一个独立的3DLUT档来使用，**目的都是为了能让片源配合屏幕及环境光源状况达到最正确的输出，能够呈现影片制作者原本要表达的画面，而不会因为显示器和传输媒介的个别差异而被扭曲得乱七八糟**。后面两项使用的话显卡内存必须要有至少1GB以上，因为这两项功能会建立Lookup tables，会占用大量的显卡记忆空间。\n\n有兴趣的朋友可先参考此网址：\n\n[http://www.avsforum.com/t/1471169/madvr-argyllcms](https://www.avsforum.com/t/1471169/madvr-argyllcms)\n\n目前由于ArgyllCMS和dispcalGUI的两位开发者都把madVR加入支持，所以已经有一套很完善而且简单的校色流程，只需要去租用一个校色器(建议是光谱仪 colormunki photo、colormunki design或i1 pro之类的)，照上面网址教学操作很简单就能完成，做出必要的3DLUT檔。\n\n当然校色的领域博大精深，其中有不少的know-how，所以也请原谅我的无限期拖稿，等小弟玩出些心得会再另发专文分享。\n\n<img width=\"690\" height=\"429\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/8f047ed606e146a19b77e45010ca64dc.jpg\" class=\"jop-noMdConv\">\n\n### display modes\n\n到\"display modes\"这页，这部分是在播放影片时实时改变显示模式用的，可选择播放时改变或是全屏幕时再改变，然后再选择结束播放或是结束全屏幕时要不要改回来。这部份的功能是在显示设备有支持多种显示模式时使用的(像有些电视或投影机有24P输入模式，或要在59Hz和60Hz之间切换)，可让其配合影片更改屏幕更新率或是分辨率，若**屏幕没支持的话这部分不用勾选。**\n\n解释一下选项：\n\n- switch to matching display mode…(启用播放时切换显示模式)\n  - …when playback stars (只要开始播放就切换)\n  - …when media player goes fullscreen (只要全屏幕播放时才切换)\n\n- restore original display mode…(结束播放时切换回原来的显示模式)\n\n  - …when media player is closed (播放器关闭时才切回去)\n\n  - …when media player leaves fullscreen (只要退出全屏幕就切回去)\n\n**注意要使用自动切换功能，必须在下方的\"list all display modes madVR may switch to:\"底下那个空格填入屏幕能使用的显示模式，没填的话就没有自动切换作用。**\n\n以我的panasonic电视为例子来说，它的更新率在1920*1080下支持23Hz(实际约23.976附近)、24Hz、29Hz(实际约29.970附近)、30Hz、59Hz(实际约59.94附近)、60Hz这六种，将其输入可以让madVR更精确的切换电视屏幕更新率以对应不同帧率的影片，以上面例子来说，我会在字段输入1080p23、1080p24、1080p59、1080p60这四种(29Hz跟30Hz没必要，因为用其倍数的59Hz跟60Hz来显示更好)，1080p23对应帧率23.976 fps的影片，1080p24对应帧率24 fps的影片，1080p59对应帧率29.970和59.940 fps的影片，1080p60对应帧率30和60 fps的影片。\n\n**当然这些只是举例，如果是用2K或4K屏幕的话，前面请自行换成1440p__或2160p__**\n\n另外有个\"treat 25p movies as 24p\"这功能要配合Reclock使用，目的是让欧规PAL25p的影片能够降速到24p去配合24p的显示模式，如果没有在看欧规影片的话这部分也不用理会。\n\n而\"hack Direct3D to make 24.000Hz and 60.000Hz work\"这个选项，在系统是win8.1或win10时才有作用，win8.1和win10，有时候会发生屏幕更新率无法在需要时(要对应24fps或60fps影片时)变更成24Hz和60Hz(屏幕更新率会锁在23.976Hz或59.940Hz)，这个选项可以解决这个问题，但可能有个副作用是会造成presentation queues填不满，所以依个人需要决定要不要勾。\n\n<img width=\"690\" height=\"440\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/c867746f0d3b48529a73feb812d28b2b.jpg\" class=\"jop-noMdConv\"> <img width=\"690\" height=\"433\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/9bcc4b7f8c6f4c6ba5f656f11c9fbef9.jpg\" class=\"jop-noMdConv\">\n\n此外，“display modes\"这页的设定还有另一个分页\"custommodes”，这是madVR的另一项有用的屏幕更新率自定义及微调功能，详情请参考我的另一篇介绍文章：\n\n系列番外篇之3─是时候抛弃Reclock了？ madVR屏幕更新率微调功能简介与实作\n\n### color & gamma\n\n到\"color & gamma\"这页，如果方才的\"calibration\"那页里面选择的是第一项\"disablecalibration controls for this display\"，gamma是预设为purepower curve 2.2，这时勾选\"enable gamma processing\"并设定为pure power curve2.2的话不会有任何改变，如果设为其他值才会改变gamma\n\n\"calibration\"这项如果有设定，举个例子，假设我设定gamma为BT.709 1.8，这时不勾选或是勾选\"enable gamma processing\"并设定为BT.709 1.8的话都不会有任何改变，但如果设为其他值就会改变gamma的输出\n\n现在回到为什么要改变gamma输出的问题，主要是为对应校色时跟你实际观看的环境的差别，例如你的屏幕可能是在暗室校色为gamma2.4，那么在同样的暗室观赏，不用去动gamma值就可以看到影片中的亮部跟暗部细节，但是你如果把同样的屏幕拿到明室中来观看，因为人的眼睛会根据环境光线调整瞳孔大小，所以这时一样的设定可能会让你看不到影片中的暗部细节，这时就要把gamma降到2.2或是更小来输出，才能得到同样在暗室观赏的效果，但madVR不会知道你在哪种环境底下来看影片，所以才需要\"enable gamma processing\"这项来手动更改gamma输出\n\n如果是用校色器校色，而且你看影片的环境光线跟校色时选用的gamma曲线能够配合的话，那就不需要勾选\"enable gamma processing\"来修正gamma值了。\n\n这边我还是假设各位是未校色的屏幕并且\"calibration\"那页里面选择的是第一项\"disablecalibration controls for this display\"，那么此处建议底下选择\"purepower curve\"，gamma值一般正常预设2.2，不过可依环境光源来做调整，较暗的环境中，可增加gamma值到2.4，全暗环境甚至可到2.6，如此可看到较细微的阶调变化；在较亮的环境中，就必须减少到2.0或更低，否则就会看不到暗部细节，不过个人建议还是先设2.2，实际播放影片时再依当时环境用热键做暂时性的微调就行了。\n\n<img width=\"690\" height=\"429\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/15f8d274b61845e19ce19f4e9b8f3c83.jpg\" class=\"jop-noMdConv\">\n\n另外注意到上方有手动颜色控制，可调整对比、亮度、饱和度，色调的部分，这个一般不用去改，有需要再去调就好了(屏幕方面，我比较建议先调屏幕自身的控制面板，之后不满意再来调这个地方)。\n\n另外总结一下目前madVR可以做手动颜色控制的地方有三个：\n\n1.  在madVR选项里的\"device\"下的\"color & gamma\"，针对每个屏幕个别调整，也就是上面的那个。\n2.  热键设定里有一堆开头\"source\"的项目，可建立热键，在播放影片时随时用热键调整，调整结果不会被储存。\n3.  播放软件的调整接口，效果同1.，不过调整结果对所有屏幕都会有作用，如下图：\n\n![](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/9b814a6277b34e68b67207881e07ed8d.jpg)\n\n### HDR\n\n到HDR这页\n\n如果你没有观看HDR(High Dynamic Range)影片的需求的话这边设定可以不用去管它，**它对于SDR(Standard Dynamic Range)的影片是没有任何影响的，而我们目前观看的绝大多数影片都是SDR的，**目前只有一些非常新的4K影片会采用HDR这项技术，HDR影片通常会是BT.2020色域、10bit色深。以下简略解释各选项\n\n<img width=\"690\" height=\"433\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/cbf7173018a7445ca7696f38e58fbdf5.jpg\" class=\"jop-noMdConv\">\n\n- “let madVR decide”，全部交给madVR自行判断，如果屏幕支持HDR的话，madVR会送HDR 影片和metadata的讯号给屏幕(同第二项\"passthroughHDR content to the display\")；如果屏幕不支持HDR的话，madVR会使用 pixel shader math把HDR影片转成SDR讯号送出(同第三项\"convert HDR content to SDR by using pixel shader math\"，但效果等同第三项未勾选\"restoredetails in compressed highlights\"，转换后细节损失比较多，故屏幕不支持HDR的话我建议直接选择第三项)。\n- “passthrough HDR content to thedisplay”，**将HDR内容和metadada不经处理直接送给屏幕，须注意选择此选项屏幕必须完整支持HDR内容播放，屏幕不支持HDR这选项就没有任何意义。**madVR在v0.91.11之后版本才能完整使用这个选项的功能，支持两种API将影片的metadata传送给电视去辨识。一种是NV或AMD卡专用的HDR API，必须搭配新的驱动，好处是win7、win8.1、win10皆可使用；另一种是win10内建的D3D11/DXGI APIs.，这个每家显卡都可用，但只有win10下能用，播放时必须使用D3D11模式。(\"calibration\"设定里有3DLUT档的话会绕过)\n- “convert HDR content to SDR by usingpixel shader math”，选择此选项会将HDR之内容妥善转换成SDR内容后输出给一般SDR屏幕使用(\"calibration\"设定里有3DLUT档的话则会接在后面套用)**，如果屏幕不支持HDR的话我建议选择此项。**\n- “convert HDR content to SDR by usingan external 3DLUT”，选择此选项则须利用校色器跟软件建立HDR→SDR转换的3DLUT给它使用，转换后输出SDR内容给屏幕(\"calibration\"设定里有3DLUT档的话会绕过)\n- “process HDR content by using pixelshader math”，输出HDR内容给屏幕，**选择此选项屏幕也必须支持HDR播放**，但是是由madVR来处理色域跟亮度的转换，例如电视支持HDR，但是色域是DCI-P3的case(\"passthrough HDR content to the display\"那项则是由电视本身处理色域跟亮度的转换)，有时候电视本身没办法很好的处理HDR内容的色域跟亮度转换时就适合选择此项。(\"calibration\"设定里有3DLUT档的话会绕过)\n- “process HDR content by using anexternal 3DLUT”，选择此选项则须利用校色器跟软件建立HDR→屏幕色域转换的3DLUT给它使用，**选择此选项屏幕也必须支持HDR播放**。(\"calibration\"设定里有3DLUT档的话会绕过)\n\n以下以第三项\"convert HDR content to SDR by using pixel shader math\"为例说明下方之子选项：\n\n**target peak nits**\n\n可设定范围是120~10000，HDR影片使用的亮度范围是0~10000 nits，它必须有一个支持HDR的显示器才能正常显示(当然还有显卡也要支持)，而一般SDR的显示器最大亮度大概在80~300 nits(例如我的电浆电视校色后最大亮度设定在120nits)，在SDR显示器上播放HDR影片是没办法显示正确亮度的，需要经过色调映射(tone mapping)，这个选项就是让你设定HDR影片转换后的亮度，让HDR影片可以在SDR屏幕上正确显示，不过并不是屏幕亮度设多少这选项就一定要设多少，还必须实际播放测试后去找出最适合的选项。这边设置的数值越低，亮度中间值会拉越高(整体画面越亮)，数值越高，亮度中间值拉越少(整体画面越暗)。像我的电视亮度实际大约120nits，但是这一选项我设定在200nits看起来效果比较好。\n\n**tone maping curve**\n\n设定色调映像用的曲线，建议选择默认的BT.2390。\n\n**gamut mapping algorithm**\n\n影片里大于屏幕色域的画素，如果什么都不做的话，色彩坐标超出的部分会被剪除(例如一个画素RGB为50,320,40，屏幕255,255,255，则该画素显示时会变成50,255,40)，会造成hue(色相)跟原本的产生差异，颜色会偏移，因此较好的做法是透过降低亮度或降低饱和，等比例去分配RGB值，以求在屏幕色域能显示的范围内尽量让hue保持不变。此项是选择色域转换所使用的算法，不同的算法设定会造成转换后的颜色呈现有些微的差异，有兴趣的话可慢慢测试不同设定，不然建议先维持默认选项即可。\n\n**fix too bright & saturated pixelsby**\n\nluminance reduction(降亮度)、saturation(降饱和)，要用哪个则是个难题，有些HDR片源适合降亮度，有些适合降饱和，这边建议维持预设\"dynamic luminance & saturation reduction\"，让madVR自行判断并做动态调整。\n\n**measure each frame’s peakluminance**\n\n勾选这项会让madVR自己计算每一帧的巅峰亮度值，虽然这项信息HDR metadata里面有但未必是准确的，因为只有单一数值，而每个帧的亮度是一直变化的，实时测量才能让madVR达成更精确的亮度转换(tone mapping)\n\n**restore details in compressedhighlights**\n\n在压缩高亮度区域的数值时，因为数值会非常接近，可能导致该区域的细节遗失，勾选此选项的话，会在需要时透过锐化的方式让细节比较容易保留下来\n\n**activate anti-bloating filter**\n\nAB滤镜，因为上面有用到锐化故建议勾选\n\n**activate anti-ringing filter**\n\nAR滤镜，因为上面有用到锐化故建议勾选\n\n此外，关于HDR metadata输出通道，做一些补充说明：\n\n1.Windows 10 Creator’s Update底下的屏幕设定里面有个选项叫\"HDR and advanced color\"(不太确定中文版翻成什么)，关掉的话屏幕永远跑SDR模式，开了的话有HDR的屏幕永远跑HDR模式，Windows目前无法根据使用者是否跑HDR影片或HDR游戏而自动把屏幕在SDR或HDR模式之间切换。\n\n2.关掉\"HDR andAdvanced Color\" 这选项的话PC永远会送SDR内容给屏幕(使用A或N卡自身的HDR API时例外，见第4.项)，这时候如果用madVR播放HDR影片并选择第一项\"passthrough HDR content to the display\"，如果是Intel内显，OS/GPU会自己做一个质量比较低的HDR-> SDR 转换，这时候HDR影片看起来还是OK的，但质量差强人意。SDR影片则不受影响，仍然是完美的。\n\n3.打开\"HDR andAdvanced Color\" 这选项的话PC永远会送HDR内容给屏幕(使用win10内建的API)，这时候madVR选择\"passthrough HDR content to the display\"的话，播放HDR影片时是完美的，但播放SDR影片时，OS/GPU会自己做SDR ->HDR 转换，这时候SDR影片看起来还是OK的，但质量称不上完美。非影片的部分，像桌面跟网页那些，也可能造成颜色异常。\n\n4.Nvidia和AMD 自己的HDR API解决了上面提到的无法自动切换HDR跟SDR的问题，**N卡和A卡使用者只要把win10的\"HDR and Advanced Color\" 这选项关掉，madVR就自动会使用显卡自己的HDRAPI，如此一来就可以自动切换屏幕的SDR和HDR模式**，让SDR和HDR影片都可以的到最完美的播放效果。\n\n5.N卡驱动建议更新到390.65之后版本，太旧的会不支持显卡自身的HDR API或是有bug。\n\n6.AMD的HDR API限制较多，只能在10bitD3D11输出模式下使用，而且必须在全屏幕下才能使用，N卡的HDR API则无此限制。\n\n7.**除非A卡或N卡的HDR API无法正常运作，不然非常不建议去开win10自身的HDR选项。**\n\n===================================\n\n## Processing\n\n### deinterlacing\n\n到\"deinterlacing\"这页，建议如图设定：\n\n这边是关于是否启动去交错的一些判断原则，我们让madVR自己判断，并选择在怀疑时不启动去交错。\n\n下方\"only look at pixels in the frame center\"这个选项只对film型式的交错式(隔行扫描interlaced)影片有影响，也就是说这选项在启动madVR的film mode时才有作用(文后有解释)\n\n我们知道对于这类影片必须对其作IVTC让它还原成24p(60i→24p)，但实际上我们有时候会发现录了一部电视播放的电影或动画下来，电视台常常在四边打上跑马灯或台标之类的东西，而这个跑马灯或台标却是video型式的interlaced讯号(真正的60i 无法IVTC)，因此我们要作IVTC时如果是对整个画面的像素作侦测，遇到这种情形时就很容易产生误判。因此勾选这个选项时就只会对画面中央部分的像素作侦测，避开那些跑马灯或台标可能出现的位置以免作IVTC时产生误判，但缺点就是这样侦测的效率较低，遇到动画这类常常有静止画面的影片在侦测是哪一类pulldown时就会花比较久的时间。**如果会看电视台播放的电影或动画的话，建议勾选此选项，如果是看DVD原盘的话，则建议取消勾选。**\n\n**这选项对progressive的影片完全没有影响，如果照字面理解为这选项不利于动画的话那是错误的理解，因为很多动画片源只要是蓝光或是录制下来压制时做过IVTC的，都会是progressive而非interlaced。电视台录制下来的原始TS檔或是DVD原盘才有可能是interlaced。**\n\n<img width=\"690\" height=\"429\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/21a2f47f760d4dafbd85b058df9de2e4.jpg\" class=\"jop-noMdConv\">\n\n### zoom control\n\n接下来到zoom control这项，这边是设定画面缩放的一些控制条件，一般来说并不需要做任何设定，不过某些情形下这些选项是很有用的，这边稍微解释一下各个选项及其可能适用的范围\n\n<img width=\"690\" height=\"465\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/2ea5d0a837744e77a51e7b810b8bddea.jpg\" class=\"jop-noMdConv\">\n\n“disable scaling if image size changesby only”：设定片源跟目标分辨率低于几个像素时不执行缩放演算，而以添加黑边代替\n\n“move subtitles”：移动字幕到画面底部或是影片可视范围内(搭配下面的侦测跟移除黑边功能)\n\n“automatically detect hard coded blackbars”：自动侦测影片内部的黑边，这里的黑边，并不是指影片比例跟屏幕比例不一样产生的那种黑边，而是**指影片编码时就被包含在其中的黑边**，这边我举两个例子来说明。\n\n例1：很多电影是用21:9这种超宽比例来拍摄，但是发行BD时，仍然按照规范采用16:9的画面比例编码(影片分辨率1920*1080)，也就是会在21:9的画面中加入上下两道黑边让它变成16:9的画面(如下图所示)，这在一般16:9或16:10的显示器上播放当然没有什么问题，但是如果在21:9的显示器上播放的话，就会变成除了上下两道黑边外再加上左右两道黑边，因为要把16:9的画面塞到21:9的显示器中，不破坏画面比例的话左右必然会有黑边。但我们可以发现它的影像实际画面范围就是21:9，明明放到21:9屏幕上却白白多加了上下左右四道黑边，这是一种浪费，于是madVR这个选项就是让它去侦测出实际的画面范围，以便让21:9的影像内容确实填满21:9的屏幕，不用浪费在四道黑边上面。\n\n而就算我们在16:9的显示器上播放这类影像，用这功能把实际的画面范围抓出来的话，亦可以减少渲染输出时的效能消耗，因为渲染的范围减少了(例如原本连黑边要渲染1920\\*1080的分辨率范围，抓出实际范围后只渲染有画面的1920\\*823的那部分)\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/6eb7aa4bd7904e6f9c0e0bbc3400f522.jpg\" class=\"jop-noMdConv\">\n\n例2：有些SD的讯号源，像电视的SD频道，它的比例都是4:3(640*480)，但其实里面的节目有些是16:9的画面，只是它塞在4:3的框架里去播，多加了上下两道黑边，如果放到16:9的屏幕上看的话，左右也会多出黑边(如下图)，一样也是白白浪费了上下左右四道黑边的范围。这选项也是可以把16:9的画面抓出来填满16:9的屏幕\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/3e836055ae8449d1aac287e7f3ec5701.jpg\" class=\"jop-noMdConv\">\n\n继续解释一下下面的子选项\n\n“if black bars change pick one zoomfactor”：如果黑边改变的话选取一个缩放比例\n\n- 不损失任何画面内容为原则\n- 砍除25%黑边\n- 砍除50%黑边\n- 砍除75%黑边\n- 砍除全部黑边\n\n“if black bars change quickly back andforth”：如果黑边改变很快速的话\n\n- 不切换缩放比例低于2秒、5秒、15秒或45秒\n- 选定一个通用的缩放比例(不损失原则、25%黑边、50%黑边、75%黑边、全部黑边)\n\n“notify media player about croppedblack bars”：多久通知一次播放器缩放比例改变(实时、2秒、5秒、15秒、45秒)\n\n“always shift the image”：切齐画面顶部或是底部\n\n“keep bars visible if they containsubtitles”：如果上面有字幕的话保留黑边(字幕出现后保留黑边5秒、15秒、45秒、3分、10分、30分、90分或永远)\n\n“cleanup image borders bycropping”：除了黑边外也切掉一些实际画面边缘(给一些边缘比较糟糕的影像使用)，可切1~7个像素，从有移除黑边的地方切或是不管有没有黑边直接切\n\n“if there are big black bars”：有大范围黑边的话，直接移除25%、50%、75%或全部黑边并放大影像(有超出屏幕范围可能，小心使用)\n\n“zoom small black bars away”：有小范围黑边的话直接裁掉放大，不过为了维持原画面比例会多裁到一点实际画面 (不是很确定，待确认)\n\n“crop black bars”：勾选后会把片源视为裁切黑边后的分辨率跟宽高比例去处理，会影响到profile的判定(如果有设置的话)\n\n**请注意，如果你觉得影片有被切的怪怪的情形发生时，请先把zoom control底下的选项都先全部取消勾选看看**\n\n### image enhancements\n\n接下来到image enhancements这项，**这个选项是针对影片本身锐利度不足的片源，经由勾选的算法进行锐利化处理，其处理是在放大演算之前(pre-processing)**，所以对于1:1呈现的影像也有效果。在这边，不论选择哪一种算法，锐化的效果都相当显著，但相对的，片源中的缺陷(噪声)也很容易被凸显出来，跟后面的upscaling refinement(post-processing)比较起来，同样的锐化算法，副作用也会更明显，故**不建议当作常驻选项。**这边建议是制作Profile，像下图那样，第一个Profile是常驻，不勾选任何锐化算法的，其他Profile则有开锐化算法，并设定热键，视片源需要用热键来开启锐化算法。\n\n<img width=\"690\" height=\"429\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/17df68b860544f9bb27950c6911cf6be.jpg\" class=\"jop-noMdConv\">\n\n关于image enhancements的锐化算法，理论上是越干净的片源越适合开，而且应该是有需要才开，有些片源锐化后整体观感不见得比较好。如果片源不够干净，你觉得有需要锐化，也可以开，自行取舍，看锐利度跟细节的提升愿不愿意用画面噪声或是锯齿变多这个代价去换。个别算法的简介到upscaling refinement那边一起写。\n\n### artifact removal\n\n接下来到artifact removal这项\n\n“reduce banding artifact”\n\nbanding，即色阶断层或称色带， google一下就能看到一堆范例图了，这个选项是debanding(去色阶断层)功能，ffdshow video decoder里面也有个\"去断层\"，跟这个基本上是一样的作用，但madVR的debanding因为处理的精度更高，侦测像素变化的机制更好，故效果会比ffdshow video decoder里面的去断层更好，使用这个的话就不需要再使用ffdshow video decoder的去断层了。\n\n第一个选项是一般画面的debanding强度，第二个选项是光影淡入淡出时的debanding强度，建议设置如下，保持在low就有不错的效果，或是第二个选项可以选择medium或high，因为光影淡入淡出是比较容易出现banding的地方，但基本上还是看片源而定。越高的设定有越好的debanding效果，不过相对的也可能损失一些画面细节。\n\n这个选项会吃掉一些显卡效能，但不会太多，显卡不差的话建议常时保持在low，有一定的debanding效果，而且几乎不会吃到画面细节。\n\n不过对于一些4K\"原生\"10bit以上的影片而言，比较不容易出现banding，这个选项就不需要开，可以省下一些效能，像我自己是设一个profile让它播放4K 10bit的影片时不启用\n\n<img width=\"690\" height=\"433\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/b9288f0318004f3aa45b7400e68f59fe.jpg\" class=\"jop-noMdConv\"> <img width=\"690\" height=\"433\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/fa7ca91727334f9aaff7667453926e84.jpg\" class=\"jop-noMdConv\">\n\n这边也简单讨论一下banding，维基上有个简介：\n\n[色彩带 - 维基百科，自由的百科全书 (wikipedia.org)](https://zh.wikipedia.org/wiki/色彩帶)\n\n基本上，我们现在可以取得的大部分片源，包括BD，或电视台播送的讯号，RGB都是只有8bit的色深而已，也就是说，电影母带在制作成BD时就可能会有banding产生了。再来，如果我们对BD或电视讯号再进行压制编码，由于流量或色深的不足，这个过程也可能再产生banding(这也是为何现在有人喜欢用10bit压制影片的原因，因为在同量的流量下可以很好的抑制banding的产生)。再来，影片都是以YUV色域储存的，在计算机上播放时还必须经过YUV→RGB的转换以及Y/C伸张(16~235伸张成0~255)，这个转换的过程如果精度不够高也可能产生banding，而madVR本身的高精度转换和dithered输出就很好的避免了这个步骤下banding的产生，但别忘了我们无法控制来自片源的banding，所以madVR才又加入debanding的算法来进一步消灭掉所有的banding问题，这也是为何我会建议把这个选项常时开启的原因，就算是观看BD原盘它还是有作用在的。\n\n这边提供一个测试影片：\n\n[梯度-2k (mediafire.com)](https://www.mediafire.com/file/4ubjm6jjbsz8dct/Gradient-2k.mp4/file)\n\n各位可以试试看在EVR-CP底下关闭全浮点运算、EVR-CP开启全浮点运算、madVR默认值、madVR启用debanding这四种状况来比较banding的差异，基本上第一种情形banding最明显，第二、第三种会有接近的结果，第四种则几乎没有banding了，色阶的过渡会非常平滑。\n\n这边也提供一个madVR的debanding改善压制过程产生的banding的范例，看到以下四张图片(点图放大)：\n\nmadVR无开启debanding，可发现渣介脸上有明显条纹\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/7b8e5b0046e64c8ab5624d295f718c49.jpg\" class=\"jop-noMdConv\">\n\n开启debanding，low\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/477cdcb3bb194dd29bfa67284843ea72.jpg\" class=\"jop-noMdConv\">\n\n开启debanding，medium\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/f3f4cd23a46d41d2acec3166e9be3670.jpg\" class=\"jop-noMdConv\">\n\n开启debanding，high\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/d1e84c4f53f24547a340fbb8540dd9f4.jpg\" class=\"jop-noMdConv\">\n\n可见low就有不错的效果了，诸如此类各位可自行测试，针对不同的片源，善用热键或是profile来设置必要的debanding强度。(profile的使用方法我PO在另一篇文中介绍)\n\n而下面的\"reduce ringing artifects\"，要先认识一下ringing，详细请看WIKI：\n\n[振铃效应 - 维基百科，自由的百科全书 (wikipedia.org)](https://zh.wikipedia.org/wiki/振鈴效應)\n\nmadVR里的众多算法，很多都有搭配anti-ringing滤镜，就是为了抑制这个震铃效应。而这边这个选项，则是为了处理**影片本身就存在的ringing**，影片会有ringing出现，通常是高分辨率的母片在后制成较低分辨率的产品输出时(例如DVD)，使用了较差的降频算法时产生的。**这个选项比较没必要常驻开启，而是明显观察到影片上有ringing时再开就好了(可设定热键)**。下面的子选项，“reduce dark halos around bright edges, too”，是针对明亮物体边缘的深色系光环(这类似乎在黑白电影比较常见)，这选项不适用在动画类。\n\n以下是一组有明显ringing的例子，跟deringing后的效果(点图放大)：\n\n原图\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/f4179bd4fc7c4bda86adeef49bbf648b.jpg\" class=\"jop-noMdConv\">\n\nderinging\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/c2d50b9fd6e64508a46f761419bf26d8.jpg\" class=\"jop-noMdConv\">\n\n接下来看到\"reduce compression artifacts\"，以下简称RCA，此项作用为去除压缩失真，严格来说它具备有去除区块失真(deblocking)、画面噪声跟噪点的作用，但缺点就是可能会对画面细节造成破坏，故不建议常驻使用，建议设置热键在需要时手动开启即可。其可调强度为1~14，强度越高，画面净化效果越强，但相对的画面细节也会被抹去越多，画面可能变的平面化，失去立体感，因此使用上需注意，建议在画面净化效果可接受的情况下尽可能选择较低的强度。以个人经验来说，真人影片类大部分开1~6之间即可，动画类6~10之间，但这非准则，实际仍要视当下片源状况而定，有些干净的片源根本不需要开，有些则是开了发现细节被破坏，这时就必须降低强度，有些片源噪声失真非常严重，这时就需要增加强度。\n\nqualily的部分，则是处理的质量，very high的质量最好，能够更精确的判断噪声跟细节，high次之，依此类推，但从high到very high所增加的效能消耗非常多，而且跟影片放大的目标分辨率成正比，须注意。(如果不搭配NGU sharp使用的话，建议开到high就好)\n\n底下子选项\"process chroma channels, too\"，如果勾选的话，RCA也会在chroma升频时介入处理，但会消耗较多的效能，而且chroma升频时做RCA的效果并不明显，因此并不建议勾选此选项。(这项不勾选的时候，RCA就只有在luma升频时才会介入，因此影片1:1播放时就不会有RCA的效果)\n\n子选项\"activate only if it comes for free(as part of NGU sharp)\"，**这项勾选的话则RCA将只有在升频算法使用NGU sharp的时候启用后才会有作用，但是完全不会增加任何额外的效能消耗**，勾选后qualily的部分视NGU sharp的运算强度是使用low、normal、high还是very high，而自动对应，但是不管如何对应，RCA的部分都不会增加额外效能消耗，**因此如果升频算法使用NGU sharp的话强烈建议勾选此选项，但如果升频算法不是用NGU sharp的话则不要勾选，否则RCA启用后也不会有作用。**\n\n最后是\"reduce random noise\"，以下简称RNN，此项作用为去除粒状噪声跟噪点(denoise)，其去除噪点的效果比上面的\"reduce compression artifacts\"还要显著许多，但相对的也更容易破坏画面细节，因此一样不建议常驻使用，建议设置热键在需要时手动开启即可。其可调强度为1~10，强度越高，去噪点效果越强，但画面细节破坏也越严重，须谨慎使用。\n\n子选项\"process chroma channels, too\"的部分同RCA\n\n以下提供一些RCA跟RRN的效果范例：\n\n640x480→1440x1080 NGU-sharp (点击放大)\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/dd41010a5e774f86863f67395ff9eafe.jpg\" class=\"jop-noMdConv\">\n\n640x480→1440x1080 NGU-sharp+RCA 5 (点击放大)\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/6852380bb2b247b087a78c46a828ae7e.jpg\" class=\"jop-noMdConv\">\n\n640x480→1440x1080 NGU-sharp+RRN 3 (点击放大)\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/4a1e959dd71940d9ae13bcf1c7a1fffa.jpg\" class=\"jop-noMdConv\">\n\n640x480→1440x1080 NGU-sharp (点击放大)\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/3668fefac3ba4ce794b349d34d19dcf3.jpg\" class=\"jop-noMdConv\">\n\n640x480→1440x1080 NGU-sharp+RCA 5 (点击放大)\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/1f3534ee2dba4b7dbe376b83230ece65.jpg\" class=\"jop-noMdConv\">\n\n640x480→1440x1080 NGU-sharp+RRN 3 (点击放大)\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/d78a96c5d93046e491c68415bcca3010.jpg\" class=\"jop-noMdConv\">\n\n1280x720→1920x1080 NGU-sharp(点击放大)\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/397e34eaede04693aa1c129befe789fd.jpg\" class=\"jop-noMdConv\">\n\n1280x720→1920x1080NGU-sharp+RCA 6 (点击放大)\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/38e8acf5c8c245feb5b006ecdf467f24.jpg\" class=\"jop-noMdConv\">\n\n1280x720→1920x1080NGU-sharp+RCA 8 (点击放大)\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/96aef4971d544679b2465c231a65bc23.jpg\" class=\"jop-noMdConv\">\n\n1280x720→1920x1080NGU-sharp+RCA 10 (点击放大)\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/a0fad5a505364322bba22a33d460bd77.jpg\" class=\"jop-noMdConv\">\n\n1280x720→1920x1080NGU-sharp+RCA 14 (点击放大)\n\n<img width=\"690\" height=\"388\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/6b858b83416447319ccc90dc092dbe14.jpg\" class=\"jop-noMdConv\">\n\n### 选项热键设置\n\n另外介绍一下这边热键设置的几种方法\n\n<img width=\"690\" height=\"433\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/b2b0115cb15443db966c9821d9a9e3c4.jpg\" class=\"jop-noMdConv\">\n\n第一，可以到keyboard shortcuts底下，找到我圈起来的那几项，会调到的几项，后面自己输入习惯的热键\n\n- debanding - toggle strength (debanding强度切换)\n\n- debanding - toggle on/off (debanding开关)\n\n- debanding custom settings - toggle (debanding自定义参数切换)\n\n- deringing - toggle (deringing开关)\n\n- deblocking - toggle (RCA开关)\n\n- deblocking strength - increase (RCA强度增加)\n\n- deblocking strength - decrease (RCA强度降低)\n\n- denoise - toggle (RRN开关)\n\n- denoise strength - increase (RRN强度增加)\n\n- denoise strength - decrease (RRN强度降低)\n\n第二，设置profile，并以组别设置热键方便快速切换，并搭配上面的强度热键快速调整，例如下图，我设置了\"Tab\"跟\"Back\"两个热键来快速切换两组profile：\n\n<img width=\"690\" height=\"433\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/77f71582eff24b3e92b1ca53b31a5c08.jpg\" class=\"jop-noMdConv\"> <img width=\"690\" height=\"433\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/8e1f1f84ec024b7898b78bacada1bb9c.jpg\" class=\"jop-noMdConv\"><img width=\"690\" height=\"433\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/17/8b3d92b0ff80485d87a14c4a57c7a888.jpg\" class=\"jop-noMdConv\">\n\n\n\n{% note green 'fas fa-rocket' %}\n\n下篇 {% post_link 最强渲染器madVR-使用指南（下篇） ' ⚡️ 最强渲染器madVR-使用指南（下篇）'  %}\n\n{% endnote %}\n","tags":["转载","madvr","影音相关"],"categories":["Course"]},{"title":"GitHub Pages 加速教程","url":"/undefined/6d841ea9.html","content":"\n## Netlify\n\n> github pages vs netlify\n\nGithub Pages为Github提供的一项静态站点托管服务，它直接从Github仓库获取静态文件进行发布，然后提供一个`github.io`的二级域名供用户访问，支持绑定自定义域名，支持开启HTTPS，开启HTTPS会自动申请证书同时在证书过期前自动续签，这一切都是**免费**的，使用极其简单，只需要将你的静态文件提交到Github，然后开启Pages服务即可，[我的博客](https://ops-coffee.cn/)就托管于Github Pages\n\nGithub Pages免费且稳定的服务让我可以专注内容，而无需考虑成本及维护的问题，非常方便广受好评，但其最大的一个问题就是国内访问速度很慢，如何简单快速又低成本的解决这个问题呢？这里介绍一个服务：Netlify\n\nNetlify是一家提供静态网站托管的综合平台，支持自动从Github等仓库拉取代码并构建成静态网站进行发布，同时也支持自定义域名，自动申请SSL证书等功能，更为重要的是自动启用**CDN加速**，国内访问速度要快很多\n\n以下分别是Github Pages和Netlify两个平台同一项目请求速度的对比图\n\n![img](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/16/20200313.01.png)\n\n从上图的测试结果可以看出国内各地的访问速度Netlify都能完胜，接下来详细介绍下如何通过Netlify给你的Github Pages加速\n\n### 部署\n\n打开[Netlify官网](https://www.netlify.com/)，点击右上角的`Sign up`注册账号，这里推荐关联Github账号\n\n![img](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/16/20200313.02.png)\n\n关联认证后进入Netlify的后台页面，如下图，点击`New site from Git`\n\n![img](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/16/20200313.03.png)\n\n选择网站源码托管的代码仓库类型，支持Github、Gitlab以及Bitbucket，选择`GitHub`\n\n![img](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/16/20200313.04.png)\n\n然后会进入Github的认证授权页面，点击`Authorize Netlify by Netlify`\n\n![img](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/16/20200313.05.png)\n\n点击`Only select repositories`选择要授权的Github仓库，当然也可以直接选择授权所有仓库，这个授权在设置中可以改\n\n![img](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/16/20200313.06.png)\n\n授权完成回到Netlify后台页面，选择我们刚刚授权的Github仓库继续\n\n![img](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/16/20200313.07.png)\n\n选择部署的用户以及分支，如果是一些需要编译的项目，还支持定义编译的命令以及最终发布的目录，纯静态网站的话都不需要填写，直接点击`Deploy site`即可完成部署\n\n![img](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/16/20200313.08.png)\n\n部署完成后，Netlify会自动生成一个随机的二级域名`xxx.netlify.com`，我们可以修改为自定义的二级域名，点击`Site Settings`\n\n![img](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/16/20200313.09.png)\n\nGeneral -> Site details下点击`Change site name`，可以为这个站点设置一个自定义的名字，二级域名也会相应改变\n\n![img](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/16/20200313.10.png)\n\n### 自定义域名\n\n如果你想绑定自己的域名，需要先在域名管理系统里新建解析，将域名CNAME指向到你的netlify二级域名，以阿里云为例如下\n\n![img](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/16/20200313.11.png)\n\n然后进入Netlify管理后台，Domain management -> Domains，点击`Add domain alias`，填入你的自定义域名\n\n![img](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/16/20200313.12.png)\n\n待域名解析生效后就会看到新绑定的域名变为绿色，并且设置为了主域名\n\n![img](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/16/20200313.13.png)\n\n最后为自定义域名开启HTTPS支持，Domain management -> HTTPS，点击`Verify DNS configuration`，域名验证通过则会自动申请证书\n\n![img](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/16/20200313.14.png)\n\n至此Netlify与Github绑定完成，可以通过自定义域名访问网站了，之后你每一次提交代码到Github，便会**自动**发布至Netlify，无需额外操作，非常方便\n\n### 其他说明\n\n如果你是主域名要绑定Netlify，且必须使用A记录的话，可以直接ping一下你的Netlify二级域名地址得到的IP便可以作为域名解析，例如我的域名是`ops-coffee.netlify.com`，ping之后得到的地址是`157.230.35.153`，可以多ping几次得到不同的地址，都绑定到域名上以防止单节点故障\n\n国内也有类似于Github pages这样的服务，例如Gitee和Coding提供的pages服务，在速度方面要有不少的优势，但稳定性欠佳，且可能会面临层层审查域名备案等问题\n\n如果你的域名有备案，项目又是纯静态的话还可以考虑直接托管在国内的一些对象存储服务上，例如七牛云、腾讯云等，然后开启CDN加速，效果也不错，并且大多都有免费流量可以使用\n\nGithub Pages和Netlify这种免费且可高度自定义的方案，在满足我们个性化需求的同时，省去了维护成本和资金压力，可以让站点活得更久，从而让我们把重点放在持续不断的输出内容，形成良性循环，赶紧试试吧\n\n## Vercel\n\n> **本文作者：** DIYsay\n> **本文链接：** https://diysay.cn/posts/2418998582.html\n> **版权声明：** 本博客所有文章除特别声明外，均采用 [CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/) 许可协议。转载请注明出处！\n\nGitHub Pages速度并不理想，利用Vercel拉取能达到更好的效果！\n![vercel1](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/16/vercel1.png)\n\n\n\n### 注册GitHub账号\n\n你能来看这篇文章说明你肯定有了，水字…\n\n### 使用GitHub账号登录Vercel\n\n进入Vercel官网：https://vercel.com/ ，依次点击 `sign up` - `Continue with GitHub`\n![vercel2](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/16/vercel2.png)\n如果出现下图所示情况，请将GitHub主邮箱更改为非QQ邮箱（不知道是不是QQ邮箱问题，反正没用QQ邮箱就正常了）。\n![vercel3](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/16/vercel3.png)\n\n### 导入Git仓库\n\n选择 `Import Git Repository` 然后 `Continue` 输入你仓库的url就行了（https）\n![vercel4](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/16/vercel4.png)\n\n### 自定义域名\n\n选择你的项目卡片进入项目，依次点击`Settings`-`Domains` 输入你的域名 Add添加\n![vercel5](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/2021/06/16/vercel5.png)\n然后解析域名：\n\n- 根域名推荐：记录类型：`A` 记录值：`76.76.21.21`\n- 子域名推荐：记录类型：`CNAME` 记录值：`cname.vercel-dns.com`\n\n他会自动验证域名，启用ssl，重定向啥的都支持，自己编辑添加的那条记录就能看到。\n\n### 后话\n\n推送至 master 分支，yaml示例代码：\n\n```\ndeploy:\n  type: git\n  repo:\n    github: 你GitHub的ssh协议 Clone\n  branch: master\n```\n\n更新的话，你直接推送代码到GitHub就行，Vercel会自动拉取\n`To update your Production Deployment, push to the \"master\" branch.`\n","tags":["blog","Hexo","转载"],"categories":["工具"]},{"title":"PicGo+GitHub 图床搭建","url":"/undefined/6d798241.html","content":"\n> 来源: Luckey\n> 文章作者: Luckey\n> 文章链接: http://luckyzmj.cn/posts/7a46f93c.html\n> 本文章著作权归作者所有，任何形式的转载都请注明出处。\n\n### 前言\n\n用GitHub搭建图床，在很久之前我就有了解，但由于市面上有挺多免费的图床，比如我之前一直在用的 路过图床，所以一直懒得动手搭建GitHub图床。一直到前两天我在完善博客的相册时，发现 路过图床 免费版的有这么多限制，比如：每小时限制上传50张图片，每天限制上传100张图片，而且免费版用户的存储容量貌似不过300M，这才意识到有一个自己的GitHub图床是多么重要。\n\n### PicGO 介绍\n\nPicGo是一款图片上传工具，目前支持 SM.MS图床、腾讯云COS、GitHub图床、七牛图床、Imgur图床、阿里云OSS、又拍云图床，未来将支持更多图床。\n\n在支持的这些图床中，SM.MS和Imgur有免费版和收费版，免费版的肯定有很多的使用限制，比如每小时限制上传次数，限制用户的上传容量等等；腾讯云COS、阿里云、有拍云都是要收费使用的；七牛云貌似前期使用免费，后期又要收费才能使用，就剩下的GitHub才是免费且最可靠的。\n\nPicGo源项目GitHub地址已给出，但是去GitHub下载速度非常慢，这里额外提供一个蓝奏云的快速下载地址。\n\n- GitHub地址：https://github.com/Molunerfinn/PicGo\n- 蓝奏云地址：https://luckyzmj.lanzous.com/id3e0id\n\n### GitHub 图床\n\n#### 1. 创建GitHub图床仓库\n\n首先需要有一个登录GitHub的账号，没有的话去[GitHub官网](https://github.com/)注册一个\n\n创建一个新的图床仓库，点击右上角的New repository\n\n\n\n![img](https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529155833.png)\n\n\n\n填写如下配置信息，然后Create创建仓库\n\n\n\n![img](https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529160010.png)\n\n\n\n#### 2. 获取GitHub token值\n\n点击右上的头像，选择设置Setting\n\n\n\n![img](https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529160727.png)\n\n\n\n点击选择Developer settings\n\n\n\n![img](https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529160939.png)\n\n\n\n点击 Generate New token\n\n\n\n![img](https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529161241.png)\n\n\n\n填写如下配置信息，只要勾选repo选项即可，然后页面拉到底部点击Generate token 即可\n\n\n\n![img](https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529161716.png)\n\n\n\n此时会跳转到带有token的页面，将token值复制记录下来，之后用PicGo绑定GitHub图床时会利用到\n\n\n\n![img](https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529162127.png)\n\n\n\n### PicGo 配置\n\n#### 1. 绑定GitHub图床\n\n首先下载安装好PicGo软件，然后在右列表找到GitHub图床配置\n\n\n\n![img](https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529163130.png)\n\n\n\n**1. 设定仓库名(必填)：**\n\n按照“GitHub账户名/仓库名的格式填写”，比如我的是：Luckyzmj/imgbed\n\n**2. 设定分支名(必填)：**\n\n仓库分支名填写”master”或者”main”，视情况而定。因为GitHub 官方表示,从2020年10月1日起,在该平台上创建的所有新的源代码仓库将默认被命名为”main”,而不是原先的”master”。\n\n**3. 设定Token(必填)：**\n\n将之前步骤的Token值复制粘贴到这里\n\n**4. 指定存储路径：**\n\n这个选项可以为空，如果想将图片上传到仓库的指定目录下，可以填写目录名加/，比如我的imgbed仓库下有个posts文件夹，需设置为 posts/\n\n**5. 设定自定义域名：**\n\n这里统一用jsdelivr的CDN加速域名，在上传图片后成功后，PicGo会将“自定义域名+上传的图片名”生成的访问链接\n\n```none\n自定义域名格式：https://cdn.jsdelivr.net/gh/GitHub账户名/仓库名\n以我的格式为例：https://cdn.jsdelivr.net/gh/Luckyzmj/imgbed\n```\n\n配置完全部信息后，点击 设为默认图床，最后点击确定即可\n\n#### 2. 上传图片到图床\n\n在上传区上传图片，可支持本地图片上传(可多选图片)、剪贴板上传、URL上传等三种方式。上传图片成功后，选择你想要生成的图片链接格式\n\n\n\n![img](https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529170555.png)\n\n\n\n在图片区，可以看到成功上传的图片，选择相应的图片进行操作即可\n\n\n\n![img](https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/posts/20200529170831.png)\n\n\n\n#### 3. PicGo 注意事项\n\n如果配置完PicGo后却上传图片失败，可以参考以下方法：\n\n1. 检查自定义域名是否正确\n2. 仓库名不要有空格\n3. 图片名字不要带有特殊符号，如：%、+、*、空格等\n4. 建议开启时间戳重命名，防止图片名字重复\n5. 上传图片间歇太短，需在PicGo设置中关闭Server选项\n6. PicGo应用不稳定因素，需重启应用\n\n### 参考文章\n\n- https://blog.csdn.net/sunhwee/article/details/100109956\n\n","tags":["blog","转载","github","图床"],"categories":["工具"]},{"title":"Hexo 上的豆瓣、哔哩哔哩和 Steam 插件","url":"/undefined/7e42bc76.html","content":"\n\n\n## 增加豆瓣书/影单\n\n### 1. 安装模块依赖\n\n   在cmd中输入命令：\n\n   ```bash\n   npm install hexo-douban --save\n   ```\n\n### 2. 添加配置\n\n   在**Hexo配置文件**添加配置：\n\n   ```yaml\n   #豆瓣插件\n   douban: \n     user: 218060495  #这个需要修改为你个人的id\n     builtin: false\n     dynamic: false\n     item_per_page: 10\n     meta_max_line: 4\n     customize_layout: page\n     swup: false\n     book:\n       path: books/index.html\n       title: \"This is my book title\"\n       quote: \"This is my book quote\"\n       actions:\n         - do\n         - wish\n         - collect\n       option:\n     movie:\n       path: movies/index.html\n       title: \"This is my movie title\"\n       quote: \"This is my movie quote\"\n       actions:\n         - do\n         - wish\n         - collect\n       option:\n     game:\n       path: games/index.html\n       title: \"This is my game title\"\n       quote: \"This is my game quote\"\n       actions:\n         - do\n         - wish\n         - collect\n       option:\n     song:\n       path: songs/index.html\n       title: \"This is my song title\"\n       quote: \"This is my song quote\"\n       actions:\n         - do\n         - wish\n         - collect\n       option:\n   ```\n\n   其中可以添加别的类别~参数说明：\n\n   - **id**: 你的豆瓣 ID(纯数字格式，不是自定义的域名)。获取方法可以参考[怎样获取豆瓣的数字 ID ？](https://www.zhihu.com/question/19634899)\n- **builtin**: 是否将 `hexo douban` 命令默认嵌入进 `hexo g`、`hexo s`，使其自动执行`hexo douban` 命令。默认关闭。\n- **dynamic**: 豆瓣页面是否在访问时实时请求接口。默认为 false，表示页面信息会在执行 hexo douban 命令时更新，优点是生成的页面不会受到后续接口可用性的影响，缺点是需要手动更新。如果设置为 true ，则会在页面访问时实时调用接口进行渲染，无需执行 hexo douban 命令更新页面，但是代价就是如果接口挂了，页面就会 G。\n- **item_per_page**: 每页展示的条目数，默认 10 。\n- **meta_max_line**: 每个条目展示的详细信息的最大行数，超过该行数则会以 \"...\" 省略，默认 4 。\n- **customize_layout**: 自定义布局文件。默认值为 page 。无特别需要，留空即可。若配置为 `abcd`，则表示指定 `//theme/hexo-theme/layout/abcd.ejs` 文件渲染豆瓣页面。\n- **swup**: 是否兼容 [swup](https://swup.js.org/plugins/scripts-plugin/) 。支持 script 热加载，解决一些 single-page 主题的加载问题，默认 false 。\n- **path**: 生成页面后的路径，默认生成在 //yourblog/books/index.html 等下面。如需自定义路径，则可以修改这里。\n- **title**: 该页面的标题。\n- **quote**: 写在页面开头的一段话，支持 html 语法，可以为空。\n- **actions**: 一个字符串列表，表示生成的页面中的 \"已 X\"，\"想 X\",\"X 过\"的标签配置，默认会自动聚焦在第一个标签。可选项为: 'do','wish','collect'。\n- **option**: 该页面额外的 Front-matter 配置，参考 [Hexo 文档](https://hexo.io/docs/front-matter.html)。无特别需要，留空即可。\n\n   由于`hexo-douban` 是默认抓取豆瓣读书、豆瓣电影以及豆瓣游戏的，如果只想要其中一部分，可以把其它部分在上述配置文件中去掉即可。\n\n### 3. 部署\n\n   只是引入了豆瓣这个插件，但是要给它一个入口，在**主题配置文件**menu中加入下述配置，将其加入到了顶部的标签栏。\n\n   ```yaml\n   List: \n     icon: fas fa-list-ul\n     children:\n     - name: books\n       url: /books\n       icon: fas fa-book\n     - name: movies\n       url: /movies\n       icon: fas fa-film\n   ```\n\n   如果加入后不是中文，需要在主题目录下的languages中zh-CN中加入对应词单，也可以直接写中文。\n\n### 4. 适配Matery主题（可选）\n\n   在`/themes/hexo-theme-matery/layout`文件夹下面创建一个名为 `douban.ejs` 的文件，并将下面的内容复制进去：\n\n   ```javascript\n   <link rel=\"stylesheet\" type=\"text/css\" href=\"<%- theme.jsDelivr.url %><%- url_for('/css/detail/douban.css') %>\">\n   \n   <%- partial('_partial/bg-cover') %>\n   <style> \n       .hexo-douban-picture img {\n           width: 100%; \n       } \n   </style>\n   <main class=\"content\"> \n       <div id=\"contact\" class=\"container chip-container\"> \n           <div class=\"card\"> \n               <div class=\"card-content\" style=\"padding: 30px\"> \n                   <h1 style=\"margin: 10px 0 10px 0px;\"><%= page.title %></h1> \n                   <%- page.content %> \n               </div> \n           </div> \n           <div class=\"card\"> \n               <div class=\"card-content\" style=\"text-align: center\"> \n                   <h3 style=\"margin: 5px 0 5px 5px;\">如果你有好的内容推荐，欢迎在下面留言！</h3> \n               </div> \n           </div> \n           <div class=\"card\"> \n               <% if (theme.gitalk && theme.gitalk.enable) { %>\n               \t<%- partial('_partial/gitalk') %>\n               <% } %> \n               <% if (theme.gitment.enable) { %> \n               \t<%- partial('_partial/gitment') %> \n               <% } %> \n               <% if (theme.disqus.enable) { %> \n               \t<%- partial('_partial/disqus') %> \n               <% } %> \n               <% if (theme.livere && theme.livere.enable) { %> \n               \t<%- partial('_partial/livere') %> \n               <% } %> \n               <% if (theme.valine && theme.valine.enable) { %> \n               \t<%- partial('_partial/valine') %> \n               <% } %> \n           </div> \n       </div> \n   </main>\n   ```\n\n> 最后面的几个`<% if (*) { %> <% * %> <% } %>`模块，可以根据实际运用模块进行删改\n\n在  `source/css/detail` 文件夹下面创建一个名为 `douban.css` 的文件，并将下面的内容复制进去：\n\n```css\n.bg-cover {\n    background-image: url('/medias/banner/douban.jpg') !important\n}\n```\n\n然后可以去 `source/medias/banner`文件夹下面创建一个`douban.jpg`以供页面使用。\n\n之后在博客站点目录下的 `node_modules` 文件夹下找到 `hexo-douban/lib`，文件夹下有三个 js 文件，分别为：`books-generator.js` 、`games-generator.js` 、`movies-generator.js`，用文本编辑器打开这三个文件，并将其文件内容末尾的代码修改为一下内容： \n\n   ```javascript\n   /* 原文件内容为 layout: [`page`, `post`] ，将其修改为下面的内容*/\n   layout: [`page`, `douban`]\n   ```\n\n\n## 添加豆瓣书影音卡片插件\n\n### 用法\n\n首先请安装插件\n\n```bash\n$ npm install hexo-douban-card --save\n```\n\n然后使用以下语法\n\n```\n{% douban movie 24745500 %}\n\n{% douban book 30376420 %}\n\n{% douban music 35099703 %}\n```\n\n### 参数阐述\n\n- 第一项`douban` 代表插件名\n- 第二项可选:`movie`,`book`,`music`\n- 第三项请填入对应的`id`例如:\n![img](https://camo.githubusercontent.com/199eb1b7741030e127b4aa1a45b5c68f0f2eceb32c54e5662f3082930fdf3ca2/68747470733a2f2f696d672e74616e6b6e65652e636e2f626c6f677069636265642f323032302f30372f3230323030373038323135323238313665616566612e706e67)\n\n填写subject后面的那串数字就好\n\n### 示例\n\n{% douban movie 24745500 %}\n\n{% douban book 30376420 %}\n\n{% douban music 35099703 %}\n\n## Bilibili 插件使用说明\n\n### 根据官方文档安装插件\n\n> 参考[插件说明文档](https://github.com/HCLonely/hexo-bilibili-bangumi)\n\n#### 安装\n\n```bash\nnpm install hexo-bilibili-bangumi --save\n```\n\n#### 配置\n\n将下面的配置写入**站点的配置文件** `_config.yml` 里。\n\n```yaml\nbangumi:\n  enable: true # 是否启用\n  path: # 番剧页面路径，默认 bangumis/index.html\n  vmid:    # 哔哩哔哩番剧页面的 vmid(uid)\n  title: '追番列表' # 该页面的标题\n  quote: '生命不息，追番不止！' #写在页面开头的一段话，支持 html 语法，可留空\n  show: 1 # 初始显示页面：0: 想看, 1: 在看, 2: 看过，默认为1\n  loading: #  图片加载完成前的 loading 图片\n  metaColor: #  meta 部分(简介上方)字体颜色\n  color: # 简介字体颜色\n  webp: # 番剧封面使用 webp 格式(此格式在 safari 浏览器下不显示，但是图片大小可以缩小 100 倍左右), 默认 true\n  progress: # 获取番剧数据时是否显示进度条，默认 true\n```\n\n#### 使用\n\n1. `hexo new page \"bangumis\"`其 `bangumis`的 md 文档加上`type: \"bangumis\"`\n2. 添加 `uid`\n3. 在`hexo generate`或`hexo deploy`之前使用`hexo bangumi -u`命令更新番剧数据！\n4. 删除数据命令:`hexo bangumi -d`\n\n#### 获取 uid\n\n登录哔哩哔哩后前往`https://space.bilibili.com`页面，网址最后的一串数字就是 `uid`\n\n***需要将追番列表设置为公开！***\n\n#### 手动添加番剧数据\n\n因为某些番剧在哔哩哔哩上没有，但是又想在 hexo 中展示，怎么办呢？现在支持手动添加番剧数据了！\n\n在 `sources/_data/` 目录下新建文件，命名为 `extra_bangumis.json` ，并添加以如下内容:\n\n\n\n```json\n{\n  \"watchedExtra\": [\n    {\n      \"title\": \"缘之空\", \n      \"type\": \"番剧\", \n      \"area\": \"日本\", \n      \"cover\": \"https://cdn.jsdelivr.net/gh/mmdjiji/bangumis@main/Yosuga-no-Sora/cover.jpg\", \n      \"totalCount\": \"全12话\", \n      \"id\": 0,\n      \"follow\": \"不可用\", \n      \"view\": \"不可用\", \n      \"danmaku\": \"不可用\", \n      \"coin\": \"不可用\", \n      \"score\": \"不可用\", \n      \"des\": \"远离都市的田园小镇，奥木染。春日野悠带着妹妹穹，来到了这座城镇。坐落在这里的是，儿时暑假经常造访的充满回忆的已故祖父的家。双亲因意外事故而丧生，变得无依无靠...\"\n    }\n  ]\n}\n```\n\n`title` 是番剧的标题，`cover` 是封面图链接， `des` 是简介，上述字段均根据需要修改。\n\n另外除了 `watchedExtra` 数组，还可以在后面添加新的数组，可用数组名如下:\n\n| 可用数组名     | 含义 |\n| :------------- | :--- |\n| wantWatchExtra | 想看 |\n| watchingExtra  | 在看 |\n| watchedExtra   | 看过 |\n\n需要注意，在两个数组之间需要用 `,` 分隔。\n\n### 适配Matery主题（可选）\n\n> 参考[Matrey 主题增加豆瓣书/影单](https://liuruibin.com/posts/64eb.html)\n\n####  ejs 文件的创建\n\n在`/themes/hexo-theme-matery/layout`文件夹下面创建一个名为 `bangumi.ejs` 的文件，并将下面的内容复制进去：\n\n```javascript\n<link rel=\"stylesheet\" type=\"text/css\" href=\"<%- theme.jsDelivr.url %><%- url_for('/css/detail/bangumi.css') %>\">\n\n<%- partial('_partial/bg-cover') %>\n<style> \n    .bangumi-picture img { \n        width: 100%; \n    } \n</style> \n<main class=\"content\"> \n    <div id=\"contact\" class=\"container chip-container\"> \n        <div class=\"card\"> \n            <div class=\"card-content\" style=\"padding: 30px\"> \n                <h1 style=\"margin: 10px 0 10px 0px;\"><%= page.title %></h1> \n                <%- page.content %> \n            </div> \n        </div> \n        <div class=\"card\"> \n            <div class=\"card-content\" style=\"text-align: center\"> \n                <h3 style=\"margin: 5px 0 5px 5px;\">如果你有好的内容推荐，欢迎在下面留言！</h3> \n            </div> \n        </div>\n        <div class=\"card\"> \n            <% if (theme.gitalk && theme.gitalk.enable) { %>\n            \t<%- partial('_partial/gitalk') %>\n            <% } %> \n            <% if (theme.gitment.enable) { %> \n            \t<%- partial('_partial/gitment') %> \n            <% } %> \n            <% if (theme.disqus.enable) { %> \n            \t<%- partial('_partial/disqus') %> \n            <% } %> \n            <% if (theme.livere && theme.livere.enable) { %> \n            \t<%- partial('_partial/livere') %> \n            <% } %> \n            <% if (theme.valine && theme.valine.enable) { %> \n            \t<%- partial('_partial/valine') %> \n            <% } %> \n        </div> \n    </div> \n</main>\n```\n\n> 最后面的几个`<% if (*) { %> <% * %> <% } %>`模块，可以根据实际运用模块进行删改\n\n在  `source/css/detail` 文件夹下面创建一个名为 `bangumi.css` 的文件，并将下面的内容复制进去：\n```css\n.bg-cover {\n    background-image: url('/medias/banner/bangumi.jpg') !important\n}\n```\n\n\n然后可以去 `source/medias/banner`文件夹下面创建一个`bangumi.jpg`以供页面使用。\n\n#### 插件 moudle 内容修改\n\n然后在博客站点目录下的 `node_modules` 文件夹下找到 `hexo-bilibili-bangumi/lib`，用文本编辑器打开文件夹。\n\n下面两个 `js` 文件中的代码进行对应修改：\n\n```\nhexo-bilibili-bangumi\\lib\\bangumi-generator.js\nhexo-bilibili-bangumi\\src\\lib\\bangumi-generator.js\n```\n\n```javascript\nlayout: ['page', 'bangumi']\n```\n\n> 本来的代码是`layout: ['page', 'post']`\n\n## 添加 B 站视频插件\n\n### 安装 hexo-tag-bilibili\n\n切换到 Hexo 的目录，执行以下命令\n\n```bash\nnpm install --save hexo-tag-bilibili\n```\n\n### 使用\n\n在文章中用以下方式使用此插件 [av_id] 填写视频的 av 号。\n\n```plaintext\n{% bilibili [av_id] %}\n```\n\n如果有多 p，使用以下格式。[page] 为 P 号。\n\n```plaintext\n{% bilibili [av_id] [page] %}\n```\n\n( display 不能包含英文逗号，可用 `&sbquo;`)\n\n只能写 AV 号 如 `av57505556`  ，`av_id` 写 `57505556`\n\n哔哩哔哩 AV/BV 互转 https://tool.liumingye.cn/avbv/\n\n`例如`：\n\n```plaintext\n{% bilibili 884810250 %}\n```\n\n`效果`：\n\n{% bilibili 884810250 %}\n\n### 高级\n\n#### 配置\n\n你可以配置你的播放器 在 Hexo 的文件夹中，打开 `_config.yml` 文件进行配置。 你可以配置 是否`自动播放`，播放器的`大小` 等。 例如\n\n```yml\nbilibili:\n  width: 450\n  height: 100%\n```\n\nps：这插件貌似读取 `_config.yml` 值时会互换 width 和 height 值，请注意实际效果。\n\n#### Style\n\n播放器由一个带有 `bili_video` 类的 `<div>` 标签包装。你可以通过自定义的 css 文件修改它的样式。\n\n## bangumi卡片插件\n\n显示动漫小卡片，使用 Bangumi 的 API。\n\n[![img](https://camo.githubusercontent.com/0acc0ab8739afcf242c886aefa6c0aed8863e0d20fe83a8b20c6c3c6a9ac0758/68747470733a2f2f73312e617831782e636f6d2f323032302f30362f31362f4e6943467a742e706e67)](https://camo.githubusercontent.com/0acc0ab8739afcf242c886aefa6c0aed8863e0d20fe83a8b20c6c3c6a9ac0758/68747470733a2f2f73312e617831782e636f6d2f323032302f30362f31362f4e6943467a742e706e67)\n\n### Installation / 安装\n\n```bash\nnpm install hexo-tag-bangumi --save\n```\n\n### Usage / 使用方法\n\nUse tags:\n\n在 Markdown 文件中：\n\n```\n{% bangumi animeId %}\n```\n\nExample / 例子:\n\n```\n{% bangumi 216371 %}\n```\n\n之后插件会生成如下的 HTML 代码：\n\n```\n<div class=\"bangumi-anime_card\">\n    <div class=\"bangumi-info_section\">\n        <div class=\"bangumi-anime_header\">\n            <a href=\"http://lain.bgm.tv/pic/cover/l/69/28/152091_Bg7Hc.jpg\">\n                <img src=\"http://lain.bgm.tv/pic/cover/l/69/28/152091_Bg7Hc.jpg\" class=\"bangumi-locandina\">\n            </a>\n            <span id=\"hexo-bangumi-header\">吹响！悠风号 第二季</span>\n            <span id=\"hexo-bangumi-subheader\">響け！ユーフォニアム 2</span>\n            <div>\n                <span class=\"bangumi-rankspan\">排名 <span class=\"bangumi-rank\">#113</span></span>\n                <span class=\"bangumi-rankspan\"> 话数 <span class=\"bangumi-rank\">13</span></span>\n                <span class=\"bangumi-score\">8.2</span><span style=\"color:#545454\">&nbsp;力荐</span>\n            </div>\n        </div>\n        <div class=\"bangumi-anime_desc\">\n            <p class=\"bangumi-text\">吹奏乐竞赛京都府大赛。在那里漂亮地取得金奖的北宇治高中吹奏乐部，向着下一个舞台・强豪云集的关西大赛发起挑战！</p>\n        </div>\n    </div>\n    <div class=\"bangumi-blur_back\" style=\"background: url(http://lain.bgm.tv/pic/cover/l/69/28/152091_Bg7Hc.jpg); no-repeat fixed;background-size: cover;\"></div>\n</div>\n```\n\n#### 效果：\n\n{% bangumi 152091 %}\n\n{% bangumi 216371 %}\n\n#### How to get the anime id? / 如何获取 AnimeId\n\n1. Open [Bangumi](http://bangumi.tv/) website. / 打开 Bangumi。\n2. Search anime than you want to insert. / 查找你想插入的动漫。\n3. Url is like this: `http://bangumi.tv/subject/216371`. / 得到该动漫的 URL。\n4. The NUMBER is anime id. / 末尾的数字就是要在标签中填入的 ID。\n\n### Options / 参数设置\n\nBy modifying the `_config.yml` file under the Hexo root directory.\n\n在 `_config.yml` 中添加如下 Option 可以自定义 CSS 地址。\n\n```\nbangumis:\n  css: https://.../css/hexo-tag-bangumi.css\n```\n\nThe default css address is:\n\nhttps://cdn.jsdelivr.net/npm/hexo-tag-bangumi/hexo-tag-bangumi.css\n\n默认 CSS 地址为 jsdelivr 的 CDN。\n\n### Style / 样式\n\nThe default css style used [Simone Bernabè](https://codepen.io/simoberny/):\n\n默认 CSS 样式使用了 Simone Bernabè 在 CodePen 上发布的 Movie Card 样式。\n\n- [View in CodePen](https://codepen.io/simoberny/pen/WMMqwL)\n\n### API\n\nThe Hexo plugin used official API by [bangumi](https://github.com/bangumi/api), It's Powerful!\n\nAPI 是 Bangumi 自家的公开 API。\n\n## 为Hexo添加Steam游戏库页面\n\n### 安装\n\n```bash\nnpm install hexo-steam-games --save\n```\n\n------\n\n### 配置\n\n将下面的配置写入站点的配置文件 `_config.yml` 里(不是主题的配置文件).\n\n```yaml\nsteam:\n  enable: true\n  steamId: '*****' #steam 64位Id\n  apiKey: '*****' #steam api key\n  steamInfos: # 多账号配置\n    - id: '*****' #steam 64位Id\n      path: # 为每个帐号游戏库单独配置页面路径，默认`steamgames/{steamId}/index.html`\n      ... # 兼容以下配置项\n    - id: '*****'\n      ...\n  freeGames: true\n  path:\n  title: Steam游戏库\n  quote: '+1+1+1+1+1'\n  tab: recent\n  length: 1000\n  imgUrl: '*****'\n  proxy:\n    host:\n    port:\n  extra_options:\n    key: value\n```\n\n- **enable**: 是否启用\n\n- **apiKey**: Steam 网页 API Key(新版需要 API Key 才能获取到游戏信息，[点此](https://steamcommunity.com/dev/apikey)注册 API Key)，或者手动获取游戏库数据\n\n- **steamId**: steam 64 位Id(需要放在引号里面，不然会有BUG),***需要将 steam 库设置为公开！***\n\n- **steamInfos**: 多账号配置\n\n- **path**: 游戏页面路径，默认 `steamgames/index.html`\n\n- **title**: 该页面的标题\n\n- **quote**: 写在页面开头的一段话，支持 html 语法\n\n- **tab**: `all`或`recent`, `all: 所有游戏`, `recent: 最近游玩的游戏`\n\n- **length**: 要显示游戏的数量，游戏太多的话可以限制一下\n\n- **imgUrl**: 图片链接，在 `quote` 下面放一张图片，图片链接到 Steam 个人资料，可留空\n\n- proxy\n\n  : 如果无法访问 steam 社区的话请使用代理\n\n  - **host**: 代理 ip 或域名\n  - **port**: 代理端口\n\n- **extra_options**: 此配置会扩展到 Hexo 的 `page` 变量中\n\n### 适配Matery主题（可选）\n\n在`/themes/hexo-theme-matery/layout`文件夹下面创建一个名为 `steamgames.ejs` 的文件，并将下面的内容复制进去：\n\n```javascript\n<link rel=\"stylesheet\" type=\"text/css\" href=\"<%- theme.jsDelivr.url %><%- url_for('/css/detail/steamgames.css') %>\">\n\n<%- partial('_partial/bg-cover') %>\n<style> \n    .bangumi-picture img { \n        width: 100%; \n    } \n</style> \n<main class=\"content\"> \n    <div id=\"contact\" class=\"container chip-container\"> \n        <div class=\"card\"> \n            <div class=\"card-content\" style=\"padding: 30px\"> \n                <h1 style=\"margin: 10px 0 10px 0px;\"><%= page.title %></h1> \n                <%- page.content %> \n            </div> \n        </div> \n        <div class=\"card\"> \n            <div class=\"card-content\" style=\"text-align: center\"> \n                <h3 style=\"margin: 5px 0 5px 5px;\">如果你有好的内容推荐，欢迎在下面留言！</h3> \n            </div> \n        </div>\n        <div class=\"card\"> \n            <% if (theme.gitalk && theme.gitalk.enable) { %>\n            \t<%- partial('_partial/gitalk') %>\n            <% } %> \n            <% if (theme.gitment.enable) { %> \n            \t<%- partial('_partial/gitment') %> \n            <% } %> \n            <% if (theme.disqus.enable) { %> \n            \t<%- partial('_partial/disqus') %> \n            <% } %> \n            <% if (theme.livere && theme.livere.enable) { %> \n            \t<%- partial('_partial/livere') %> \n            <% } %> \n            <% if (theme.valine && theme.valine.enable) { %> \n            \t<%- partial('_partial/valine') %> \n            <% } %> \n        </div> \n    </div> \n</main>\n```\n\n> 最后面的几个`<% if (*) { %> <% * %> <% } %>`模块，可以根据实际运用模块进行删改\n\n在  `source/css/detail` 文件夹下面创建一个名为 `steamgames.css` 的文件，并将下面的内容复制进去：\n\n```css\n.bg-cover {\n    background-image: url('/medias/banner/steam.jpg') !important\n}\n```\n\n然后可以去 `source/medias/banner`文件夹下面创建一个`steam.jpg`以供页面使用。\n\n之后在博客站点目录下的 `node_modules` 文件夹下找到 `hexo-steam-games/lib`，找到`steam-games-generator.js` 文件，用文本编辑器打开并将其文件内容末尾的代码修改为一下内容：  \n\n   ```javascript\n/* 原文件内容为 layout: [`page`, `post`] ，将其修改为下面的内容*/\nlayout: [`page`, `steamgames`]\n   ```\n\n### 使用\n\n1. 在`hexo generate`或`hexo deploy`之前使用`hexo steam -u`命令更新steam游戏库数据！\n2. 删除游戏库数据指令:`hexo steam -d`\n\n### 手动获取游戏库数据\n\n如果`hexo steam -u`命令一直获取游戏库数据失败，可以用以下方法手动获取游戏库数据：\n\n1. 浏览器打开`https://steamcommunity.com/profiles/{steamId}/games?tab={tab}`, `{steamId}`和`{tab}`分别替换为上面配置中提到的`steamId`和`tab`\n\n2. 网页加载完成后，打开浏览器控制台，按`F12`，输入以下代码并回车：\n\n   ```javascript\n   let script = jQuery('script[language=\"javascript\"]');\n   var games = [];\n   for (let i = 0; i < script.length; i++) {\n     if (script.eq(i).html().includes(\"rgGames\")) {\n       let rgGames = script.eq(i).html().match(/var.*?rgGames.*?=.*?(\\[[\\w\\W]*?\\}\\}\\]);/);\n       if (rgGames) {\n         games = JSON.parse(rgGames[1]);\n         break;\n       }\n     }\n   }\n   document.write(JSON.stringify(games))\n   ```\n\n3. 将生成的内容复制到`博客根目录/node_modules/hexo-steam-games/data/games.json`文件内，如果没有对应的文件或目录，请自行创建\n\n用于在Hexo博客中嵌入steam游戏。\n\n\n\n## Steamgame卡片插件\n\n### 安装\n\n```bash\nnpm install hexo-tag-steamgame --save\n```\n\n### 使用方法\n\n- 嵌入单个游戏\n\n```\n{% steamgame appid description %}\n```\n\n- 批量嵌入游戏\n\n```\n{% steamgames %}\nappid\nappid\nappid\nappid\nappid\nappid\n{% endsteamgames %}\n```\n\n### 参数\n\n```\nappid: Steam 游戏 id.\ndescription(可选): 用于替换默认游戏简介。\n```\n\n### Demo\n\n**示例：**\n\n```\n{% steamgames %}\n601150\n{% endsteamgames %}\n```\n**效果：**\n\n{% steamgames %}\n601150\n{% endsteamgames %}\n","tags":["blog","Hexo"],"categories":["Hexo"]},{"title":"正则表达式","url":"/undefined/2f57a694.html","content":"\n> 转载自: [文章链接](https://baoyuzhang.github.io/2017/05/19/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/#more)\n>\n> 文章作者: baoyuzhang\n\n\n\n#正则表达式\n\n前端会遇到很多字符串验证问题，正则表达式是一个强大的字符串匹配工具，今天就来总结一下正则表达式。\n\n# （一）工具\n\n[Regexper](https://regexper.com/)：正则表达式可视化工具，看不懂的表达式放进去，帮助理解\n\n# （二）理论部分\n\n## 一、正则表达式简介\n\n正则表达式是一个强大的字符串匹配工具。\n\n### 1.匹配模式标志flags\n\n> 3 个匹配模式标志flags：标明正则表达式的行为\n\n> 一个正则表达式就是一个模式与3 个标志的组合体\n\n| 字 符 | 含 义                                                        |\n| :---- | :----------------------------------------------------------- |\n| `g`   | 执行一个全局匹配，简言之，就是要找到所有的匹配，而不是在找到一个之后就停止 |\n| `m`   | 多行匹配模式，^匹配一行的开头和字符串的开头，$匹配行的结束和字符串的结束 |\n| `i`   | 执行不区分大小写的匹配                                       |\n\n```\nvar pattern1 = /at/g; // 匹配字符串中所有\"at\"的实例\nvar pattern2 = /[bc]at/i; // 匹配第一个\"bat\"或\"cat\"，不区分大小写\nvar pattern3 = /.at/gi; // 匹配所有以\"at\"结尾的3 个字符的组合，不区分大小写\n```\n\n### 2.元字符\n\n> 与其他语言中的正则表达式类似，匹配字符串中的元字符必须转义。\n\n正则表达式中的元字符包括：( [ { \\ ^ $ | ) ? * + . ] }\n\n```\nvar pattern1 = /[bc]at/i; // 匹配第一个\"bat\"或\"cat\"，不区分大小写\nvar pattern2 = /\\[bc\\]at/i; // 匹配第一个\" [bc]at\"，不区分大小写\nvar pattern3 = /.at/gi; // 匹配所有以\"at\"结尾的3 个字符的组合，不区分大小写\nvar pattern4 = /\\.at/gi; // 匹配所有\".at\"，不区分大小写\n```\n\n### 3.创建正则表达式\n\n> 有两种方法，这两种方法完全等价。\n\n#### <法一> 对象字面量\n\n- 正则表达式放在一对斜杠（/）之间\n\n```\nvar expression = / pattern / flags ;\n```\n\n#### <法二> 使用RegExp()构造函数\n\n- 2个参数（均为字符串）：要匹配的字符串模式pattern，（可选）匹配模式标志flags\n\n```\nvar pattern1 = /[bc]at/i; // 匹配第一个\"bat\"或\"cat\"，不区分大小写\nvar pattern2 = new RegExp(\"[bc]at\", \"i\"); // 与pattern1 相同，只不过是使用构造函数创建的\n```\n\n**注意！**\n\n1. 传递给RegExp 构造函数的2个参数都是字符串（不能把正则表达式字面量传递给RegExp 构造函数）\n\n2. 由于RegExp 构造函数的模式参数是字符串，所以在某些情况下要对字符进行\n\n   双重转义\n\n   ：\n\n   - 所有元字符\n   - 已经转义过的字符，例如：`\\n`（字符`\\`：在字符串中转义`\\\\`，在正则表达式字符串中双重转义`\\\\\\\\`）\n\n| 字面量模式         | 等价的字符串            |\n| :----------------- | :---------------------- |\n| `/\\[bc\\]at/`       | `\"\\\\[bc\\\\]at\"`          |\n| `/\\.at/`           | `\"\\\\.at\"`               |\n| `/name\\/age/`      | `\"name\\\\/age\"`          |\n| `/\\d.\\d{1,2}/`     | `\"\\\\d.\\\\d{1,2}\"`        |\n| `/\\w\\\\hello\\\\123/` | `\"\\\\w\\\\\\\\hello\\\\\\\\123\"` |\n\n## 二、RegExp类型\n\nEMCAScript通过RegExp类型来支持正则表达式。\n\n```\nvar reg = new RegExp(\"\\\\d{5}\",\"g\");//匹配全局模式下的5个数字\nalert(reg.test(\"1J2a35786\"));//true\nalert(reg.test(\"1J2a356\"));//false\n```\n\n**局限性**\n\n> 要了解更多相关信息，请访问[www.regular-expressions.info](http://www.regular-expressions.info/)\n\n尽管ECMAScript 中的正则表达式功能还是比较完备的，但仍然缺少某些语言（特别是Perl）所支\n持的高级正则表达式特性。下面列出了ECMAScript 正则表达式不支持的特性:\n\n- 匹配字符串开始和结尾的\\A 和\\Z 锚【但支持以插入符号（^）和美元符号（$）来匹配字符串的开始和结尾】\n- 向后查找（lookbehind）【但完全支持向前查找（lookahead）】\n- 并集和交集类\n- 原子组（atomic grouping）\n- Unicode 支持（单个字符除外，如\\uFFFF）\n- 命名的捕获组【但支持编号的捕获组】\n- s（single，单行）和x（free-spacing，无间隔）匹配模式\n- 条件匹配\n- 正则表达式注释\n\n即使存在这些限制，ECMAScript 正则表达式仍然是非常强大的，能够帮我们完成绝大多数模式匹\n配任务。\n\n### 1. RegExp构造函数属性\n\n适用于作用域中的所有正则表达式，并且基于所执行的最近一次正则表达式操作而变化。\n\n可以通过两种方式访问：长属性名、短属性名（Opera 是例外，它不支持短属性名）\n\n| 长属性名     | 短属性名             | 说 明                                                        |\n| :----------- | :------------------- | :----------------------------------------------------------- |\n| input        | $_                   | 原始字符串。Opera未实现此属性                                |\n| lastMatch    | $&                   | 最近一次与整个正则表达式匹配的项。Opera未实现此属性          |\n| lastParen    | $+                   | 最近一次匹配的捕获组。Opera未实现此属性                      |\n| leftContext  | $'                   | input字符串中lastMatch之前的文本                             |\n| multiline    | $*                   | 布尔值，表示是否所有表达式都使用多行模式。IE和Opera未实现此属性 |\n| rightContext | $’                   | Input字符串中lastMatch之后的文本                             |\n|              | RegExp.$n（1<=n<=9） | 存储第n个匹配的捕获组                                        |\n\n短属性名大多不是有效的ECMAScript 标识符，必须通过方括号语法来访问。\n\n使用这些属性可以从exec()或test()执行的操作中提取出更具体的信息：\n\n```\nvar text = \"this has been a short summer\";\nvar pattern = /(..)or(.)/g;\nif (pattern.test(text)){\nalert(RegExp.$1); //sh\nalert(RegExp.$2); //t\n}\nvar text = \"this has been a short summer\";\nvar pattern = /(.)hort/g;\n/*\n* 注意：Opera 不支持input、lastMatch、lastParen 和multiline 属性\n* Internet Explorer 不支持multiline 属性\n*/\nif (pattern.test(text)){\nalert(RegExp.input); // this has been a short summer\nalert(RegExp.leftContext); // this has been a\nalert(RegExp.rightContext); // summer\nalert(RegExp.lastMatch); // short\nalert(RegExp.lastParen); // s\nalert(RegExp.multiline); // false\n}\nvar text = \"this has been a short summer\";\nvar pattern = /(.)hort/g;\n/*\n* 注意：Opera 不支持input、lastMatch、lastParen 和multiline 属性\n* Internet Explorer 不支持multiline 属性\n*/\nif (pattern.test(text)){\nalert(RegExp.$_); // this has been a short summer\nalert(RegExp[\"$`\"]); // this has been a\nalert(RegExp[\"$'\"]); // summer\nalert(RegExp[\"$&\"]); // short\nalert(RegExp[\"$+\"]); // s\nalert(RegExp[\"$*\"]); // false\n}\n```\n\n### 2. RegExp实例属性\n\n通过这些属性可以获知一个正则表达式的各方面信息，但却没有多大用处，因为这些信息全都包含在模式声明中。\n\n| 属性名     | 类型   | 属性 | 含义                                                         |\n| :--------- | :----- | :--- | :----------------------------------------------------------- |\n| global     | 布尔值 | 只读 | 是否设置了`g`标志                                            |\n| multiline  | 布尔值 | 只读 | 是否设置了`m`标志                                            |\n| ignoreCase | 布尔值 | 只读 | 是否设置了`i`标志                                            |\n| source     | 字符串 | 只读 | 规范形式的字符串，即字面量形式所用的字符串，而非传入构造函数中的字符串模式 |\n| lastIndex  | 整数   | 只读 | 继续下一次检索的开始位置                                     |\n\n```\nvar pattern1 = /\\[bc\\]at/i;\nalert(pattern1.global); //false\nalert(pattern1.ignoreCase); //true\nalert(pattern1.multiline); //false\nalert(pattern1.lastIndex); //0\nalert(pattern1.source); //\"\\[bc\\]at\"\n\nvar pattern2 = new RegExp(\"\\\\[bc\\\\]at\", \"i\");\nalert(pattern2.global); //false\nalert(pattern2.ignoreCase); //true\nalert(pattern2.multiline); //false\nalert(pattern2.lastIndex); //0\nalert(pattern2.source); //\"\\[bc\\]at\"\n```\n\n### 3. RegExp实例方法\n\n#### a.`exec()`：查找匹配字符串和捕获组\n\n- 参数：正则表达式\n\n- 返回：由匹配项组成的数组；没有匹配项返回null\n\n  - 返回数组，第一项是与整个模式匹配\n\n    的字符串，其他项是与捕获组匹配的字符串（如果模式中没有捕获组，则该数组只包含一项）\n\n    - 假设macth()返回一个数组a，那么a[n]存放的是$n的内容：a[0]存放的是完整的匹配，a[1]存放的是第一个捕获组，以此类推。\n\n  - 返回数组属性：\n\n    - index ：匹配项在字符串中的位置\n    - input ：待解析字符串\n\n```\nvar text = \"mom and dad and baby\";\nvar pattern = /mom( and dad( and baby)?)?/gi;\nvar matches = pattern.exec(text);\nalert(matches.index); // 0\nalert(matches.input); // \"mom and dad and baby\"\nalert(matches[0]); // \"mom and dad and baby\"\nalert(matches[1]); // \" and dad and baby\"\nalert(matches[2]); // \" and baby\"\n```\n\n**说明**\n\nexec()方法：即使在模式中设置了全局标志`g`，它每次也只会返回一个匹配项：\n\n- 不设置全局标志`g`：在同一个字符串上多次调用exec()将始终返回第一个匹配项的信息：\n\n  （特例：IE 在非全局模式下，lastIndex 属性每次也会变化）\n\n  ```\n  var text = \"cat, bat, sat, fat\";\n  \n  var pattern1 = /.at/;\n  var matches = pattern1.exec(text);\n  \n  alert(matches.index); //0\n  alert(matches[0]); //cat\n  alert(pattern1.lastIndex); //0\n  matches = pattern1.exec(text);\n  alert(matches.index); //0\n  alert(matches[0]); //cat\n  alert(pattern1.lastIndex); //0\n  ```\n\n- 设置全局标志`g`：每次调用exec()会在字符串中继续查找新匹配项：\n\n  ```\n  var text = \"cat, bat, sat, fat\";\n  \n  var pattern2 = /.at/g;\n  var matches = pattern2.exec(text);\n  \n  alert(matches.index); //0\n  alert(matches[0]); //cat\n  alert(pattern2.lastIndex); //3\n  matches = pattern2.exec(text);\n  alert(matches.index); //5\n  alert(matches[0]); //bat\n  alert(pattern2.lastIndex); //8\n  ```\n\n#### b.`test()`：判断待解析字符串是否与此模式匹配\n\n- 参数：待解析字符串\n- 模式与参数匹配：返回true；否则，返回false\n\n在只想知道目标字符串与某个模式是否匹配，但不需要知道其文本内容时，使用这个方法非常方便。因此，test()方法经常被用在if 语句中：\n\n```\nvar text = \"000-00-0000\";\nvar pattern = /\\d{3}-\\d{2}-\\d{4}/;\nif (pattern.test(text)){\nalert(\"The pattern was matched.\");\n}\n```\n\n\n\n#### c.继承的方法\n\n- valueOf()方法：返回正则表达式本身\n\n- toLocaleString()方法：返回正则表达式的字面量，与创建正则表达式的方式无关\n\n- toString()方法：返回正则表达式的字面量，与创建正则表达式的方式无关\n\n  ```\n  var pattern = new RegExp(\"\\\\[bc\\\\]at\", \"gi\");\n  alert(pattern.toString()); // /\\[bc\\]at/gi\n  alert(pattern.toLocaleString()); // /\\[bc\\]at/gi\n  ```\n\n## 三、待解析字符串的string方法\n\n### 1. `search()`：查找匹配字符串位置\n\n- 参数：正则表达式\n- 返回：匹配子串的起始位置；未找到返回-1.\n  - 例: `JavaScript.search(/script/i);//返回4`\n\n**说明**：`search()`方法不支持全局属性检索，所以会忽略匹配模式标志g\n\n### 2. `replace()`：替换\n\n- 2个参数：正则，作为替换的字符串\n  - 若第一个参数是字符串，`replace()`则会直接搜索这个字符串\n  - 若作为替换字符串中出现了`$数字`，那么`replace()`将用与指定的子表达式相匹配的文本来替换这两个字符\n\n```\ntext.replace(/javascript/gi,\"JavaScript\");//将所有不区分大小写的javascript都替换成大小写正确的JavaScript\n//一段引用文本起始于引号，结束与引号\n//中间的内容区域，不能包含引号\nvar quote = /\"([^\"]*)\"/g;\n//引用中文半角引号替换英文引号，同时要保持引号之间的内容(储存在$1中)没有被修改\ntext.replace(quote,'“$1”');\n```\n\n### 3. `match()`：查找匹配字符串和捕获组\n\n- 参数：正则表达式\n- 返回：由匹配结果组成的数组\n\n```\n\"1 plus 2 equals 3\".match(/\\d+/g);//返回[\"1\",\"2\",\"3\"]\n```\n\n**说明**\n\n- ```\n  match()\n  ```\n\n  始终返回一个数组。若没有匹配模式标志g，只检索第一个匹配，则数组的第一个元素是匹配的字符串，余下的元素是正则表达式中的捕获组（用圆括号括起来的子表达式）。\n\n  - 假设macth()返回一个数组a，那么a[n]存放的是$n的内容：a[0]存放的是完整的匹配，a[1]存放的是第一个捕获组，以此类推。\n\n- 例：解析一个url\n\n```\nvar url = /(\\w+):\\/\\/([\\w.]+)\\/(\\S*)/;\nvar text = \"Visit my blog at http://www.example.com/~david\";\nvar result = text.match(url);\nif (result != null) {\n    var fullurl = result[0]; //包含 \"http://www.example.com/\"\n    var protocol = result[1]; //包含 \"http\"\n    var host = result[2]; //包含 \"www.example.com\"\n    var path = result[3]; //包含~david\n}\n```\n\n### 4. `split()`：分隔\n\n- 参数：字符串/正则表达式\n\n- 将字符串用传入的分隔符拆分为子串，返回：子串组成的数组\n\n- 例：\n\n  ```\n  // 参数为字符串\n  \"123,456,789\".split(\",\");//返回[\"123\",\"456\",\"789\"]\n  // 参数为正则表达式\n  \"1,2, 3,4 ,5\".split(/\\s*,\\s*/)//返回[\"1\",\"2\",\" 3\",\"4 \",\"5\"]，指定分隔符”,”，允许两边留有任意多的空白符\n  ```\n\n## 四、正则表达式语法\n\n### 1.转义字符\n\n> 非字母的字符匹配，这些字符需要通过反斜线（\\）作前缀进行转义.\n\n| 字 符          | 匹 配                             | 举 例                 |\n| :------------- | :-------------------------------- | :-------------------- |\n| 字母和数字字符 | 自身                              |                       |\n| `\\o`           | NUL字符                           |                       |\n| `\\t`           | 制表符                            |                       |\n| `\\n`           | 换行符                            |                       |\n| `\\v`           | 垂直制表符                        |                       |\n| `\\f`           | 换页符                            |                       |\n| `\\r`           | 回车符                            |                       |\n| `\\xnn`         | 由十六进制数nn指定的拉丁字符      | `\\x0A`等价于`\\n`      |\n| `\\uxxxx`       | 由十六进制数xxxx指定的unicode字符 | `\\u0009`等价于`\\t`    |\n| `\\cX`          | 控制字符^X                        | `\\cJ`等价于换行符`\\n` |\n\n**具有特殊含义的符号（元字符）**\n\n```\n| \\ / ( ) [ ] { }  . : ! * + = ^ ? $\n```\n\n想要在正则表达式中对这些字符进行匹配，必须使用前缀”\\”\n\n其他标点符号（比如@和引号）无特殊含义，无需转义，直接使用即可。\n\n### 2.字符类\n\n方括号：或/范围\n\n> 将直接量字符单独放进方括号内就组成了字符类。一个字符类可以匹配它包含的任意字符。**字符类可以使用连字符来表示字符范围。**\n\n| 字 符    | 含 义                                           |\n| :------- | :---------------------------------------------- |\n| `.`      | 除换行符和unicode行终止符之外的任意字符         |\n| `[...]`  | 方括号内的任意字符，“或”的关系                  |\n| `[^...]` | 不在方括号内的任意字符                          |\n| `\\w`     | 任何ASCII符组成的单词，等同`[a-zA-Z0-9]`        |\n| `\\W`     | 任何不是ASCII符组成的的单词，等同`[^a-zA-Z0-9]` |\n| `\\s`     | 任何unicode空白字符                             |\n| `\\S`     | 任何非unicode空白符的字符，注意`\\W`与`\\s`不同   |\n| `\\d`     | 任何ASCII数字等价于`[0-9]`                      |\n| `\\D`     | 除了ASCII数字之外的任何字符,等价于`[^0-9]`      |\n| `[\\b]`   | 退格直接量（特例）                              |\n\n- 例:\n  - `/[a,b,c]/`：表示和字母”a”,”b”,”c”中的任意一个都匹配\n  - `/[a-z]/`：匹配拉丁字母表中的小写字母\n  - `/[\\s\\d]/`：匹配任意空白符或数字\n\n### 3.重复\n\n> 用以指定字符重复的标记\n\n| 字 符   | 含 义                                                   |\n| :------ | :------------------------------------------------------ |\n| `{n,m}` | 匹配前一项至少n次，但不能超过m次                        |\n| `{n,}`  | 匹配前一项n次，或者更多次                               |\n| `{n}`   | 匹配前一项n次                                           |\n| `?`     | 匹配前一项0次或者1次，也就是前一项是可选的，等价于{0,1} |\n| `*`     | 匹配前一项0次或者多次，等价于{0,}                       |\n| `+`     | 匹配前一项1次或者多次看，等价于{1,}                     |\n\n- 例:\n  - `/\\d{2,4}/`:匹配2-4个数字。\n  - `/\\w{3}\\d?/`:精确匹配三个单词和一个可选的数字。\n  - `/\\s+java\\s+/`:匹配前后有1个或多个空格的字符串”java”\n  - `/[^(]*/`:匹配0个或多个非左括号的字符(这里实际上能与`\"(\"`匹配)\n\n**注意！**\n\na. `*`和`?`能匹配0个字符。因此可以什么都不匹配\n\n- 例:\n  - `/a*/`能匹配字符串”bbbb”，因其含有0个a。\n\nb. 上表中列出的匹配字符为”贪婪的”匹配\n\n**贪婪匹配** ：尽可能多地匹配，且允许后续的正则表达式继续匹配\n\n**非贪婪匹配** ：只匹配一次，在待匹配的字符后跟随一个问号即可，`?`，`+?`，`*?`或`{1,5}?`\n\n- 例:\n  - `/a+/`：匹配“aaa”时，三个字符都被匹配,\n  - `/a+?/`：匹配“aaa”时，只匹配第一个a\n\n### 4.选择-分组和引用\n\n> 包括：指定选择项，自表达式分组，引用前一子表达式的特殊字符\n\n- 选择项的尝试匹配次序是从左到右，直到发现匹配项，若左边成功匹配就忽略右边的项。\n- 正则表达式中圆括号的作用：\n  a. 把单独的项组成子表达式，以便于可以像处理独立单元一样，用`\\|`,`*`,`+`或者`?`等等来对单元内的项进行处理\n  b. 在完整的模式中定义子模式\n  c. 允许在同一正则表达式的后部,引用前面的子表达式\n\n| 字 符    | 含 义                                                        |\n| :------- | :----------------------------------------------------------- |\n| \\|       | 选择：匹配该符号左/右的子表达式                              |\n| `(...)`  | 组合+记忆：将几个项组合成为一个单元，该单元可通过\\| * + ?等符号加以修饰，且可以记住和这个相匹配的字符串，供以后的引用使用 |\n| `(?:..)` | 只组合不记忆：把项组合到一个单元，但不记忆与该组相匹配的字符 |\n| `\\n`     | 和第n个分组第一次匹配的字符相匹配，组是圆括号中的子表达式（也有可能嵌套的），组索引是从左到右的左括号数,”(?:形式的分组不编码” |\n\n- 例:\n  - `/ab|cd|ef/`：可以匹配”ab”，也可以匹配”cd”，还可以匹配”ef”\n  - `/\\d{3}|[a-z]{4}/`：可以匹配3个数字，或者4个小写字母\n  - `(/[a-z]+(\\d+)/)`：匹配一个或多个小写字母后跟随了一位或多位数字，使用括号包裹后，可以从检索到的匹配中抽取数字了\n\n### 5.指定匹配位置\n\n> 正则表达式的锚，将模式定位在搜索字符串的特定位置上\n\n| 字 符 | 含 义                                                        |\n| :---- | :----------------------------------------------------------- |\n| `^`   | 匹配字符串的开头，在多行检索中，匹配一行的开头               |\n| `$`   | 匹配字符串的结尾，在多行检索中，匹配一行的结尾               |\n| `\\b`  | 匹配一个单词边界，简言之，就是位于字符\\w和\\W之间的位置，或位于字符\\w和字符串的开头或结尾之间的位置(需要注意:[\\b]匹配的是退格符) |\n| `\\B`  | 匹配非单词边界的位置                                         |\n\n- 例:\n  - `/^JavaScript$/`:匹配”JavaScript”单词\n  - `/\\B[Ss]cript/`:与”JavaScript”和”/postscript”匹配，但不与”script”与”Script”.\n\n# （三）常用的正则表达式\n\n以下内容转载自：http://www.cnblogs.com/zxin/archive/2013/01/26/2877765.html\n\n## 一、校验数字的表达式\n\n1. 数字：`^[0-9]*$`\n2. n位的数字：`^\\d{n}$`\n3. 至少n位的数字：`^\\d{n,}$`\n4. m-n位的数字：`^\\d{m,n}$`\n5. 零和非零开头的数字：`^(0|[1-9][0-9]*)$`\n6. 非零开头的最多带两位小数的数字：`^([1-9][0-9]*)+(.[0-9]{1,2})?$`\n7. 带1-2位小数的正数或负数：`^(\\-)?\\d+(\\.\\d{1,2})?$`\n8. 正数、负数、和小数：`^(\\-|\\+)?\\d+(\\.\\d+)?$`\n9. 有两位小数的正实数：`^[0-9]+(.[0-9]{2})?$`\n10. 有1~3位小数的正实数：`^[0-9]+(.[0-9]{1,3})?$`\n11. 非零的正整数：`^[1-9]\\d*$ 或 ^([1-9][0-9]*){1,3}$ 或 ^\\+?[1-9][0-9]*$`\n12. 非零的负整数：`^\\-[1-9][]0-9\"*$ 或 ^-[1-9]\\d*$`\n13. 非负整数：`^\\d+$ 或 ^[1-9]\\d*|0$`\n14. 非正整数：`^-[1-9]\\d*|0$ 或 ^((-\\d+)|(0+))$`\n15. 非负浮点数：`^\\d+(\\.\\d+)?$ 或 ^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0$`\n16. 非正浮点数：`^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$` 或 `^(-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*))|0?\\.0+|0$`\n17. 正浮点数：`^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$` 或 `^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$`\n18. 负浮点数：`^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$` 或 `^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$`\n19. 浮点数：`^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$`\n\n## 二、校验字符的表达式\n\n1. 汉字：`^[\\u4e00-\\u9fa5]{0,}$`\n2. 英文和数字：`^[A-Za-z0-9]+$` 或 `^[A-Za-z0-9]{4,40}$`\n3. 长度为3-20的所有字符：`^.{3,20}$`\n4. 由26个英文字母组成的字符串：`^[A-Za-z]+$`\n5. 由26个大写英文字母组成的字符串：`^[A-Z]+$`\n6. 由26个小写英文字母组成的字符串：`^[a-z]+$`\n7. 由数字和26个英文字母组成的字符串：`^[A-Za-z0-9]+$`\n8. 由数字、26个英文字母或者下划线组成的字符串：`^\\w+$` 或 `^\\w{3,20}$`\n9. 中文、英文、数字包括下划线：`^[\\u4E00-\\u9FA5A-Za-z0-9_]+$`\n10. 中文、英文、数字但不包括下划线等符号：`^[\\u4E00-\\u9FA5A-Za-z0-9]+$` 或 `^[\\u4E00-\\u9FA5A-Za-z0-9]{2,20}$`\n11. 可以输入含有^%&’,;=?$\\”等字符：`[^%&',;=?$\\x22]+`\n12. 禁止输入含有~的字符：`[^~\\x22]+`\n\n## 三、特殊需求表达式\n\n1. Email地址：`^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$`\n\n2. 域名：`[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?`\n\n3. InternetURL：`[a-zA-z]+://[^\\s]* 或 ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&=]*)?$`\n\n4. 手机号码：`^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d{8}$`\n\n5. 电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：`^(\\(\\d{3,4}-)|\\d{3.4}-)?\\d{7,8}$`\n\n6. 国内电话号码(0511-4405222、021-87888822)：`\\d{3}-\\d{8}|\\d{4}-\\d{7}`\n\n7. 身份证号(15位、18位数字)：`^\\d{15}|\\d{18}$`\n\n8. 短身份证号码(数字、字母x结尾)：`^([0-9]){7,18}(x|X)?$` 或 `^\\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$`\n\n9. 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：`^[a-zA-Z][a-zA-Z0-9_]{4,15}$`\n\n10. 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：`^[a-zA-Z]\\w{5,17}$`\n\n11. 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：`^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$`\n\n12. 日期格式：`^\\d{4}-\\d{1,2}-\\d{1,2}`\n\n13. 一年的12个月(01～09和1～12)：`^(0?[1-9]|1[0-2])$`\n\n14. 一个月的31天(01～09和1～31)：`^((0?[1-9])|((1|2)[0-9])|30|31)$`\n\n15. 钱的输入格式：\n\n    - 有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：`^[1-9][0-9]*$`\n    - 这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：`^(0|[1-9][0-9]*)$`\n    - 一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：`^(0|-?[1-9][0-9]*)$`\n    - 这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：`^[0-9]+(.[0-9]+)?$`\n    - 必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：`^[0-9]+(.[0-9]{2})?$`\n    - 这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：`^[0-9]+(.[0-9]{1,2})?$`\n    - 这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：`^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$`\n    - 1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：`^([0-9]+|[0-9]{1,3}(,[0-9]{3})*)(.[0-9]{1,2})?$`\n\n    备注：这就是最终结果了,别忘了”+”可以用”* “替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里\n\n16. xml文件：`^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\\\.[x|X][m|M][l|L]$`\n\n17. 中文字符的正则表达式：`[\\u4e00-\\u9fa5]`\n\n18. 双字节字符：`[^\\x00-\\xff]` (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))\n\n19. 空白行的正则表达式：`\\n\\s*\\r` (可以用来删除空白行)\n\n20. HTML标记的正则表达式：`<(\\S*?)[^>]*>.*?</\\1>|<.*? />` (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)\n\n21. 首尾空白字符的正则表达式：`^\\s*|\\s*$或(^\\s*)|(\\s*$)` (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)\n\n22. 腾讯QQ号：`[1-9][0-9]{4,}` (腾讯QQ号从10000开始)\n\n23. 中国邮政编码：`[1-9]\\d{5}(?!\\d)` (中国邮政编码为6位数字)\n\n24. IP地址：`\\d+\\.\\d+\\.\\d+\\.\\d+` (提取IP地址时有用)\n\n25. IP地址：`((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.){3}(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d))`\n\n# （四）参考资料\n\n[JavaScript高级程序设计](http://www.ituring.com.cn/book/946)\n[正则表达式-理论基础篇](http://blog.guowenfh.com/2015/12/01/Regexp-basis/)\n[最全的常用正则表达式大全](http://www.cnblogs.com/zxin/archive/2013/01/26/2877765.html)\n\n","tags":["转载","JavaScript","正则表达式"],"categories":["工具"]},{"title":"Git 使用方法","url":"/undefined/6199169a.html","content":"\n> 转载自: [文章链接](https://baoyuzhang.github.io/2017/04/28/%E3%80%90Hexo%E6%90%AD%E5%BB%BA%E7%8B%AC%E7%AB%8B%E5%8D%9A%E5%AE%A2%E5%85%A8%E7%BA%AA%E5%BD%95%E3%80%91%EF%BC%88%E4%B8%80%EF%BC%89%E4%BD%BF%E7%94%A8Git%E5%92%8CGithub/#more)\n>\n> 文章作者: baoyuzhang\n\n\n\n此处列出了一些我收藏的公认的比较好的Git教程，可以作为深入学习资料\n\n- [Git使用教程](http://www.cnblogs.com/tugenhua0707/p/4050072.html) 本文主要参考\n- [Git教程 - 廖雪峰的官方网站](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000) 大牛博客，还包含JS，Python等教程，都很棒\n- [git 使用简易指南](http://www.bootcss.com/p/git-guide/)\n- [图解Git](http://marklodato.github.io/visual-git-guide/index-zh-cn.html) 图文并茂，对git工作原理的理解帮助很大\n- [Git - Book](https://git-scm.com/book/zh/v2)\n- [GitHub Guides](https://guides.github.com/) GitHub官方指南，很多都有中文翻译，可以自己搜一下\n- [理解 GitHub Flow · GitHub 指南](http://gitbeijing.com/flow/) 理解Github工作原理，GitHub官方指南中文翻译的一部分\n\n## Git简介\n\n### Git是什么？\n\nGit是目前世界上最先进的分布式版本控制系统。\n\n### SVN（集中式）与Git（分布式）的最主要的区别？\n\nSVN是集中式版本控制系统，版本库集中放在中央服务器。干活的时候用自己的电脑，首先要从中央服务器哪里得到最新的版本，然后干活，干完后把自己做完的活推送到中央服务器。集中式版本控制系统必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就难办了。\n\nGit是分布式版本控制系统，没有中央服务器。每个人的电脑就是一个完整的版本库，工作的时候不需要联网。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们俩只需把各自的修改推送给对方，就可以互相看到对方的修改了。\n\n## 安装Git（windows）\n\n### 安装\n\n建议到[Git官网](https://git-scm.com/)下载最新版本，国内访问会很慢，可以到网上搜索下载，然后默认安装即可。安装完成后，在开始菜单里面找到 “Git –> Git Bash”，如下：\n[![\"Git --> Git Bash\"](https://baoyuzhang.github.io/img/01.jpg)](https://baoyuzhang.github.io/img/01.jpg)\n\n弹出一个类似的命令窗口的东西，就说明Git安装成功。如下：\n[![\"git安装成功\"](https://baoyuzhang.github.io/img/2017-04-28_165817.png)](https://baoyuzhang.github.io/img/2017-04-28_165817.png)\n\n### 设置用户名和邮箱\n\n因为Git是分布式版本控制系统，所以需要填写用户名和邮箱作为一个标识。在命令行输入如下：\n[![\"设置邮箱和用户名\"](https://baoyuzhang.github.io/img/2017-04-28_171200.png)](https://baoyuzhang.github.io/img/2017-04-28_171200.png)\n\n**注意！**`git config --global` 参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然你也可以对某个仓库指定的不同的用户名和邮箱。\n\n查看已设置的用户名和邮箱，在命令行输入如下：\n[![\"查看邮箱和用户名\"](https://baoyuzhang.github.io/img/2017-04-28_171259.png)](https://baoyuzhang.github.io/img/2017-04-28_171259.png)\n\n## 使用Git\n\n### 常见问题-前置\n\n#### Git每次进入都需要输入用户名和密码的问题解决\n\n进入`git`项目所在目录，执行以下命令\n\n```bash\ngit config --global credential.helper store\n```\n\n会在本地记录你的账号密码，然后再操作一次git pull ，输入账号密码，之后就不用再输入密码了。\n\n####  git使用中关于文件名太长无法处理的问题\n\n\n用`windows`的童鞋都见过文件名太长无法删除，文件名太长无法修改，文件名太长无法移动等问题，使用git的时候也是如此，不过直接run这条命令就ok了\n\n```bash\ngit config --system core.longpaths true\n#or\ngit config --glob core.longpaths true\n```\n\n#### warning: LF will be replaced by CRLF in\n\n原因是存在符号转义问题\n\n`windows`中的换行符为 `CRLF`， 而在`linux`下的换行符为`LF`，所以在执行`add . `时出现提示，解决办法：\n\n```bash\ngit config --global core.autocrlf false\n```\n\n`push`时可能也会遇到git默认缓存大小不足的情况，使用下面的命令增加缓存大小来解决:\n\n```bash\ngit config --global https.postBuffer 1048576000\ngit config https.postBuffer 1048576000\ngit config --global http.postBuffer 1048576000\ngit config http.postBuffer 1048576000\n```\n\n### 创建版本库repository\n\n版本库：又名仓库，英文名repository。可简单的理解一个目录，这个目录里面的所有文件都会被Git管理，每个文件的修改，删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件“还原”。\n\n| 命令                              | 释义                           |\n| :-------------------------------- | :----------------------------- |\n| **打开所在目录**                  |                                |\n| cd folder                         | 打开文件夹                     |\n| mkdir folder                      | 新建文件夹                     |\n| pwd                               | 显示当前目录                   |\n| **初始化：将当前目录变为git仓库** |                                |\n| git init                          | 当前目录→git可管理仓库         |\n| **添加文件到版本库**              |                                |\n| git add file                      | 将file文件添加到暂存区         |\n| git commit -m “提交说明”          | 将暂存区中所有文件提交到仓库   |\n| git status                        | 查看当前目录中是否有文件未提交 |\n\n#### 打开所在目录\n\n创建一个版本库，如在D:/www下 目录下新建一个testgit版本库，在命令行输入如下：\n[![\"创建版本库\"](https://baoyuzhang.github.io/img/2017-04-28_173436.png)](https://baoyuzhang.github.io/img/2017-04-28_173436.png)\n\n#### 初始化：将当前目录变为git仓库\n\n[![\"初始化\"](https://baoyuzhang.github.io/img/2017-04-28_174138.png)](https://baoyuzhang.github.io/img/2017-04-28_174138.png)\n\n**注意！** 这时当前testgit目录下会多一个.git的目录，这个目录是Git来跟踪管理版本的，千万不要手动乱改这个目录里面的文件，否则，会把git仓库给破坏了。如下：\n[![\".git\"](https://baoyuzhang.github.io/img/2017-04-28_174458.png)](https://baoyuzhang.github.io/img/2017-04-28_174458.png)\n\n#### 添加文件到版本库\n\n作为测试，在当前目录下新建一个readme.txt，并写入11111111保存，之后进行如下3步操作：\n[![\"添加文件到版本库\"](https://baoyuzhang.github.io/img/2017-04-28_180144.png)](https://baoyuzhang.github.io/img/2017-04-28_180144.png)\n\n`git status` 结果显示没有任何文件未提交。\n\n### 修改和版本回退\n\n| 命令                     | 释义                   |\n| :----------------------- | :--------------------- |\n| **修改文件内容**         |                        |\n| git diff file            | 查看file文件修改内容   |\n| **查看历史记录**         |                        |\n| git log                  | 查看历史记录           |\n| git log –pretty=oneline  | 查看历史记录（简洁版） |\n| **版本回退**             |                        |\n| git reset –hard HEAD^    | 退回到上个版本         |\n| git reset –hard HEAD^^   | 退回到上上个版本       |\n| git reset –hard HEAD~100 | 退回到前100个版本      |\n| **恢复最新版本**         |                        |\n| git reflog               | 获取全部版本号         |\n| git reset –hard 版本号   | 退回到版本号的版本     |\n| cat file                 | 查看文件内容           |\n\n#### 修改文件内容\n\n继续，修改readme.txt内容，在下面添加一行22222222内容，继续使用git status查看结果，如下：\n[![\"git status\"](https://baoyuzhang.github.io/img/2017-04-28_211211.png)](https://baoyuzhang.github.io/img/2017-04-28_211211.png)\n\n结果显示，readme.txt文件已被修改，但是未被提交的修改。接下来我想看下readme.txt文件到底改了什么内容，如何查看呢？可以使用如下命令：\n[![\"git diff\"](https://baoyuzhang.github.io/img/2017-04-28_211553.png)](https://baoyuzhang.github.io/img/2017-04-28_211553.png)\n\n结果显示，readme.txt文件内容从一行11111111改成两行，添加了一行22222222内容。\n\n知道了对readme.txt文件做了什么修改后，我们可以放心的提交到仓库了，提交修改和提交文件是一样的两步(第一步是git add 第二步是：git commit)。如下：\n[![\"增加222\"](https://baoyuzhang.github.io/img/2017-04-28_212240.png)](https://baoyuzhang.github.io/img/2017-04-28_212240.png)\n\n`git status`：提交文件之前，查看一下状态；提交文件之后，继续查看一下状态，显示没有可提交的文件\n\n**说明：** 所有的版本控制系统，只能跟踪文本文件的改动（如txt文件，网页，所有程序的代码等）。对于图片，视频这些二进制文件，只能把每次改动串起来，无法跟踪文件的变化，即：知道图片从1kb变成2kb，但是到底改了什么，版本控制系统也不知道\n\n#### 查看历史记录\n\n继续对readme.txt文件进行修改，再增加一行\n内容为33333333，然后执行命令如下：\n[![\"增加333内容\"](https://baoyuzhang.github.io/img/2017-04-28_213243.png)](https://baoyuzhang.github.io/img/2017-04-28_213243.png)\n\n现在我已经对readme.txt文件做了三次修改了，那么我现在想查看下历史记录，如何查看呢？使用命令 `git log` ,如下：\n[![\"git log\"](https://baoyuzhang.github.io/img/2017-04-28_213915.png)](https://baoyuzhang.github.io/img/2017-04-28_213915.png)\n\n结果显示，从最近到最远的显示日志，我们可以看到最近三次提交，最近的一次是“增加333内容”，上一次是“增加222内容”。\n\n如果嫌上面显示的信息太多的话，可以用缩减版显示，如下：\n[![\"git log --pretty=oneline\"](https://baoyuzhang.github.io/img/2017-04-28_214341.png)](https://baoyuzhang.github.io/img/2017-04-28_214341.png)\n\n#### 版本回退\n\n现在我想使用版本回退操作，我想把当前的版本回退到上一个版本，要使用什么命令呢？可以使用如下2种命令，第一种是`git reset --hard HEAD^` ；那么如果要回退到上上个版本只需把`HEAD^ 改成 HEAD^^`， 以此类推。那如果要回退到前100个版本的话，使用上面的方法肯定不方便，我们可以使用下面的简便命令操作：`git reset --hard HEAD~100` 即可。未回退之前的readme.txt内容如下：\n[![\"未回退内容\"](https://baoyuzhang.github.io/img/2017-04-28_214610.png)](https://baoyuzhang.github.io/img/2017-04-28_214610.png)\n\n回退到上一个版本，如下\n[![\"回退到上一个版本\"](https://baoyuzhang.github.io/img/2017-04-28_214824.png)](https://baoyuzhang.github.io/img/2017-04-28_214824.png)\n\n查看现在readme.txt文件中的内容，如下：\n[![\"查看内容\"](https://baoyuzhang.github.io/img/2017-04-28_214936.png)](https://baoyuzhang.github.io/img/2017-04-28_214936.png)\n\n结果显示，”增加333内容”我们没有看到了。\n\n#### 恢复最新版本\n\n现在我想恢复到最新的版本(有333333内容版本)要如何恢复呢？可以通过版本号回退。\n\n但是现在的问题假如我已经关掉过一次git bush，或者333内容的版本号我并不知道呢？要如何知道增加3333内容的版本号呢？如下：\n[![\"查看版本号\"](https://baoyuzhang.github.io/img/2017-04-28_215744.png)](https://baoyuzhang.github.io/img/2017-04-28_215744.png)\n\n结果显示，”增加333内容”的版本号是 c83a6bb。现在可以通过版本号回退了，如下：\n[![\"版本号回退\"](https://baoyuzhang.github.io/img/2017-04-28_220020.png)](https://baoyuzhang.github.io/img/2017-04-28_220020.png)\n\n结果显示，目前已经是最新的版本。\n\n#### 理解工作区、暂存区、版本库\n\n**工作区：** 你在电脑上看到的目录，比如目录testgit里的文件(.git隐藏目录版本库除外)，以后需要再新建的目录文件等等都属于工作区范畴。\n\n**版本库：** 工作区里的隐藏目录.git，这个不属于工作区，这是版本库。版本库中存了很多东西：\n\n- **暂存区(stage)** ——最重要！（暂存区是版本库的一部分）\n- Git为我们自动创建了第一个分支master\n- 指向当前分支的指针HEAD\n\n前面说过使用Git提交文件到版本库有两步：\n\n- 第一步：`git add` 把文件添加进去，实际上就是把文件添加到暂存区；\n- 第二步：`git commit` 提交更改，实际上就是把暂存区的所有内容提交到当前分支上。\n\n下面来举例说明。\n\n在readme.txt再添加一行内容为4444444，接着在目录下新建一个文件为test.txt 内容为test，我们先用命令`git status`来查看下状态，如下：\n[![\"工作区、暂存区、版本库\"](https://baoyuzhang.github.io/img/2017-04-28_222758.png)](https://baoyuzhang.github.io/img/2017-04-28_222758.png)\n\n先使用git add 命令把2个文件都添加到暂存区中，再使用git status来查看下状态，如下：\n[![\"git add\"](https://baoyuzhang.github.io/img/2017-04-28_223111.png)](https://baoyuzhang.github.io/img/2017-04-28_223111.png)\n\n接着使用git commit一次性提交到分支上，如下：\n[![\"一次性提交所有文件\"](https://baoyuzhang.github.io/img/2017-04-28_223236.png)](https://baoyuzhang.github.io/img/2017-04-28_223236.png)\n\n### 撤销修改、删除和恢复文件\n\n| 命令                | 释义                                                         | 备注                                                         |\n| :------------------ | :----------------------------------------------------------- | :----------------------------------------------------------- |\n| **撤销修改**        |                                                              |                                                              |\n| git checkout – file | 丢弃file文件在工作区的修改（工作区-暂存区-版本库，回到上一阶段的修改）a.工作区修改后没有add到暂存区：回到和版本库一样的状态；b.工作区修改后add到暂存区后又有修改：回到添加暂存区后的状态 | 如果没有–，则为创建分支命令                                  |\n| **删除和恢复文件**  |                                                              |                                                              |\n| rm file             | 删除工作区中的file文件                                       | a.想要删除版本库中的file文件：直接commit掉；b.想要从版本库中删除file文件：git checkout – file |\n| git checkout – file | 丢弃file文件在工作区的修改（工作区-暂存区-版本库，回到上一阶段的修改）a.工作区修改后没有add到暂存区：回到和版本库一样的状态；b.工作区修改后add到暂存区后又有修改：回到添加暂存区后的状态 | 如果没有–，则为创建分支命令                                  |\n\n#### 撤销修改\n\n现在在readme.txt文件里面增加一行内容为55555555，通过命令查看如下：\n[![\"修改555\"](https://baoyuzhang.github.io/img/2017-04-28_223816.png)](https://baoyuzhang.github.io/img/2017-04-28_223816.png)\n\n在未提交之前，我发现添加55555555内容有误，得马上恢复以前的版本，现在我可以有如下几种方法可以做修改：\n\n1. 如果知道要删掉哪些内容，直接手动更改去掉那些需要的文件，然后add添加到暂存区，最后commit。\n2. 按以前的方法直接恢复到上一个版本。使用 `git reset --hard HEAD^`\n\n但是现在我不想使用以上两种方法，想直接使用撤销命令该如何操作呢？首先在做撤销之前，我们可以先用 git status 查看下当前的状态，如下：\n[![\"git status\"](https://baoyuzhang.github.io/img/2017-04-28_224044.png)](https://baoyuzhang.github.io/img/2017-04-28_224044.png)\n\n可以发现，Git会告诉你，`git checkout -- file` 可以将工作区做的修改全部撤销，如下:\n[![\"git checkout\"](https://baoyuzhang.github.io/img/2017-04-28_224304.png)](https://baoyuzhang.github.io/img/2017-04-28_224304.png)\n\n**注意：** `git checkout -- readme.txt` 中的 `--` 很重要.如果没有 `--` ，则命令变成创建分支了。\n\n结果显示，内容555已结没有了。将工作区做的修改全部撤销有两种情况：\n\n1. 修改后还没有放到暂存区：撤销修改则回到和版本库一模一样的状态；\n2. 已经放入暂存区，接着又作了修改：撤销修改则回到添加暂存区后的状态。\n\n对于第2种情况，继续做demo，假如现在对readme.txt添加一行内容为66666666，git add 增加到暂存区，如下：\n[![\"add 666\"](https://baoyuzhang.github.io/img/2017-04-28_225212.png)](https://baoyuzhang.github.io/img/2017-04-28_225212.png)\n\n接着添加内容77777777，通过撤销命令让其回到暂存区后的状态。如下：\n[![\"撤销777\"](https://baoyuzhang.github.io/img/2017-04-28_225241.png)](https://baoyuzhang.github.io/img/2017-04-28_225241.png)\n\n#### 删除和恢复文件\n\n假如现在版本库testgit目录添加一个文件a.txt，然后提交。如下：\n[![\"添加a.txt\"](https://baoyuzhang.github.io/img/2017-04-28_230315.png)](https://baoyuzhang.github.io/img/2017-04-28_230315.png)\n\n一般情况下，删除文件有两种方法：\n\n1. 直接在文件目录中删除文件text.txt\n2. 使用命令`rm a.txt`\n\n如下：\n[![\"删除a.txt、test.txt\"](https://baoyuzhang.github.io/img/2017-04-28_230736.png)](https://baoyuzhang.github.io/img/2017-04-28_230736.png)\n\n当前目录是这样的:\n[![\"当前目录\"](https://baoyuzhang.github.io/img/2017-04-28_230825.png)](https://baoyuzhang.github.io/img/2017-04-28_230825.png)\n\n如果想彻底从版本库中删掉了此文件的话，可以再执行commit命令提交掉。没有commit之前，想在版本库中恢复此文件如何操作呢？如下：\n[![\"提交a.txt、test.txt\"](https://baoyuzhang.github.io/img/2017-04-28_231517.png)](https://baoyuzhang.github.io/img/2017-04-28_231517.png)\n\n再来看testgit目录，添加了2个文件，如下：\n[![\"当前目录\"](https://baoyuzhang.github.io/img/2017-04-28_231617.png)](https://baoyuzhang.github.io/img/2017-04-28_231617.png)\n\n### 创建、合并分支\n\n#### 理解HEAD和master指针\n\n你已经知道，在版本回退里，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。严格来说，HEAD并不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。\n\n**结论：HEAD指向当前分支，master指向提交**\n\n#### 理解分支管理策略\n\n**master主分支：用来发布新版本，应该是非常稳定的。一般情况下不允许在上面干活。**\n**一般情况下在新建的dev分支上干活，干完后，要发布，或者说dev分支代码稳定后可以合并到主分支master上来。**\n\n| 命令                                          | 释义                                            | 备注                                                         |\n| :-------------------------------------------- | :---------------------------------------------- | :----------------------------------------------------------- |\n| **创建、合并分支**                            |                                                 |                                                              |\n| git branch                                    | 查看分支                                        | 列出所有分支，当前分支前有星号                               |\n| git branch xxx                                | 创建分支xxx                                     |                                                              |\n| git checkout xxx                              | 切换到分支xxx                                   |                                                              |\n| git checkout -b xxx                           | 创建 + 切换分支xxx                              | 相当于`git branch xxx`和`git checkout xxx`                   |\n| git merge xxx                                 | 在主分支上合并xxx分支                           | “Fast-forward“快进模式”：直接把master指向xxx的当前提交；删除分支后，丢掉分支信息CONFLICT：产生冲突；删除分支后，保留分支信息” |\n| git branch -d xxx                             | 删除分支xxx                                     |                                                              |\n| **解决冲突**                                  |                                                 |                                                              |\n| git log –graph –pretty=oneline –abbrev-commit | 带参数的git log，查看分支合并图                 | 删除分支后，保留分支信息                                     |\n| **“Fast forward”模式 no-ff**                  |                                                 |                                                              |\n| git merge –no-ff -m “merge with no-ff” xxx    | 合并分支xxx，–no-ff：禁用Fast-forward“快进模式” | 删除分支后，保留分支信息                                     |\n\n#### 创建、合并分支\n\n首先，我们来创建并切换到dev分支上，然后查看当前分支，如下：\n[![\"创建并切换到dev分支\"](https://baoyuzhang.github.io/img/2017-04-29_110228.png)](https://baoyuzhang.github.io/img/2017-04-29_110228.png)\n\n`git checkout -b xxx`表示创建 + 切换分支，相当于`git branch xxx`和`git checkout xxx`。\n\n`git branch`表示查看分支，列出所有分支，当前分支前有星号。\n\n首先我们来查看下readme.txt内容，接着添加内容77777777，再次查看内容并提交，如下：\n[![\"dev分支增加777\"](https://baoyuzhang.github.io/img/2017-04-29_111013.png)](https://baoyuzhang.github.io/img/2017-04-29_111013.png)\n\ndev分支工作已完成，现在切换到主分支master上，继续查看readme.txt内容，如下：\n[![\"切换到主分支\"](https://baoyuzhang.github.io/img/2017-04-29_111235.png)](https://baoyuzhang.github.io/img/2017-04-29_111235.png)\n\n我们发现内容777不见了，因为已经由dev分支切换到主分支了，主分支并没有增加777内容。现在我们把dev分支上的内容合并到分支master上，在master分支上，使用`git merge dev`，继续查看内容。如下：\n[![\"合并分支\"](https://baoyuzhang.github.io/img/2017-04-29_111547.png)](https://baoyuzhang.github.io/img/2017-04-29_111547.png)\n\n我们发现多了一条777，和dev分支最新的提交完全一样。\n\n**注意！** merge后显示的Fast-forward信息，表示这次合并是“快进模式”，即，直接把master指向dev的当前提交，合并速度非常快。\n\n合并完成后，可以删除dev分支，如下：\n[![\"删除分支\"](https://baoyuzhang.github.io/img/2017-04-29_112129.png)](https://baoyuzhang.github.io/img/2017-04-29_112129.png)\n\n查看分支，发现只剩下主分支master了。\n\n#### 解决冲突\n\n那么如何解决冲突呢？我们还是一步一步来，先新建一个新分支fenzhi1，在readme.txt添加一行内容8888888，然后提交，如下：\n[![\"fenzhi1分支添加888\"](https://baoyuzhang.github.io/img/2017-04-29_112708.png)](https://baoyuzhang.github.io/img/2017-04-29_112708.png)\n\n接着切换到master分支上，在最后一行添加内容99999999，如下：\n[![\"主分支添加999\"](https://baoyuzhang.github.io/img/2017-04-29_112957.png)](https://baoyuzhang.github.io/img/2017-04-29_112957.png)\n\n现在，在master分支上合并fenzhi1，如下：\n[![\"主分支上合并fenzhi1\"](https://baoyuzhang.github.io/img/2017-04-29_113150.png)](https://baoyuzhang.github.io/img/2017-04-29_113150.png)\n\n发现发生了冲突CONFLICT，git bush中显示分支的地方也变成了(master|MERGING)。查看状态和readme.txt内容，如下：\n[![\"查看状态和内容\"](https://baoyuzhang.github.io/img/2017-04-29_113734.png)](https://baoyuzhang.github.io/img/2017-04-29_113734.png)\n[![\"查看状态和内容\"](https://baoyuzhang.github.io/img/2017-04-29_114045.png)](https://baoyuzhang.github.io/img/2017-04-29_114045.png)\n\nGit用<<<<<<<，=======，>>>>>>>标记出不同分支的内容。\n\n- `<<<HEAD` ：主分支修改的内容\n- `>>>>>fenzhi1` ：fenzhi1上修改的内容\n\n修改readme.txt内容后，保存并提交，如下：\n[![\"修改readme.txt内容\"](https://baoyuzhang.github.io/img/2017-04-29_114214.png)](https://baoyuzhang.github.io/img/2017-04-29_114214.png)\n[![\"修改readme.txt内容\"](https://baoyuzhang.github.io/img/2017-04-29_115156.png)](https://baoyuzhang.github.io/img/2017-04-29_115156.png)\n\n发现显示分支的地方变回了(master)。如果想要查看分支合并的情况，需要使用命令 `git log`命令，如下：\n[![\"git log\"](https://baoyuzhang.github.io/img/2017-04-29_115518.png)](https://baoyuzhang.github.io/img/2017-04-29_115518.png)\n\n`git log`展示的信息量太大，一片文字看不过来，使用`git log --graph --pretty=oneline --abbrev-commit`命令可以显示分支合并图，如下：\n[![\"分支合并图\"](https://baoyuzhang.github.io/img/2017-04-29_120112.png)](https://baoyuzhang.github.io/img/2017-04-29_120112.png)\n\n#### “Fast forward”模式 no-ff\n\n通常合并分支时，git一般使用”Fast forward”模式，在这种模式下，删除分支后，会丢掉分支信息。\n\n现在我们来使用带参数 –no-ff来禁用”Fast forward”模式。来做demo演示下：\n\n1. 创建一个dev分支\n2. 修改readme.txt内容，增加aaa\n3. 添加到暂存区\n4. 切换回主分支(master)\n5. 合并dev分支，使用命令 `git merge -–no-ff -m “注释” dev`\n6. 删除dev分支\n7. 查看分支\n8. 查看历史记录\n\n如下：\n[![\"no-ff\"](https://baoyuzhang.github.io/img/2017-04-29_142402.png)](https://baoyuzhang.github.io/img/2017-04-29_142402.png)\n\n### bug分支\n\n| 命令            | b释义                   |\n| :-------------- | :---------------------- |\n| git stash       | 隐藏当前分支的工作现场  |\n| git stash list  | 查看stash隐藏的内容     |\n| git stash apply | 恢复stash隐藏内容       |\n| git stash drop  | 删除stash内容           |\n| git stash pop   | 恢复并删除stash隐藏内容 |\n\n在开发中，会经常碰到bug问题，那么有了bug就需要修复，在Git中，分支是很强大的，每个bug都可以通过一个临时分支来修复，修复完成后，合并分支，然后将临时的分支删除掉。\n\n来做demo演示：新建dev分支，在readme.txt中增加bbb。此时接到一个404 bug，我们可以创建一个404分支来修复它，但是，当前的dev分支上的工作还没有提交。如下：\n[![\"遇到404 bug\"](https://baoyuzhang.github.io/img/2017-04-29_144313.png)](https://baoyuzhang.github.io/img/2017-04-29_144313.png)\n\n并不是我不想提交，而是工作进行到一半时候，我们还无法提交，比如我这个分支bug要2天完成，但是我issue-404 bug需要5个小时内完成。怎么办呢？还好，Git还提供了一个stash功能，可以把当前工作现场 ”隐藏起来”，等以后恢复现场后继续工作。如下：\n[![\"stash隐藏工作现场\"](https://baoyuzhang.github.io/img/2017-04-29_144452.png)](https://baoyuzhang.github.io/img/2017-04-29_144452.png)\n\n查看状态显示，`nothing to commit, working directory clean`，说明工作现场已被隐藏。现在可以通过创建issue-404分支来修复bug了。\n\n首先要确定在哪个分支上修复bug。假设我现在要在主分支master上修复，那么要切换到主分支master，然后创建一个临时分支issue-404，如下：\n[![\"临时分支issue-404\"](https://baoyuzhang.github.io/img/2017-04-29_145356.png)](https://baoyuzhang.github.io/img/2017-04-29_145356.png)\n\n修复404bug：将最后一行aaa改为404fixed，然后提交，如下：\n[![\"修复404bug\"](https://baoyuzhang.github.io/img/2017-04-29_145603.png)](https://baoyuzhang.github.io/img/2017-04-29_145603.png)\n\n修复完成，切换到master分支上，并完成合并，最后删除issue-404分支。如下：\n[![\"完成合并，删除issue-404分支\"](https://baoyuzhang.github.io/img/2017-04-29_145845.png)](https://baoyuzhang.github.io/img/2017-04-29_145845.png)\n\n现在，可以回到dev分支上干活了。\n[![\"回到dev分支\"](https://baoyuzhang.github.io/img/2017-04-29_150024.png)](https://baoyuzhang.github.io/img/2017-04-29_150024.png)\n\n查看状态表明，现在的工作区是干净的。那么我们工作现场去哪里呢？我们可以使用命令 git stash list来查看下。如下：\n[![\"git stash list\"](https://baoyuzhang.github.io/img/2017-04-29_150228.png)](https://baoyuzhang.github.io/img/2017-04-29_150228.png)\n\n工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，可以使用如下2个方法：\n\n1. git stash apply恢复。恢复后，stash内容并不删除，你需要使用命令git stash drop来删除\n2. 使用git stash pop。恢复的同时把stash内容也删除了\n\n如下：\n[![\"恢复工作区\"](https://baoyuzhang.github.io/img/2017-04-29_151622.png)](https://baoyuzhang.github.io/img/2017-04-29_151622.png)\n\n这样就恢复了之前的工作区，可以继续dev分支的工作了。\n\n## Github远程仓库\n\n| 命令                                                         | b释义                                                        | 备注                                                         |\n| :----------------------------------------------------------- | :----------------------------------------------------------- | :----------------------------------------------------------- |\n| **创建SSH Key**                                              |                                                              |                                                              |\n| ssh-keygen -t rsa –C “[youremail@example.com](mailto:youremail@example.com)” | 创建SSH Key                                                  | id_rsa是私钥，不能泄露出去;id_rsa.pub是公钥，可以放心地告诉任何人” |\n| **Github中添加SSH Key**                                      |                                                              |                                                              |\n| **添加远程库**                                               |                                                              |                                                              |\n| **a.先创建本地git仓库，再创建github仓库，两个仓库同步**      |                                                              |                                                              |\n| git remote add origin https://github.com/xxx/xxx.git         | 添加github地址                                               |                                                              |\n| git push -u origin master                                    | 第一次使用时执行该命令，将本地的master分支和远程的master分支关联起来，并把将其推送到远程” |                                                              |\n| git push origin master                                       | 将本地master分支的最新修改推送到github                       |                                                              |\n| **b.先创建github仓库，再从github仓库**                       |                                                              |                                                              |\n| git clone https://github.com/xxx/xxx                         |                                                              |                                                              |\n\n先注册github账号，由于你的本地Git仓库和github仓库之间的传输是通过SSH加密的，所以需要设置SSH Key。\n\n### 创建SSH Key\n\n查看是否已经有ssh密钥：\n打开用户主目录”C:\\Users\\Administrator.hp-PC”，\n看看有没有.ssh目录。\n\n- 如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件。如果有，可以直接跳至下一小节\n\n- 如果已经有ssh密钥，想要重新生成ssh密钥，需要清理原有ssh密钥：\n\n  ```\n  $ mkdir key_backup\n  $ cp id_rsa* key_backup\n  $ rm id_rsa*\n  ```\n\n- 如果没有，打开命令行，输入命令`ssh-keygen -t rsa –C “youremail@example.com”`。此处的邮箱地址，你可以输入自己的邮箱地址。在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。\n\n  由于我本地此前运行过一次，所以本地有，如下所示：\n\n[![\".ssh\"](https://baoyuzhang.github.io/img/2017-04-29_153448.png)](https://baoyuzhang.github.io/img/2017-04-29_153448.png)\n\nid_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。由于之前使用Github客户端，因此还有github_rsa和github_rsa.pub两个文件。known_hosts文件如果没有暂时不管。\n\n验证是否连接成功，连接成功显示`Hi baoyuzhang! You've successfully authenticated, but GitHub does not provide shell access.`。如下：\n[![\"验证是否连接成功\"](https://baoyuzhang.github.io/img/2017-04-29_160356.png)](https://baoyuzhang.github.io/img/2017-04-29_160356.png)\n\n### Github中添加SSH Key\n\n登录github，点击个人头像打开”settings”，再打开”SSH and GPG keys”页面，然后点击”New SSH Key”，填上任意title，在”Key”文本框里黏贴id_rsa.pub文件的内容，点击 Add Key，你就应该可以看到已经添加的key。如下：\n[![\"Github中添加SSH Key\"](https://baoyuzhang.github.io/img/2017-04-29_155435.png)](https://baoyuzhang.github.io/img/2017-04-29_155435.png)\n\n### 添加远程库\n\n#### 先创建本地git仓库，再创建github仓库，两个仓库同步\n\n现在的情景是：我们已经在本地创建了一个Git仓库后，又想在github创建一个Git仓库，并且希望这两个仓库进行远程同步，这样github的仓库可以作为备份，又可以其他人通过该仓库来协作。\n\n首先，登录github上，然后在右上角点击”+”找到”New repository”创建一个新的仓库。如下：\n[![\"create a new repo\"](https://baoyuzhang.github.io/img/2017-04-29_161046.png)](https://baoyuzhang.github.io/img/2017-04-29_161046.png)\n[![\"create a new repo\"](https://baoyuzhang.github.io/img/2017-04-29_161331.png)](https://baoyuzhang.github.io/img/2017-04-29_161331.png)\n\n在Repository name填入testgit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：\n[![\"new repo\"](https://baoyuzhang.github.io/img/2017-04-29_161433.png)](https://baoyuzhang.github.io/img/2017-04-29_161433.png)\n\n目前，在GitHub上的这个testgit仓库还是空的。现在把已有的本地仓库testgit与之关联，然后，把本地仓库的内容推送到GitHub仓库。\n[![\"推送到GitHub仓库\"](https://baoyuzhang.github.io/img/2017-04-29_162558.png)](https://baoyuzhang.github.io/img/2017-04-29_162558.png)\n\n把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程。\n\n由于远程库是空的，我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。推送成功后，可以立刻在github页面中看到远程库的内容已经和本地一模一样了：\n[![\"一模一样\"](https://baoyuzhang.github.io/img/2017-04-29_163139.png)](https://baoyuzhang.github.io/img/2017-04-29_163139.png)\n\n从现在起，只要本地作了提交，通过命令`git push origin master`就可以把本地master分支的最新修改推送到github上了，现在你就拥有了真正的分布式版本库了。\n\n#### 先创建github仓库，再从github仓库克隆\n\n上面我们了解了先有本地库，后有远程库时候，如何关联远程库。现在我们想，假如远程库有新的内容了，我想克隆到本地来 如何克隆呢？\n\n首先，登录github，创建一个新的仓库，名字叫testgit2.如下：\n[![\"create a new repo\"](https://baoyuzhang.github.io/img/2017-04-29_161046.png)](https://baoyuzhang.github.io/img/2017-04-29_161046.png)\n[![\"create a new repo\"](https://baoyuzhang.github.io/img/2017-04-29_163601.png)](https://baoyuzhang.github.io/img/2017-04-29_163601.png)\n[![\"create a new repo\"](https://baoyuzhang.github.io/img/2017-04-29_163651.png)](https://baoyuzhang.github.io/img/2017-04-29_163651.png)\n\n现在，远程库已经准备好了，下一步是使用命令git clone克隆一个本地库了。如下：\n[![\"克隆一个本地库\"](https://baoyuzhang.github.io/img/2017-04-29_164025.png)](https://baoyuzhang.github.io/img/2017-04-29_164025.png)\n在本地目录就生成了testgit2目录，如下：\n[![\"克隆一个本地库\"](https://baoyuzhang.github.io/img/2017-04-29_164053.png)](https://baoyuzhang.github.io/img/2017-04-29_164053.png)\n\n## Git常用指令\n\n| 命令                                                         | b释义                                                        | 备注                                                         |\n| :----------------------------------------------------------- | :----------------------------------------------------------- | :----------------------------------------------------------- |\n| **1.创建版本库repository**                                   |                                                              |                                                              |\n| **打开所在目录**                                             |                                                              |                                                              |\n| cd folder                                                    | 打开文件夹                                                   |                                                              |\n| mkdir folder                                                 | 新建文件夹                                                   |                                                              |\n| pwd                                                          | 显示当前目录                                                 |                                                              |\n| **初始化：将当前目录变为git仓库**                            |                                                              |                                                              |\n| git init                                                     | 当前目录→git可管理仓库                                       |                                                              |\n| **添加文件到版本库**                                         |                                                              |                                                              |\n| git add file                                                 | 将file文件添加到暂存区                                       |                                                              |\n| git commit -m “提交说明”                                     | 将暂存区中所有文件提交到仓库                                 |                                                              |\n| git status                                                   | 查看当前目录中是否有文件未提交                               |                                                              |\n| **2.修改和版本回退**                                         |                                                              |                                                              |\n| **修改文件内容**                                             |                                                              |                                                              |\n| git diff file                                                | 查看file文件修改内容                                         |                                                              |\n| **查看历史记录**                                             |                                                              |                                                              |\n| git log                                                      | 查看历史记录                                                 |                                                              |\n| git log –pretty=oneline                                      | 查看历史记录（简洁版）                                       |                                                              |\n| **版本回退**                                                 |                                                              |                                                              |\n| git reset –hard HEAD^                                        | 退回到上个版本                                               |                                                              |\n| git reset –hard HEAD^^                                       | 退回到上上个版本                                             |                                                              |\n| git reset –hard HEAD~100                                     | 退回到前100个版本                                            |                                                              |\n| **恢复最新版本**                                             |                                                              |                                                              |\n| git reflog                                                   | 获取全部版本号                                               |                                                              |\n| git reset –hard 版本号                                       | 退回到版本号的版本                                           |                                                              |\n| cat file                                                     | 查看文件内容                                                 |                                                              |\n| **3.撤销修改、删除文件、恢复文件**                           |                                                              |                                                              |\n| **撤销修改**                                                 |                                                              |                                                              |\n| git checkout – file                                          | 丢弃file文件在工作区的修改（工作区-暂存区-版本库，回到上一阶段的修改）a.工作区修改后没有add到暂存区：回到和版本库一样的状态；b.工作区修改后add到暂存区后又有修改：回到添加暂存区后的状态 | 如果没有–，则为创建分支命令                                  |\n| **删除和恢复文件**                                           |                                                              |                                                              |\n| rm file                                                      | 删除工作区中的file文件                                       | a.想要删除版本库中的file文件：直接commit掉；b.想要从版本库中删除file文件：git checkout – file |\n| git checkout – file                                          | 丢弃file文件在工作区的修改（工作区-暂存区-版本库，回到上一阶段的修改）a.工作区修改后没有add到暂存区：回到和版本库一样的状态；b.工作区修改后add到暂存区后又有修改：回到添加暂存区后的状态 | 如果没有–，则为创建分支命令                                  |\n| **4.创建、合并分支**                                         |                                                              |                                                              |\n| **创建、合并分支**                                           |                                                              |                                                              |\n| git branch                                                   | 查看分支                                                     | 列出所有分支，当前分支前有星号                               |\n| git branch xxx                                               | 创建分支xxx                                                  |                                                              |\n| git checkout xxx                                             | 切换到分支xxx                                                |                                                              |\n| git checkout -b xxx                                          | 创建 + 切换分支xxx                                           | 相当于`git branch xxx`和`git checkout xxx`                   |\n| git merge xxx                                                | 在主分支上合并xxx分支                                        | “Fast-forward“快进模式”：直接把master指向xxx的当前提交；删除分支后，丢掉分支信息CONFLICT：产生冲突；删除分支后，保留分支信息” |\n| git branch -d xxx                                            | 删除分支xxx                                                  |                                                              |\n| **解决冲突**                                                 |                                                              |                                                              |\n| git log –graph –pretty=oneline –abbrev-commit                | 带参数的git log，查看分支合并图                              | 删除分支后，保留分支信息                                     |\n| **“Fast forward”模式 no-ff**                                 |                                                              |                                                              |\n| git merge –no-ff -m “merge with no-ff” xxx                   | 合并分支xxx，–no-ff：禁用Fast-forward“快进模式”              | 删除分支后，保留分支信息                                     |\n| **5.bug分支**                                                |                                                              |                                                              |\n| git stash                                                    | 隐藏当前分支的工作现场                                       |                                                              |\n| git stash list                                               | 查看stash隐藏的内容                                          |                                                              |\n| git stash apply                                              | 恢复stash隐藏内容                                            |                                                              |\n| git stash drop                                               | 删除stash内容                                                |                                                              |\n| git stash pop                                                | 恢复并删除stash隐藏内容                                      |                                                              |\n| **6.Github远程仓库**                                         |                                                              |                                                              |\n| **创建SSH Key**                                              |                                                              |                                                              |\n| ssh-keygen -t rsa –C “[youremail@example.com](mailto:youremail@example.com)” | 创建SSH Key                                                  | id_rsa是私钥，不能泄露出去;id_rsa.pub是公钥，可以放心地告诉任何人” |\n| **Github中添加SSH Key**                                      |                                                              |                                                              |\n| **添加远程库**                                               |                                                              |                                                              |\n| **a.先创建本地git仓库，再创建github仓库，两个仓库同步**      |                                                              |                                                              |\n| git remote add origin https://github.com/xxx/xxx.git         | 添加github地址                                               |                                                              |\n| git push -u origin master                                    | 第一次使用时执行该命令，将本地的master分支和远程的master分支关联起来，并把将其推送到远程” |                                                              |\n| git push origin master                                       | 将本地master分支的最新修改推送到github                       |                                                              |\n| **b.先创建github仓库，再从github仓库**                       |                                                              |                                                              |\n| git clone https://github.com/xxx/xxx                         |                                                              |                                                              |\n","tags":["转载","github"],"categories":["工具"]},{"title":"Hexo 标签语法","url":"/undefined/a73a9dd5.html","content":"\n## 标签插件（Tag）\n\n标签插件帮助开发者在文章中快速插入内容。\n\n### 概要\n\n```\nhexo.extend.tag.register(name, function(args, content){\n}, options);\n```\n\n标签函数会传入两个参数：`args` 和 `content`，前者代表开发者在使用标签插件时传入的参数，而后者则是标签插件所覆盖的内容。\n\n从 Hexo 3 开始，因为新增了非同步渲染功能，而改用 [Nunjucks](http://mozilla.github.io/nunjucks/) 作为渲染引擎，其行为可能会与过去使用的 [Swig](http://paularmstrong.github.io/swig/) 有些许差异。\n\n### 移除标签插件\n\nUse `unregister()` to replace existing [tag plugins](https://hexo.io/docs/tag-plugins) with custom functions.\n\n```\nhexo.extend.tag.unregister(name);\n```\n\n**示例**\n\n```\nconst tagFn = (args, content) => {\n  content = 'something';\n  return content;\n};\n\n// https://hexo.io/docs/tag-plugins#YouTube\nhexo.extend.tag.unregister('youtube');\n\nhexo.extend.tag.register('youtube', tagFn);\n```\n\n### 选项\n\n### ends\n\n使用结束标签，此选项默认为 `false`。\n\n### async\n\n开启非同步模式，此选项默认为 `false`。\n\n### 范例\n\n#### 没有结束标签\n\n插入 Youtube 影片。\n\n```\nhexo.extend.tag.register('youtube', function(args){\n  var id = args[0];\n  return '<div class=\"video-container\"><iframe width=\"560\" height=\"315\" src=\"http://www.youtube.com/embed/' + id + '\" frameborder=\"0\" allowfullscreen></iframe></div>';\n});\n```\n\n#### 有结束标签\n\n插入 pull quote。\n\n```\nhexo.extend.tag.register('pullquote', function(args, content){\n  var className =  args.join(' ');\n  return '<blockquote class=\"pullquote' + className + '\">' + content + '</blockquote>';\n}, {ends: true});\n```\n\n#### 非同步渲染\n\n插入文件。\n\n```\nvar fs = require('hexo-fs');\nvar pathFn = require('path');\n\nhexo.extend.tag.register('include_code', function(args){\n  var filename = args[0];\n  var path = pathFn.join(hexo.source_dir, filename);\n  \n  return fs.readFile(path).then(function(content){\n    return '<pre><code>' + content + '</code></pre>';\n  });\n}, {async: true});\n```\n\n### Front-matter and user configuration\n\nAny of the following options is valid:\n\n1.\n\n```\nhexo.extend.tag.register('foo', function (args) {\n  const [firstArg] = args;\n\n  // User config\n  const { config } = hexo;\n  const editor = config.author + firstArg;\n\n  // Theme config\n  const { config: themeCfg } = hexo.theme;\n  if (themeCfg.fancybox) // do something...\n\n  // Front-matter\n  const { title } = this; // article's (post/page) title\n\n  // Article's content\n  const { _content } = this; // original content\n  const { content } = this; // HTML-rendered content\n\n  return 'foo';\n});\n```\n\n2.\n\n```\nindex.jshexo.extend.tag.register('foo', require('./lib/foo')(hexo));\nlib/foo.jsmodule.exports = hexo => {\n  return function fooFn(args) {\n    const [firstArg] = args;\n\n    const { config } = hexo;\n    const editor = config.author + firstArg;\n\n    const { config: themeCfg } = hexo.theme;\n    if (themeCfg.fancybox) // do something...\n\n    const { title, _content, content } = this;\n\n    return 'foo';\n  };\n};\n```\n\n## 标签插件（Tag Plugins）\n\n标签插件和 Front-matter 中的标签不同，它们是用于在文章中快速插入特定内容的插件。\n\n虽然你可以使用任何格式书写你的文章，但是标签插件永远可用，且语法也都是一致的。\n\n*Tag plugins should not be wrapped inside Markdown syntax, e.g. `[]({% post_path lorem-ipsum %})` is not supported.*\n\n### 引用块\n\n在文章中插入引言，可包含作者、来源和标题。\n\n**别号：** quote\n\n```\n{% blockquote [author[, source]] [link] [source_link_title] %}\ncontent\n{% endblockquote %}\n```\n\n#### 样例\n\n**没有提供参数，则只输出普通的 blockquote**\n\n```\n{% blockquote %}\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.\n{% endblockquote %}\n```\n\n> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.\n\n**引用书上的句子**\n\n```\n{% blockquote David Levithan, Wide Awake %}\nDo not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.\n{% endblockquote %}\n```\n\n> Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.\n>\n> **David Levithan**Wide Awake\n\n**引用 Twitter**\n\n```\n{% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %}\nNEW: DevDocs now comes with syntax highlighting. http://devdocs.io\n{% endblockquote %}\n```\n\n> NEW: DevDocs now comes with syntax highlighting. [http://devdocs.io](http://devdocs.io/)\n>\n> **@DevDocs**[twitter.com/devdocs/status/356095192085962752](https://twitter.com/devdocs/status/356095192085962752)\n\n**引用网络上的文章**\n\n```\n{% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %}\nEvery interaction is both precious and an opportunity to delight.\n{% endblockquote %}\n```\n\n> Every interaction is both precious and an opportunity to delight.\n>\n> **Seth Godin**[Welcome to Island Marketing](http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html)\n\n### 代码块\n\n在文章中插入代码。\n\n**别名：** code\n\n```\n{% codeblock [title] [lang:language] [url] [link text] [additional options] %}\ncode snippet\n{% endcodeblock %}\n```\n\nSpecify additional options in `option:value` format, e.g. `line_number:false first_line:5`.\n\n| Extra Options | Description                                                  | Default |\n| :------------ | :----------------------------------------------------------- | :------ |\n| `line_number` | Show line number                                             | `true`  |\n| `highlight`   | Enable code highlighting                                     | `true`  |\n| `first_line`  | Specify the first line number                                | `1`     |\n| `mark`        | Line highlight specific line(s), each value separated by a comma. Specify number range using a dash Example: `mark:1,4-7,10` will mark line 1, 4 to 7 and 10. |         |\n| `wrap`        | Wrap the code block in [``](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table) | `true`  |\n\n#### 样例\n\n**普通的代码块**\n\n```\n{% codeblock %}\nalert('Hello World!');\n{% endcodeblock %}\nalert('Hello World!');\n```\n\n**指定语言**\n\n```\n{% codeblock lang:objc %}\n[rectangle setX: 10 y: 10 width: 20 height: 20];\n{% endcodeblock %}\n[rectangle setX: 10 y: 10 width: 20 height: 20];\n```\n\n**附加说明**\n\n```\n{% codeblock Array.map %}\narray.map(callback[, thisArg])\n{% endcodeblock %}\nArray.maparray.map(callback[, thisArg])\n```\n\n**附加说明和网址**\n\n```\n{% codeblock _.compact http://underscorejs.org/#compact Underscore.js %}\n_.compact([0, 1, false, 2, '', 3]);\n=> [1, 2, 3]\n{% endcodeblock %}\n_.compactUnderscore.js_.compact([0, 1, false, 2, '', 3]);\n=> [1, 2, 3]\n```\n\n### 反引号代码块\n\n另一种形式的代码块，不同的是它使用三个反引号来包裹。\n\n\\``` [language] [title] [url] [link text] code snippet ```\n\n### Pull Quote\n\n在文章中插入 Pull quote。\n\n```\n{% pullquote [class] %}\ncontent\n{% endpullquote %}\n```\n\n### jsFiddle\n\n在文章中嵌入 jsFiddle。\n\n```\n{% jsfiddle shorttag [tabs] [skin] [width] [height] %}\n```\n\n### Gist\n\n在文章中嵌入 Gist。\n\n```\n{% gist gist_id [filename] %}\n```\n\n### iframe\n\n在文章中插入 iframe。\n\n```\n{% iframe url [width] [height] %}\n```\n\n### Image\n\n在文章中插入指定大小的图片。\n\n```\n{% img [class names] /path/to/image [width] [height] '\"title text\" \"alt text\"' %}\n```\n\n### Link\n\n在文章中插入链接，并自动给外部链接添加 `target=\"_blank\"` 属性。\n\n```\n{% link text url [external] [title] %}\n```\n\n### Include Code\n\n插入 `source/downloads/code` 文件夹内的代码文件。`source/downloads/code` 不是固定的，取决于你在配置文件中 `code_dir` 的配置。\n\n```\n{% include_code [title] [lang:language] [from:line] [to:line] path/to/file %}\n```\n\n#### 样例\n\n**嵌入 test.js 文件全文**\n\n```\n{% include_code lang:javascript test.js %}\n```\n\n**只嵌入第 3 行**\n\n```\n{% include_code lang:javascript from:3 to:3 test.js %}\n```\n\n**嵌入第 5 行至第 8 行**\n\n```\n{% include_code lang:javascript from:5 to:8 test.js %}\n```\n\n**嵌入第 5 行至文件结束**\n\n```\n{% include_code lang:javascript from:5 test.js %}\n```\n\n**嵌入第 1 行至第 8 行**\n\n```\n{% include_code lang:javascript to:8 test.js %}\n```\n\n### Youtube\n\n在文章中插入 Youtube 视频。\n\n```\n{% youtube video_id [type] [cookie] %}\n```\n\n#### Examples\n\n**视频**\n\n```\n{% youtube lJIrF4YjHfQ %}\n```\n\n效果：\n\n{% youtube lJIrF4YjHfQ %}\n\n**播放列表**\n\n```\n{% youtube PL9hW1uS6HUfscJ9DHkOSoOX45MjXduUxo 'playlist' %}\n```\n\n效果：\n\n{% youtube PL9hW1uS6HUfscJ9DHkOSoOX45MjXduUxo 'playlist' %}\n\n**隐私模式**\n\n禁止 YouTube cookie\n\n```\n{% youtube lJIrF4YjHfQ false %}\n{% youtube PL9hW1uS6HUfscJ9DHkOSoOX45MjXduUxo 'playlist' false %}\n```\n\n### Vimeo\n\n在文章中插入 Vimeo 视频。\n\n```\n{% vimeo video_id %}\n```\n\n### 引用文章\n\n引用其他文章的链接。\n\n```\n{% post_path filename %}\n{% post_link filename [title] [escape] %}\n```\n\n在使用此标签时可以忽略文章文件所在的路径或者文章的永久链接信息、如语言、日期。\n\n例如，在文章中使用 `{% post_link how-to-bake-a-cake %}` 时，只需有一个名为 `how-to-bake-a-cake.md` 的文章文件即可。即使这个文件位于站点文件夹的 `source/posts/2015-02-my-family-holiday` 目录下、或者文章的永久链接是 `2018/en/how-to-bake-a-cake`，都没有影响。\n\n默认链接文字是文章的标题，你也可以自定义要显示的文本。\n\n默认对文章的标题和自定义标题里的特殊字符进行转义。可以使用`escape`选项，禁止对特殊字符进行转义。\n\n**链接使用文章的标题**\n\n```\n{% post_link hexo-3-8-released %}\n```\n\n[Hexo 3.8.0 Released](https://hexo.io/news/2018/10/19/hexo-3-8-released/)\n\n**链接使用自定义文字**\n\n```\n{% post_link hexo-3-8-released '通往文章的链接' %}\n```\n\n[通往文章的链接](https://hexo.io/news/2018/10/19/hexo-3-8-released/)\n\n**对标题的特殊字符进行转义**\n\n```\n{% post_link hexo-4-released 'How to use <b> tag in title' %}\n```\n\n[How to use  tag in title](https://hexo.io/news/2019/10/14/hexo-4-released/)\n\n**禁止对标题的特殊字符进行转义**\n\n```\n{% post_link hexo-4-released '<b>bold</b> custom title' false %}\n```\n\n[**bold** custom title](https://hexo.io/news/2019/10/14/hexo-4-released/)\n\n### 引用资源\n\n引用文章的资源。\n\n```\n{% asset_path filename %}\n{% asset_img [class names] slug [width] [height] [title text [alt text]] %}\n{% asset_link filename [title] [escape] %}\n```\n\n### Embed image\n\n*hexo-renderer-marked 3.1.0+ can (optionally) resolves the post’s path of an image automatically, refer to [this section](https://hexo.io/docs/asset-folders#Embedding-an-image-using-markdown) on how to enable it.*\n\n“foo.jpg” is located at `http://example.com/2020/01/02/hello/foo.jpg`.\n\n**Default (no option)**\n\n```\n{% asset_img foo.jpg %}\n<img src=\"/2020/01/02/hello/foo.jpg\">\n```\n\n**Custom class**\n\n```\n{% asset_img post-image foo.jpg %}\n<img src=\"/2020/01/02/hello/foo.jpg\" class=\"post-image\">\n```\n\n**Display size**\n\n```\n{% asset_img foo.jpg 500 400 %}\n<img src=\"/2020/01/02/hello/foo.jpg\" width=\"500\" height=\"400\">\n```\n\n**Title & Alt**\n\n```\n{% asset_img logo.svg \"lorem ipsum'dolor'\" %}\n<img src=\"/2020/01/02/hello/foo.jpg\" title=\"lorem ipsum\" alt=\"dolor\">\n```\n\n### Raw\n\n如果您想在文章中插入 Swig 标签，可以尝试使用 Raw 标签，以免发生解析异常。\n\n```\n{% raw %}\ncontent\n{% endraw %}\n```\n\n### 文章摘要和截断\n\n在文章中使用 `<!-- more -->`，那么 `<!-- more -->` 之前的文字将会被视为摘要。首页中将只出现这部分文字，同时这部分文字也会出现在正文之中。\n\n例如：\n\n```\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n<!-- more -->\nUt enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n```\n\n首页中将只会出现\n\n```\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n```\n\n正文中则会出现\n\n```\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n\nUt enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n```\n\n注意，摘要可能会被 Front Matter 中的 `excerpt` 覆盖。\n","tags":["blog","Hexo"],"categories":["Hexo"]},{"title":"Markdown-Emoji-速查","url":"/undefined/ddaea483.html","content":"\n{% note blue 'fas fa-rocket' %}\n\n {% post_link Markdown-基础语法-一 ' 📑 Markdown 基础语法-一' %} - {% post_link Markdown-基础语法-二 ' 📑 Markdown 基础语法-二' %} - {% post_link Markdown-Emoji-速查 ' ✨ Markdown Emoji 速查' %}\n\n{% endnote %}\n\n## People\n\n| ![](https://github.githubassets.com/images/icons/emoji/bowtie.png?v8)`:bowtie:` | 😄![](https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8)`:smile:` | 😆![](https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8)`:laughing:` |\n| :----------------------------------------------------------- | :----------------------------------------------------------- | :----------------------------------------------------------- |\n| 😊![](https://github.githubassets.com/images/icons/emoji/unicode/1f60a.png?v8)`:blush:` | 😃![](https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8)`:smiley:` | ☺![](https://github.githubassets.com/images/icons/emoji/unicode/263a.png?v8)`:relaxed:` |\n| 😏![](https://github.githubassets.com/images/icons/emoji/unicode/1f60f.png?v8)`:smirk:` | 😍![](https://github.githubassets.com/images/icons/emoji/unicode/1f60d.png?v8)`:heart_eyes:` | 😘![](https://github.githubassets.com/images/icons/emoji/unicode/1f618.png?v8)`:kissing_heart:` |\n| 😚![](https://github.githubassets.com/images/icons/emoji/unicode/1f61a.png?v8)`:kissing_closed_eyes:` | 😳![](https://github.githubassets.com/images/icons/emoji/unicode/1f633.png?v8)`:flushed:` | 😌![](https://github.githubassets.com/images/icons/emoji/unicode/1f60c.png?v8)`:relieved:` |\n| 😆![](https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8)`:satisfied:` | 😁![](https://github.githubassets.com/images/icons/emoji/unicode/1f601.png?v8)`:grin:` | 😉![](https://github.githubassets.com/images/icons/emoji/unicode/1f609.png?v8)`:wink:` |\n| 😜![](https://github.githubassets.com/images/icons/emoji/unicode/1f61c.png?v8)`:stuck_out_tongue_winking_eye:` | 😝![](https://github.githubassets.com/images/icons/emoji/unicode/1f61d.png?v8)`:stuck_out_tongue_closed_eyes:` | 😀![](https://github.githubassets.com/images/icons/emoji/unicode/1f600.png?v8)`:grinning:` |\n| 😗![](https://github.githubassets.com/images/icons/emoji/unicode/1f617.png?v8)`:kissing:` | 😙![](https://github.githubassets.com/images/icons/emoji/unicode/1f619.png?v8)`:kissing_smiling_eyes:` | 😛![](https://github.githubassets.com/images/icons/emoji/unicode/1f61b.png?v8)`:stuck_out_tongue:` |\n| 😴![](https://github.githubassets.com/images/icons/emoji/unicode/1f634.png?v8)`:sleeping:` | 😟![](https://github.githubassets.com/images/icons/emoji/unicode/1f61f.png?v8)`:worried:` | 😦![](https://github.githubassets.com/images/icons/emoji/unicode/1f626.png?v8)`:frowning:` |\n| 😧![](https://github.githubassets.com/images/icons/emoji/unicode/1f627.png?v8)`:anguished:` | 😮![](https://github.githubassets.com/images/icons/emoji/unicode/1f62e.png?v8)`:open_mouth:` | 😬![](https://github.githubassets.com/images/icons/emoji/unicode/1f62c.png?v8)`:grimacing:` |\n| 😕![](https://github.githubassets.com/images/icons/emoji/unicode/1f615.png?v8)`:confused:` | 😯![](https://github.githubassets.com/images/icons/emoji/unicode/1f62f.png?v8)`:hushed:` | 😑![](https://github.githubassets.com/images/icons/emoji/unicode/1f611.png?v8)`:expressionless:` |\n| 😒![](https://github.githubassets.com/images/icons/emoji/unicode/1f612.png?v8)`:unamused:` | 😅![](https://github.githubassets.com/images/icons/emoji/unicode/1f605.png?v8)`:sweat_smile:` | 😓![](https://github.githubassets.com/images/icons/emoji/unicode/1f613.png?v8)`:sweat:` |\n| 😥![](https://github.githubassets.com/images/icons/emoji/unicode/1f625.png?v8)`:disappointed_relieved:` | 😩![](https://github.githubassets.com/images/icons/emoji/unicode/1f629.png?v8)`:weary:` | 😔![](https://github.githubassets.com/images/icons/emoji/unicode/1f614.png?v8)`:pensive:` |\n| 😞![](https://github.githubassets.com/images/icons/emoji/unicode/1f61e.png?v8)`:disappointed:` | 😖![](https://github.githubassets.com/images/icons/emoji/unicode/1f616.png?v8)`:confounded:` | 😨![](https://github.githubassets.com/images/icons/emoji/unicode/1f628.png?v8)`:fearful:` |\n| 😰![](https://github.githubassets.com/images/icons/emoji/unicode/1f630.png?v8)`:cold_sweat:` | 😣![](https://github.githubassets.com/images/icons/emoji/unicode/1f623.png?v8)`:persevere:` | 😢![](https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8)`:cry:` |\n| 😭![](https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8)`:sob:` | 😂![](https://github.githubassets.com/images/icons/emoji/unicode/1f602.png?v8)`:joy:` | 😲![](https://github.githubassets.com/images/icons/emoji/unicode/1f632.png?v8)`:astonished:` |\n| 😱![](https://github.githubassets.com/images/icons/emoji/unicode/1f631.png?v8)`:scream:` | ![](https://github.githubassets.com/images/icons/emoji/neckbeard.png?v8)`:neckbeard:` | 😫![](https://github.githubassets.com/images/icons/emoji/unicode/1f62b.png?v8)`:tired_face:` |\n| 😠![](https://github.githubassets.com/images/icons/emoji/unicode/1f620.png?v8)`:angry:` | 😡![](https://github.githubassets.com/images/icons/emoji/unicode/1f621.png?v8)`:rage:` | 😤![](https://github.githubassets.com/images/icons/emoji/unicode/1f624.png?v8)`:triumph:` |\n| 😪![](https://github.githubassets.com/images/icons/emoji/unicode/1f62a.png?v8)`:sleepy:` | 😋![](https://github.githubassets.com/images/icons/emoji/unicode/1f60b.png?v8)`:yum:` | 😷![](https://github.githubassets.com/images/icons/emoji/unicode/1f637.png?v8)`:mask:` |\n| 😎![](https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png?v8)`:sunglasses:` | 😵![](https://github.githubassets.com/images/icons/emoji/unicode/1f635.png?v8)`:dizzy_face:` | 👿![](https://github.githubassets.com/images/icons/emoji/unicode/1f47f.png?v8)`:imp:` |\n| 😈![](https://github.githubassets.com/images/icons/emoji/unicode/1f608.png?v8)`:smiling_imp:` | 😐![](https://github.githubassets.com/images/icons/emoji/unicode/1f610.png?v8)`:neutral_face:` | 😶![](https://github.githubassets.com/images/icons/emoji/unicode/1f636.png?v8)`:no_mouth:` |\n| 😇![](https://github.githubassets.com/images/icons/emoji/unicode/1f607.png?v8)`:innocent:` | 👽![](https://github.githubassets.com/images/icons/emoji/unicode/1f47d.png?v8)`:alien:` | 💛![](https://github.githubassets.com/images/icons/emoji/unicode/1f49b.png?v8)`:yellow_heart:` |\n| 💙![](https://github.githubassets.com/images/icons/emoji/unicode/1f499.png?v8)`:blue_heart:` | 💜![](https://github.githubassets.com/images/icons/emoji/unicode/1f49c.png?v8)`:purple_heart:` | ❤![](https://github.githubassets.com/images/icons/emoji/unicode/2764.png?v8)`:heart:` |\n| 💚![](https://github.githubassets.com/images/icons/emoji/unicode/1f49a.png?v8)`:green_heart:` | 💔![](https://github.githubassets.com/images/icons/emoji/unicode/1f494.png?v8)`:broken_heart:` | 💓![](https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8)`:heartbeat:` |\n| 💗![](https://github.githubassets.com/images/icons/emoji/unicode/1f497.png?v8)`:heartpulse:` | 💕![](https://github.githubassets.com/images/icons/emoji/unicode/1f495.png?v8)`:two_hearts:` | 💞![](https://github.githubassets.com/images/icons/emoji/unicode/1f49e.png?v8)`:revolving_hearts:` |\n| 💘![](https://github.githubassets.com/images/icons/emoji/unicode/1f498.png?v8)`:cupid:` | 💖![](https://github.githubassets.com/images/icons/emoji/unicode/1f496.png?v8)`:sparkling_heart:` | ✨![](https://github.githubassets.com/images/icons/emoji/unicode/2728.png?v8)`:sparkles:` |\n| ⭐![](https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8)`:star:` | 🌟![](https://github.githubassets.com/images/icons/emoji/unicode/1f31f.png?v8)`:star2:` | 💫![](https://github.githubassets.com/images/icons/emoji/unicode/1f4ab.png?v8)`:dizzy:` |\n| 💥![](https://github.githubassets.com/images/icons/emoji/unicode/1f4a5.png?v8)`:boom:` | 💥![](https://github.githubassets.com/images/icons/emoji/unicode/1f4a5.png?v8)`:collision:` | 💢![](https://github.githubassets.com/images/icons/emoji/unicode/1f4a2.png?v8)`:anger:` |\n| ❗![](https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8)`:exclamation:` | ❓![](https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8)`:question:` | ❕![](https://github.githubassets.com/images/icons/emoji/unicode/2755.png?v8)`:grey_exclamation:` |\n| ❔![](https://github.githubassets.com/images/icons/emoji/unicode/2754.png?v8)`:grey_question:` | 💤![](https://github.githubassets.com/images/icons/emoji/unicode/1f4a4.png?v8)`:zzz:` | 💨![](https://github.githubassets.com/images/icons/emoji/unicode/1f4a8.png?v8)`:dash:` |\n| 💦![](https://github.githubassets.com/images/icons/emoji/unicode/1f4a6.png?v8)`:sweat_drops:` | 🎶![](https://github.githubassets.com/images/icons/emoji/unicode/1f3b6.png?v8)`:notes:` | 🎵![](https://github.githubassets.com/images/icons/emoji/unicode/1f3b5.png?v8)`:musical_note:` |\n| 🔥![](https://github.githubassets.com/images/icons/emoji/unicode/1f525.png?v8)`:fire:` | 💩![](https://github.githubassets.com/images/icons/emoji/unicode/1f4a9.png?v8)`:hankey:` | 💩![](https://github.githubassets.com/images/icons/emoji/unicode/1f4a9.png?v8)`:poop:` |\n| 💩![](https://github.githubassets.com/images/icons/emoji/unicode/1f4a9.png?v8)`:shit:` | :+1: `:+1:`                                                  | 👍![](https://github.githubassets.com/images/icons/emoji/unicode/1f44d.png?v8)`:thumbsup:` |\n| :-1: `:-1:`                                                  | 👎![](https://github.githubassets.com/images/icons/emoji/unicode/1f44e.png?v8)`:thumbsdown:` | 👌![](https://github.githubassets.com/images/icons/emoji/unicode/1f44c.png?v8)`:ok_hand:` |\n| 👊![](https://github.githubassets.com/images/icons/emoji/unicode/1f44a.png?v8)`:punch:` | 👊![](https://github.githubassets.com/images/icons/emoji/unicode/1f44a.png?v8)`:facepunch:` | ✊![](https://github.githubassets.com/images/icons/emoji/unicode/270a.png?v8)`:fist:` |\n| ✌![](https://github.githubassets.com/images/icons/emoji/unicode/270c.png?v8)`:v:` | 👋![](https://github.githubassets.com/images/icons/emoji/unicode/1f44b.png?v8)`:wave:` | ✋![](https://github.githubassets.com/images/icons/emoji/unicode/270b.png?v8)`:hand:` |\n| ✋![](https://github.githubassets.com/images/icons/emoji/unicode/270b.png?v8)`:raised_hand:` | 👐![](https://github.githubassets.com/images/icons/emoji/unicode/1f450.png?v8)`:open_hands:` | ☝![](https://github.githubassets.com/images/icons/emoji/unicode/261d.png?v8)`:point_up:` |\n| 👇![](https://github.githubassets.com/images/icons/emoji/unicode/1f447.png?v8)`:point_down:` | 👈![](https://github.githubassets.com/images/icons/emoji/unicode/1f448.png?v8)`:point_left:` | 👉![](https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8)`:point_right:` |\n| 🙌![](https://github.githubassets.com/images/icons/emoji/unicode/1f64c.png?v8)`:raised_hands:` | 🙏![](https://github.githubassets.com/images/icons/emoji/unicode/1f64f.png?v8)`:pray:` | 👆![](https://github.githubassets.com/images/icons/emoji/unicode/1f446.png?v8)`:point_up_2:` |\n| 👏![](https://github.githubassets.com/images/icons/emoji/unicode/1f44f.png?v8)`:clap:` | 💪![](https://github.githubassets.com/images/icons/emoji/unicode/1f4aa.png?v8)`:muscle:` | 🤘![](https://github.githubassets.com/images/icons/emoji/unicode/1f918.png?v8)`:metal:` |\n| 🖕![](https://github.githubassets.com/images/icons/emoji/unicode/1f595.png?v8)`:fu:` | 🚶![](https://github.githubassets.com/images/icons/emoji/unicode/1f6b6.png?v8)`:walking:` | 🏃![](https://github.githubassets.com/images/icons/emoji/unicode/1f3c3.png?v8)`:runner:` |\n| 🏃![](https://github.githubassets.com/images/icons/emoji/unicode/1f3c3.png?v8)`:running:` | 👫![](https://github.githubassets.com/images/icons/emoji/unicode/1f46b.png?v8)`:couple:` | 👪![](https://github.githubassets.com/images/icons/emoji/unicode/1f46a.png?v8)`:family:` |\n| 👬![](https://github.githubassets.com/images/icons/emoji/unicode/1f46c.png?v8)`:two_men_holding_hands:` | 👭![](https://github.githubassets.com/images/icons/emoji/unicode/1f46d.png?v8)`:two_women_holding_hands:` | 💃![](https://github.githubassets.com/images/icons/emoji/unicode/1f483.png?v8)`:dancer:` |\n| 👯![](https://github.githubassets.com/images/icons/emoji/unicode/1f46f.png?v8)`:dancers:` | 🙆♀![](https://github.githubassets.com/images/icons/emoji/unicode/1f646-2640.png?v8)`:ok_woman:` | 🙅![](https://github.githubassets.com/images/icons/emoji/unicode/1f645.png?v8)`:no_good:` |\n| 💁![](https://github.githubassets.com/images/icons/emoji/unicode/1f481.png?v8)`:information_desk_person:` | 🙋![](https://github.githubassets.com/images/icons/emoji/unicode/1f64b.png?v8)`:raising_hand:` | 👰![](https://github.githubassets.com/images/icons/emoji/unicode/1f470.png?v8)`:bride_with_veil:` |\n| :person_with_pouting_face: `:person_with_pouting_face:`      | :person_frowning: `:person_frowning:`                        | 🙇![](https://github.githubassets.com/images/icons/emoji/unicode/1f647.png?v8)`:bow:` |\n| 💏![](https://github.githubassets.com/images/icons/emoji/unicode/1f48f.png?v8)`:couplekiss:` | 💑![](https://github.githubassets.com/images/icons/emoji/unicode/1f491.png?v8)`:couple_with_heart:` | 💆![](https://github.githubassets.com/images/icons/emoji/unicode/1f486.png?v8)`:massage:` |\n| 💇![](https://github.githubassets.com/images/icons/emoji/unicode/1f487.png?v8)`:haircut:` | 💅![](https://github.githubassets.com/images/icons/emoji/unicode/1f485.png?v8)`:nail_care:` | 👦![](https://github.githubassets.com/images/icons/emoji/unicode/1f466.png?v8)`:boy:` |\n| 👧![](https://github.githubassets.com/images/icons/emoji/unicode/1f467.png?v8)`:girl:` | 👩![](https://github.githubassets.com/images/icons/emoji/unicode/1f469.png?v8)`:woman:` | 👨![](https://github.githubassets.com/images/icons/emoji/unicode/1f468.png?v8)`:man:` |\n| 👶![](https://github.githubassets.com/images/icons/emoji/unicode/1f476.png?v8)`:baby:` | 👵![](https://github.githubassets.com/images/icons/emoji/unicode/1f475.png?v8)`:older_woman:` | 👴![](https://github.githubassets.com/images/icons/emoji/unicode/1f474.png?v8)`:older_man:` |\n| :person_with_blond_hair: `:person_with_blond_hair:`          | 👲![](https://github.githubassets.com/images/icons/emoji/unicode/1f472.png?v8)`:man_with_gua_pi_mao:` | 👳♂![](https://github.githubassets.com/images/icons/emoji/unicode/1f473-2642.png?v8)`:man_with_turban:` |\n| 👷![](https://github.githubassets.com/images/icons/emoji/unicode/1f477.png?v8)`:construction_worker:` | 👮![](https://github.githubassets.com/images/icons/emoji/unicode/1f46e.png?v8)`:cop:` | 👼![](https://github.githubassets.com/images/icons/emoji/unicode/1f47c.png?v8)`:angel:` |\n| 👸![](https://github.githubassets.com/images/icons/emoji/unicode/1f478.png?v8)`:princess:` | 😺![](https://github.githubassets.com/images/icons/emoji/unicode/1f63a.png?v8)`:smiley_cat:` | 😸![](https://github.githubassets.com/images/icons/emoji/unicode/1f638.png?v8)`:smile_cat:` |\n| 😻![](https://github.githubassets.com/images/icons/emoji/unicode/1f63b.png?v8)`:heart_eyes_cat:` | 😽![](https://github.githubassets.com/images/icons/emoji/unicode/1f63d.png?v8)`:kissing_cat:` | 😼![](https://github.githubassets.com/images/icons/emoji/unicode/1f63c.png?v8)`:smirk_cat:` |\n| 🙀![](https://github.githubassets.com/images/icons/emoji/unicode/1f640.png?v8)`:scream_cat:` | 😿![](https://github.githubassets.com/images/icons/emoji/unicode/1f63f.png?v8)`:crying_cat_face:` | 😹![](https://github.githubassets.com/images/icons/emoji/unicode/1f639.png?v8)`:joy_cat:` |\n| 😾![](https://github.githubassets.com/images/icons/emoji/unicode/1f63e.png?v8)`:pouting_cat:` | 👹![](https://github.githubassets.com/images/icons/emoji/unicode/1f479.png?v8)`:japanese_ogre:` | 👺![](https://github.githubassets.com/images/icons/emoji/unicode/1f47a.png?v8)`:japanese_goblin:` |\n| 🙈![](https://github.githubassets.com/images/icons/emoji/unicode/1f648.png?v8)`:see_no_evil:` | 🙉![](https://github.githubassets.com/images/icons/emoji/unicode/1f649.png?v8)`:hear_no_evil:` | 🙊![](https://github.githubassets.com/images/icons/emoji/unicode/1f64a.png?v8)`:speak_no_evil:` |\n| 💂♂![](https://github.githubassets.com/images/icons/emoji/unicode/1f482-2642.png?v8)`:guardsman:` | 💀![](https://github.githubassets.com/images/icons/emoji/unicode/1f480.png?v8)`:skull:` | 🐾![](https://github.githubassets.com/images/icons/emoji/unicode/1f43e.png?v8)`:feet:` |\n| 👄![](https://github.githubassets.com/images/icons/emoji/unicode/1f444.png?v8)`:lips:` | 💋![](https://github.githubassets.com/images/icons/emoji/unicode/1f48b.png?v8)`:kiss:` | 💧![](https://github.githubassets.com/images/icons/emoji/unicode/1f4a7.png?v8)`:droplet:` |\n| 👂![](https://github.githubassets.com/images/icons/emoji/unicode/1f442.png?v8)`:ear:` | 👀![](https://github.githubassets.com/images/icons/emoji/unicode/1f440.png?v8)`:eyes:` | 👃![](https://github.githubassets.com/images/icons/emoji/unicode/1f443.png?v8)`:nose:` |\n| 👅![](https://github.githubassets.com/images/icons/emoji/unicode/1f445.png?v8)`:tongue:` | 💌![](https://github.githubassets.com/images/icons/emoji/unicode/1f48c.png?v8)`:love_letter:` | 👤![](https://github.githubassets.com/images/icons/emoji/unicode/1f464.png?v8)`:bust_in_silhouette:` |\n| 👥![](https://github.githubassets.com/images/icons/emoji/unicode/1f465.png?v8)`:busts_in_silhouette:` | 💬![](https://github.githubassets.com/images/icons/emoji/unicode/1f4ac.png?v8)`:speech_balloon:` | 💭![](https://github.githubassets.com/images/icons/emoji/unicode/1f4ad.png?v8)`:thought_balloon:` |\n| ![](https://github.githubassets.com/images/icons/emoji/feelsgood.png?v8)`:feelsgood:` | ![](https://github.githubassets.com/images/icons/emoji/finnadie.png?v8)`:finnadie:` | ![](https://github.githubassets.com/images/icons/emoji/goberserk.png?v8)`:goberserk:` |\n| ![](https://github.githubassets.com/images/icons/emoji/godmode.png?v8)`:godmode:` | ![](https://github.githubassets.com/images/icons/emoji/hurtrealbad.png?v8)`:hurtrealbad:` | ![](https://github.githubassets.com/images/icons/emoji/rage1.png?v8)`:rage1:` |\n| ![](https://github.githubassets.com/images/icons/emoji/rage2.png?v8)`:rage2:` | ![](https://github.githubassets.com/images/icons/emoji/rage3.png?v8)`:rage3:` | ![](https://github.githubassets.com/images/icons/emoji/rage4.png?v8)`:rage4:` |\n| ![](https://github.githubassets.com/images/icons/emoji/suspect.png?v8)`:suspect:` | ![](https://github.githubassets.com/images/icons/emoji/trollface.png?v8)`:trollface:` |                                                              |\n\n## Nature\n\n| ☀![](https://github.githubassets.com/images/icons/emoji/unicode/2600.png?v8)`:sunny:` | ☔![](https://github.githubassets.com/images/icons/emoji/unicode/2614.png?v8)`:umbrella:` | ☁![](https://github.githubassets.com/images/icons/emoji/unicode/2601.png?v8)`:cloud:` |\n| :----------------------------------------------------------- | :----------------------------------------------------------- | :----------------------------------------------------------- |\n| ❄![](https://github.githubassets.com/images/icons/emoji/unicode/2744.png?v8)`:snowflake:` | ⛄![](https://github.githubassets.com/images/icons/emoji/unicode/26c4.png?v8)`:snowman:` | ⚡![](https://github.githubassets.com/images/icons/emoji/unicode/26a1.png?v8)`:zap:` |\n| 🌀![](https://github.githubassets.com/images/icons/emoji/unicode/1f300.png?v8)`:cyclone:` | 🌁![](https://github.githubassets.com/images/icons/emoji/unicode/1f301.png?v8)`:foggy:` | 🌊![](https://github.githubassets.com/images/icons/emoji/unicode/1f30a.png?v8)`:ocean:` |\n| 🐱![](https://github.githubassets.com/images/icons/emoji/unicode/1f431.png?v8)`:cat:` | 🐶![](https://github.githubassets.com/images/icons/emoji/unicode/1f436.png?v8)`:dog:` | 🐭![](https://github.githubassets.com/images/icons/emoji/unicode/1f42d.png?v8)`:mouse:` |\n| 🐹![](https://github.githubassets.com/images/icons/emoji/unicode/1f439.png?v8)`:hamster:` | 🐰![](https://github.githubassets.com/images/icons/emoji/unicode/1f430.png?v8)`:rabbit:` | 🐺![](https://github.githubassets.com/images/icons/emoji/unicode/1f43a.png?v8)`:wolf:` |\n| 🐸![](https://github.githubassets.com/images/icons/emoji/unicode/1f438.png?v8)`:frog:` | 🐯![](https://github.githubassets.com/images/icons/emoji/unicode/1f42f.png?v8)`:tiger:` | 🐨![](https://github.githubassets.com/images/icons/emoji/unicode/1f428.png?v8)`:koala:` |\n| 🐻![](https://github.githubassets.com/images/icons/emoji/unicode/1f43b.png?v8)`:bear:` | 🐷![](https://github.githubassets.com/images/icons/emoji/unicode/1f437.png?v8)`:pig:` | 🐽![](https://github.githubassets.com/images/icons/emoji/unicode/1f43d.png?v8)`:pig_nose:` |\n| 🐮![](https://github.githubassets.com/images/icons/emoji/unicode/1f42e.png?v8)`:cow:` | 🐗![](https://github.githubassets.com/images/icons/emoji/unicode/1f417.png?v8)`:boar:` | 🐵![](https://github.githubassets.com/images/icons/emoji/unicode/1f435.png?v8)`:monkey_face:` |\n| 🐒![](https://github.githubassets.com/images/icons/emoji/unicode/1f412.png?v8)`:monkey:` | 🐴![](https://github.githubassets.com/images/icons/emoji/unicode/1f434.png?v8)`:horse:` | 🐎![](https://github.githubassets.com/images/icons/emoji/unicode/1f40e.png?v8)`:racehorse:` |\n| 🐫![](https://github.githubassets.com/images/icons/emoji/unicode/1f42b.png?v8)`:camel:` | 🐑![](https://github.githubassets.com/images/icons/emoji/unicode/1f411.png?v8)`:sheep:` | 🐘![](https://github.githubassets.com/images/icons/emoji/unicode/1f418.png?v8)`:elephant:` |\n| 🐼![](https://github.githubassets.com/images/icons/emoji/unicode/1f43c.png?v8)`:panda_face:` | 🐍![](https://github.githubassets.com/images/icons/emoji/unicode/1f40d.png?v8)`:snake:` | 🐦![](https://github.githubassets.com/images/icons/emoji/unicode/1f426.png?v8)`:bird:` |\n| 🐤![](https://github.githubassets.com/images/icons/emoji/unicode/1f424.png?v8)`:baby_chick:` | 🐥![](https://github.githubassets.com/images/icons/emoji/unicode/1f425.png?v8)`:hatched_chick:` | 🐣![](https://github.githubassets.com/images/icons/emoji/unicode/1f423.png?v8)`:hatching_chick:` |\n| 🐔![](https://github.githubassets.com/images/icons/emoji/unicode/1f414.png?v8)`:chicken:` | 🐧![](https://github.githubassets.com/images/icons/emoji/unicode/1f427.png?v8)`:penguin:` | 🐢![](https://github.githubassets.com/images/icons/emoji/unicode/1f422.png?v8)`:turtle:` |\n| 🐛![](https://github.githubassets.com/images/icons/emoji/unicode/1f41b.png?v8)`:bug:` | 🐝![](https://github.githubassets.com/images/icons/emoji/unicode/1f41d.png?v8)`:honeybee:` | 🐜![](https://github.githubassets.com/images/icons/emoji/unicode/1f41c.png?v8)`:ant:` |\n| 🐞![](https://github.githubassets.com/images/icons/emoji/unicode/1f41e.png?v8)`:beetle:` | 🐌![](https://github.githubassets.com/images/icons/emoji/unicode/1f40c.png?v8)`:snail:` | 🐙![](https://github.githubassets.com/images/icons/emoji/unicode/1f419.png?v8)`:octopus:` |\n| 🐠![](https://github.githubassets.com/images/icons/emoji/unicode/1f420.png?v8)`:tropical_fish:` | 🐟![](https://github.githubassets.com/images/icons/emoji/unicode/1f41f.png?v8)`:fish:` | 🐳![](https://github.githubassets.com/images/icons/emoji/unicode/1f433.png?v8)`:whale:` |\n| 🐋![](https://github.githubassets.com/images/icons/emoji/unicode/1f40b.png?v8)`:whale2:` | 🐬![](https://github.githubassets.com/images/icons/emoji/unicode/1f42c.png?v8)`:dolphin:` | 🐄![](https://github.githubassets.com/images/icons/emoji/unicode/1f404.png?v8)`:cow2:` |\n| 🐏![](https://github.githubassets.com/images/icons/emoji/unicode/1f40f.png?v8)`:ram:` | 🐀![](https://github.githubassets.com/images/icons/emoji/unicode/1f400.png?v8)`:rat:` | 🐃![](https://github.githubassets.com/images/icons/emoji/unicode/1f403.png?v8)`:water_buffalo:` |\n| 🐅![](https://github.githubassets.com/images/icons/emoji/unicode/1f405.png?v8)`:tiger2:` | 🐇![](https://github.githubassets.com/images/icons/emoji/unicode/1f407.png?v8)`:rabbit2:` | 🐉![](https://github.githubassets.com/images/icons/emoji/unicode/1f409.png?v8)`:dragon:` |\n| 🐐![](https://github.githubassets.com/images/icons/emoji/unicode/1f410.png?v8)`:goat:` | 🐓![](https://github.githubassets.com/images/icons/emoji/unicode/1f413.png?v8)`:rooster:` | 🐕![](https://github.githubassets.com/images/icons/emoji/unicode/1f415.png?v8)`:dog2:` |\n| 🐖![](https://github.githubassets.com/images/icons/emoji/unicode/1f416.png?v8)`:pig2:` | 🐁![](https://github.githubassets.com/images/icons/emoji/unicode/1f401.png?v8)`:mouse2:` | 🐂![](https://github.githubassets.com/images/icons/emoji/unicode/1f402.png?v8)`:ox:` |\n| 🐲![](https://github.githubassets.com/images/icons/emoji/unicode/1f432.png?v8)`:dragon_face:` | 🐡![](https://github.githubassets.com/images/icons/emoji/unicode/1f421.png?v8)`:blowfish:` | 🐊![](https://github.githubassets.com/images/icons/emoji/unicode/1f40a.png?v8)`:crocodile:` |\n| 🐪![](https://github.githubassets.com/images/icons/emoji/unicode/1f42a.png?v8)`:dromedary_camel:` | 🐆![](https://github.githubassets.com/images/icons/emoji/unicode/1f406.png?v8)`:leopard:` | 🐈![](https://github.githubassets.com/images/icons/emoji/unicode/1f408.png?v8)`:cat2:` |\n| 🐩![](https://github.githubassets.com/images/icons/emoji/unicode/1f429.png?v8)`:poodle:` | 🐾![](https://github.githubassets.com/images/icons/emoji/unicode/1f43e.png?v8)`:paw_prints:` | 💐![](https://github.githubassets.com/images/icons/emoji/unicode/1f490.png?v8)`:bouquet:` |\n| 🌸![](https://github.githubassets.com/images/icons/emoji/unicode/1f338.png?v8)`:cherry_blossom:` | 🌷![](https://github.githubassets.com/images/icons/emoji/unicode/1f337.png?v8)`:tulip:` | 🍀![](https://github.githubassets.com/images/icons/emoji/unicode/1f340.png?v8)`:four_leaf_clover:` |\n| 🌹![](https://github.githubassets.com/images/icons/emoji/unicode/1f339.png?v8)`:rose:` | 🌻![](https://github.githubassets.com/images/icons/emoji/unicode/1f33b.png?v8)`:sunflower:` | 🌺![](https://github.githubassets.com/images/icons/emoji/unicode/1f33a.png?v8)`:hibiscus:` |\n| 🍁![](https://github.githubassets.com/images/icons/emoji/unicode/1f341.png?v8)`:maple_leaf:` | 🍃![](https://github.githubassets.com/images/icons/emoji/unicode/1f343.png?v8)`:leaves:` | 🍂![](https://github.githubassets.com/images/icons/emoji/unicode/1f342.png?v8)`:fallen_leaf:` |\n| 🌿![](https://github.githubassets.com/images/icons/emoji/unicode/1f33f.png?v8)`:herb:` | 🍄![](https://github.githubassets.com/images/icons/emoji/unicode/1f344.png?v8)`:mushroom:` | 🌵![](https://github.githubassets.com/images/icons/emoji/unicode/1f335.png?v8)`:cactus:` |\n| 🌴![](https://github.githubassets.com/images/icons/emoji/unicode/1f334.png?v8)`:palm_tree:` | 🌲![](https://github.githubassets.com/images/icons/emoji/unicode/1f332.png?v8)`:evergreen_tree:` | 🌳![](https://github.githubassets.com/images/icons/emoji/unicode/1f333.png?v8)`:deciduous_tree:` |\n| 🌰![](https://github.githubassets.com/images/icons/emoji/unicode/1f330.png?v8)`:chestnut:` | 🌱![](https://github.githubassets.com/images/icons/emoji/unicode/1f331.png?v8)`:seedling:` | 🌼![](https://github.githubassets.com/images/icons/emoji/unicode/1f33c.png?v8)`:blossom:` |\n| 🌾![](https://github.githubassets.com/images/icons/emoji/unicode/1f33e.png?v8)`:ear_of_rice:` | 🐚![](https://github.githubassets.com/images/icons/emoji/unicode/1f41a.png?v8)`:shell:` | 🌐![](https://github.githubassets.com/images/icons/emoji/unicode/1f310.png?v8)`:globe_with_meridians:` |\n| 🌞![](https://github.githubassets.com/images/icons/emoji/unicode/1f31e.png?v8)`:sun_with_face:` | 🌝![](https://github.githubassets.com/images/icons/emoji/unicode/1f31d.png?v8)`:full_moon_with_face:` | 🌚![](https://github.githubassets.com/images/icons/emoji/unicode/1f31a.png?v8)`:new_moon_with_face:` |\n| 🌑![](https://github.githubassets.com/images/icons/emoji/unicode/1f311.png?v8)`:new_moon:` | 🌒![](https://github.githubassets.com/images/icons/emoji/unicode/1f312.png?v8)`:waxing_crescent_moon:` | 🌓![](https://github.githubassets.com/images/icons/emoji/unicode/1f313.png?v8)`:first_quarter_moon:` |\n| 🌔![](https://github.githubassets.com/images/icons/emoji/unicode/1f314.png?v8)`:waxing_gibbous_moon:` | 🌕![](https://github.githubassets.com/images/icons/emoji/unicode/1f315.png?v8)`:full_moon:` | 🌖![](https://github.githubassets.com/images/icons/emoji/unicode/1f316.png?v8)`:waning_gibbous_moon:` |\n| 🌗![](https://github.githubassets.com/images/icons/emoji/unicode/1f317.png?v8)`:last_quarter_moon:` | 🌘![](https://github.githubassets.com/images/icons/emoji/unicode/1f318.png?v8)`:waning_crescent_moon:` | 🌜![](https://github.githubassets.com/images/icons/emoji/unicode/1f31c.png?v8)`:last_quarter_moon_with_face:` |\n| 🌛![](https://github.githubassets.com/images/icons/emoji/unicode/1f31b.png?v8)`:first_quarter_moon_with_face:` | 🌔![](https://github.githubassets.com/images/icons/emoji/unicode/1f314.png?v8)`:moon:` | 🌍![](https://github.githubassets.com/images/icons/emoji/unicode/1f30d.png?v8)`:earth_africa:` |\n| 🌎![](https://github.githubassets.com/images/icons/emoji/unicode/1f30e.png?v8)`:earth_americas:` | 🌏![](https://github.githubassets.com/images/icons/emoji/unicode/1f30f.png?v8)`:earth_asia:` | 🌋![](https://github.githubassets.com/images/icons/emoji/unicode/1f30b.png?v8)`:volcano:` |\n| 🌌![](https://github.githubassets.com/images/icons/emoji/unicode/1f30c.png?v8)`:milky_way:` | ⛅![](https://github.githubassets.com/images/icons/emoji/unicode/26c5.png?v8)`:partly_sunny:` | ![](https://github.githubassets.com/images/icons/emoji/octocat.png?v8)`:octocat:` |\n| :squirrel: `:squirrel:`                                      |                                                              |                                                              |\n\n## Objects\n\n| 🎍![](https://github.githubassets.com/images/icons/emoji/unicode/1f38d.png?v8)`:bamboo:` | 💝![](https://github.githubassets.com/images/icons/emoji/unicode/1f49d.png?v8)`:gift_heart:` | 🎎![](https://github.githubassets.com/images/icons/emoji/unicode/1f38e.png?v8)`:dolls:` |\n| :----------------------------------------------------------- | :----------------------------------------------------------- | :----------------------------------------------------------- |\n| 🎒![](https://github.githubassets.com/images/icons/emoji/unicode/1f392.png?v8)`:school_satchel:` | 🎓![](https://github.githubassets.com/images/icons/emoji/unicode/1f393.png?v8)`:mortar_board:` | 🎏![](https://github.githubassets.com/images/icons/emoji/unicode/1f38f.png?v8)`:flags:` |\n| 🎆![](https://github.githubassets.com/images/icons/emoji/unicode/1f386.png?v8)`:fireworks:` | 🎇![](https://github.githubassets.com/images/icons/emoji/unicode/1f387.png?v8)`:sparkler:` | 🎐![](https://github.githubassets.com/images/icons/emoji/unicode/1f390.png?v8)`:wind_chime:` |\n| 🎑![](https://github.githubassets.com/images/icons/emoji/unicode/1f391.png?v8)`:rice_scene:` | 🎃![](https://github.githubassets.com/images/icons/emoji/unicode/1f383.png?v8)`:jack_o_lantern:` | 👻![](https://github.githubassets.com/images/icons/emoji/unicode/1f47b.png?v8)`:ghost:` |\n| 🎅![](https://github.githubassets.com/images/icons/emoji/unicode/1f385.png?v8)`:santa:` | 🎄![](https://github.githubassets.com/images/icons/emoji/unicode/1f384.png?v8)`:christmas_tree:` | 🎁![](https://github.githubassets.com/images/icons/emoji/unicode/1f381.png?v8)`:gift:` |\n| 🔔![](https://github.githubassets.com/images/icons/emoji/unicode/1f514.png?v8)`:bell:` | 🔕![](https://github.githubassets.com/images/icons/emoji/unicode/1f515.png?v8)`:no_bell:` | 🎋![](https://github.githubassets.com/images/icons/emoji/unicode/1f38b.png?v8)`:tanabata_tree:` |\n| 🎉![](https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8)`:tada:` | 🎊![](https://github.githubassets.com/images/icons/emoji/unicode/1f38a.png?v8)`:confetti_ball:` | 🎈![](https://github.githubassets.com/images/icons/emoji/unicode/1f388.png?v8)`:balloon:` |\n| 🔮![](https://github.githubassets.com/images/icons/emoji/unicode/1f52e.png?v8)`:crystal_ball:` | 💿![](https://github.githubassets.com/images/icons/emoji/unicode/1f4bf.png?v8)`:cd:` | 📀![](https://github.githubassets.com/images/icons/emoji/unicode/1f4c0.png?v8)`:dvd:` |\n| 💾![](https://github.githubassets.com/images/icons/emoji/unicode/1f4be.png?v8)`:floppy_disk:` | 📷![](https://github.githubassets.com/images/icons/emoji/unicode/1f4f7.png?v8)`:camera:` | 📹![](https://github.githubassets.com/images/icons/emoji/unicode/1f4f9.png?v8)`:video_camera:` |\n| 🎥![](https://github.githubassets.com/images/icons/emoji/unicode/1f3a5.png?v8)`:movie_camera:` | 💻![](https://github.githubassets.com/images/icons/emoji/unicode/1f4bb.png?v8)`:computer:` | 📺![](https://github.githubassets.com/images/icons/emoji/unicode/1f4fa.png?v8)`:tv:` |\n| 📱![](https://github.githubassets.com/images/icons/emoji/unicode/1f4f1.png?v8)`:iphone:` | ☎![](https://github.githubassets.com/images/icons/emoji/unicode/260e.png?v8)`:phone:` | ☎![](https://github.githubassets.com/images/icons/emoji/unicode/260e.png?v8)`:telephone:` |\n| 📞![](https://github.githubassets.com/images/icons/emoji/unicode/1f4de.png?v8)`:telephone_receiver:` | 📟![](https://github.githubassets.com/images/icons/emoji/unicode/1f4df.png?v8)`:pager:` | 📠![](https://github.githubassets.com/images/icons/emoji/unicode/1f4e0.png?v8)`:fax:` |\n| 💽![](https://github.githubassets.com/images/icons/emoji/unicode/1f4bd.png?v8)`:minidisc:` | 📼![](https://github.githubassets.com/images/icons/emoji/unicode/1f4fc.png?v8)`:vhs:` | 🔉![](https://github.githubassets.com/images/icons/emoji/unicode/1f509.png?v8)`:sound:` |\n| 🔈![](https://github.githubassets.com/images/icons/emoji/unicode/1f508.png?v8)`:speaker:` | 🔇![](https://github.githubassets.com/images/icons/emoji/unicode/1f507.png?v8)`:mute:` | 📢![](https://github.githubassets.com/images/icons/emoji/unicode/1f4e2.png?v8)`:loudspeaker:` |\n| 📣![](https://github.githubassets.com/images/icons/emoji/unicode/1f4e3.png?v8)`:mega:` | ⌛![](https://github.githubassets.com/images/icons/emoji/unicode/231b.png?v8)`:hourglass:` | ⏳![](https://github.githubassets.com/images/icons/emoji/unicode/23f3.png?v8)`:hourglass_flowing_sand:` |\n| ⏰![](https://github.githubassets.com/images/icons/emoji/unicode/23f0.png?v8)`:alarm_clock:` | ⌚![](https://github.githubassets.com/images/icons/emoji/unicode/231a.png?v8)`:watch:` | 📻![](https://github.githubassets.com/images/icons/emoji/unicode/1f4fb.png?v8)`:radio:` |\n| 📡![](https://github.githubassets.com/images/icons/emoji/unicode/1f4e1.png?v8)`:satellite:` | ➿![](https://github.githubassets.com/images/icons/emoji/unicode/27bf.png?v8)`:loop:` | 🔍![](https://github.githubassets.com/images/icons/emoji/unicode/1f50d.png?v8)`:mag:` |\n| 🔎![](https://github.githubassets.com/images/icons/emoji/unicode/1f50e.png?v8)`:mag_right:` | 🔓![](https://github.githubassets.com/images/icons/emoji/unicode/1f513.png?v8)`:unlock:` | 🔒![](https://github.githubassets.com/images/icons/emoji/unicode/1f512.png?v8)`:lock:` |\n| 🔏![](https://github.githubassets.com/images/icons/emoji/unicode/1f50f.png?v8)`:lock_with_ink_pen:` | 🔐![](https://github.githubassets.com/images/icons/emoji/unicode/1f510.png?v8)`:closed_lock_with_key:` | 🔑![](https://github.githubassets.com/images/icons/emoji/unicode/1f511.png?v8)`:key:` |\n| 💡![](https://github.githubassets.com/images/icons/emoji/unicode/1f4a1.png?v8)`:bulb:` | 🔦![](https://github.githubassets.com/images/icons/emoji/unicode/1f526.png?v8)`:flashlight:` | 🔆![](https://github.githubassets.com/images/icons/emoji/unicode/1f506.png?v8)`:high_brightness:` |\n| 🔅![](https://github.githubassets.com/images/icons/emoji/unicode/1f505.png?v8)`:low_brightness:` | 🔌![](https://github.githubassets.com/images/icons/emoji/unicode/1f50c.png?v8)`:electric_plug:` | 🔋![](https://github.githubassets.com/images/icons/emoji/unicode/1f50b.png?v8)`:battery:` |\n| 📲![](https://github.githubassets.com/images/icons/emoji/unicode/1f4f2.png?v8)`:calling:` | ✉![](https://github.githubassets.com/images/icons/emoji/unicode/2709.png?v8)`:email:` | 📫![](https://github.githubassets.com/images/icons/emoji/unicode/1f4eb.png?v8)`:mailbox:` |\n| 📮![](https://github.githubassets.com/images/icons/emoji/unicode/1f4ee.png?v8)`:postbox:` | 🛀![](https://github.githubassets.com/images/icons/emoji/unicode/1f6c0.png?v8)`:bath:` | 🛁![](https://github.githubassets.com/images/icons/emoji/unicode/1f6c1.png?v8)`:bathtub:` |\n| 🚿![](https://github.githubassets.com/images/icons/emoji/unicode/1f6bf.png?v8)`:shower:` | 🚽![](https://github.githubassets.com/images/icons/emoji/unicode/1f6bd.png?v8)`:toilet:` | 🔧![](https://github.githubassets.com/images/icons/emoji/unicode/1f527.png?v8)`:wrench:` |\n| 🔩![](https://github.githubassets.com/images/icons/emoji/unicode/1f529.png?v8)`:nut_and_bolt:` | 🔨![](https://github.githubassets.com/images/icons/emoji/unicode/1f528.png?v8)`:hammer:` | 💺![](https://github.githubassets.com/images/icons/emoji/unicode/1f4ba.png?v8)`:seat:` |\n| 💰![](https://github.githubassets.com/images/icons/emoji/unicode/1f4b0.png?v8)`:moneybag:` | 💴![](https://github.githubassets.com/images/icons/emoji/unicode/1f4b4.png?v8)`:yen:` | 💵![](https://github.githubassets.com/images/icons/emoji/unicode/1f4b5.png?v8)`:dollar:` |\n| 💷![](https://github.githubassets.com/images/icons/emoji/unicode/1f4b7.png?v8)`:pound:` | 💶![](https://github.githubassets.com/images/icons/emoji/unicode/1f4b6.png?v8)`:euro:` | 💳![](https://github.githubassets.com/images/icons/emoji/unicode/1f4b3.png?v8)`:credit_card:` |\n| 💸![](https://github.githubassets.com/images/icons/emoji/unicode/1f4b8.png?v8)`:money_with_wings:` | :e-mail: `:e-mail:`                                          | 📥![](https://github.githubassets.com/images/icons/emoji/unicode/1f4e5.png?v8)`:inbox_tray:` |\n| 📤![](https://github.githubassets.com/images/icons/emoji/unicode/1f4e4.png?v8)`:outbox_tray:` | ✉![](https://github.githubassets.com/images/icons/emoji/unicode/2709.png?v8)`:envelope:` | 📨![](https://github.githubassets.com/images/icons/emoji/unicode/1f4e8.png?v8)`:incoming_envelope:` |\n| 📯![](https://github.githubassets.com/images/icons/emoji/unicode/1f4ef.png?v8)`:postal_horn:` | 📪![](https://github.githubassets.com/images/icons/emoji/unicode/1f4ea.png?v8)`:mailbox_closed:` | 📬![](https://github.githubassets.com/images/icons/emoji/unicode/1f4ec.png?v8)`:mailbox_with_mail:` |\n| 📭![](https://github.githubassets.com/images/icons/emoji/unicode/1f4ed.png?v8)`:mailbox_with_no_mail:` | 🚪![](https://github.githubassets.com/images/icons/emoji/unicode/1f6aa.png?v8)`:door:` | 🚬![](https://github.githubassets.com/images/icons/emoji/unicode/1f6ac.png?v8)`:smoking:` |\n| 💣![](https://github.githubassets.com/images/icons/emoji/unicode/1f4a3.png?v8)`:bomb:` | 🔫![](https://github.githubassets.com/images/icons/emoji/unicode/1f52b.png?v8)`:gun:` | 🔪![](https://github.githubassets.com/images/icons/emoji/unicode/1f52a.png?v8)`:hocho:` |\n| 💊![](https://github.githubassets.com/images/icons/emoji/unicode/1f48a.png?v8)`:pill:` | 💉![](https://github.githubassets.com/images/icons/emoji/unicode/1f489.png?v8)`:syringe:` | 📄![](https://github.githubassets.com/images/icons/emoji/unicode/1f4c4.png?v8)`:page_facing_up:` |\n| 📃![](https://github.githubassets.com/images/icons/emoji/unicode/1f4c3.png?v8)`:page_with_curl:` | 📑![](https://github.githubassets.com/images/icons/emoji/unicode/1f4d1.png?v8)`:bookmark_tabs:` | 📊![](https://github.githubassets.com/images/icons/emoji/unicode/1f4ca.png?v8)`:bar_chart:` |\n| 📈![](https://github.githubassets.com/images/icons/emoji/unicode/1f4c8.png?v8)`:chart_with_upwards_trend:` | 📉![](https://github.githubassets.com/images/icons/emoji/unicode/1f4c9.png?v8)`:chart_with_downwards_trend:` | 📜![](https://github.githubassets.com/images/icons/emoji/unicode/1f4dc.png?v8)`:scroll:` |\n| 📋![](https://github.githubassets.com/images/icons/emoji/unicode/1f4cb.png?v8)`:clipboard:` | 📆![](https://github.githubassets.com/images/icons/emoji/unicode/1f4c6.png?v8)`:calendar:` | 📅![](https://github.githubassets.com/images/icons/emoji/unicode/1f4c5.png?v8)`:date:` |\n| 📇![](https://github.githubassets.com/images/icons/emoji/unicode/1f4c7.png?v8)`:card_index:` | 📁![](https://github.githubassets.com/images/icons/emoji/unicode/1f4c1.png?v8)`:file_folder:` | 📂![](https://github.githubassets.com/images/icons/emoji/unicode/1f4c2.png?v8)`:open_file_folder:` |\n| ✂![](https://github.githubassets.com/images/icons/emoji/unicode/2702.png?v8)`:scissors:` | 📌![](https://github.githubassets.com/images/icons/emoji/unicode/1f4cc.png?v8)`:pushpin:` | 📎![](https://github.githubassets.com/images/icons/emoji/unicode/1f4ce.png?v8)`:paperclip:` |\n| ✒![](https://github.githubassets.com/images/icons/emoji/unicode/2712.png?v8)`:black_nib:` | ✏![](https://github.githubassets.com/images/icons/emoji/unicode/270f.png?v8)`:pencil2:` | 📏![](https://github.githubassets.com/images/icons/emoji/unicode/1f4cf.png?v8)`:straight_ruler:` |\n| 📐![](https://github.githubassets.com/images/icons/emoji/unicode/1f4d0.png?v8)`:triangular_ruler:` | 📕![](https://github.githubassets.com/images/icons/emoji/unicode/1f4d5.png?v8)`:closed_book:` | 📗![](https://github.githubassets.com/images/icons/emoji/unicode/1f4d7.png?v8)`:green_book:` |\n| 📘![](https://github.githubassets.com/images/icons/emoji/unicode/1f4d8.png?v8)`:blue_book:` | 📙![](https://github.githubassets.com/images/icons/emoji/unicode/1f4d9.png?v8)`:orange_book:` | 📓![](https://github.githubassets.com/images/icons/emoji/unicode/1f4d3.png?v8)`:notebook:` |\n| 📔![](https://github.githubassets.com/images/icons/emoji/unicode/1f4d4.png?v8)`:notebook_with_decorative_cover:` | 📒![](https://github.githubassets.com/images/icons/emoji/unicode/1f4d2.png?v8)`:ledger:` | 📚![](https://github.githubassets.com/images/icons/emoji/unicode/1f4da.png?v8)`:books:` |\n| 🔖![](https://github.githubassets.com/images/icons/emoji/unicode/1f516.png?v8)`:bookmark:` | 📛![](https://github.githubassets.com/images/icons/emoji/unicode/1f4db.png?v8)`:name_badge:` | 🔬![](https://github.githubassets.com/images/icons/emoji/unicode/1f52c.png?v8)`:microscope:` |\n| 🔭![](https://github.githubassets.com/images/icons/emoji/unicode/1f52d.png?v8)`:telescope:` | 📰![](https://github.githubassets.com/images/icons/emoji/unicode/1f4f0.png?v8)`:newspaper:` | 🏈![](https://github.githubassets.com/images/icons/emoji/unicode/1f3c8.png?v8)`:football:` |\n| 🏀![](https://github.githubassets.com/images/icons/emoji/unicode/1f3c0.png?v8)`:basketball:` | ⚽![](https://github.githubassets.com/images/icons/emoji/unicode/26bd.png?v8)`:soccer:` | ⚾![](https://github.githubassets.com/images/icons/emoji/unicode/26be.png?v8)`:baseball:` |\n| 🎾![](https://github.githubassets.com/images/icons/emoji/unicode/1f3be.png?v8)`:tennis:` | 🎱![](https://github.githubassets.com/images/icons/emoji/unicode/1f3b1.png?v8)`:8ball:` | 🏉![](https://github.githubassets.com/images/icons/emoji/unicode/1f3c9.png?v8)`:rugby_football:` |\n| 🎳![](https://github.githubassets.com/images/icons/emoji/unicode/1f3b3.png?v8)`:bowling:` | ⛳![](https://github.githubassets.com/images/icons/emoji/unicode/26f3.png?v8)`:golf:` | 🚵![](https://github.githubassets.com/images/icons/emoji/unicode/1f6b5.png?v8)`:mountain_bicyclist:` |\n| 🚴![](https://github.githubassets.com/images/icons/emoji/unicode/1f6b4.png?v8)`:bicyclist:` | 🏇![](https://github.githubassets.com/images/icons/emoji/unicode/1f3c7.png?v8)`:horse_racing:` | 🏂![](https://github.githubassets.com/images/icons/emoji/unicode/1f3c2.png?v8)`:snowboarder:` |\n| 🏊![](https://github.githubassets.com/images/icons/emoji/unicode/1f3ca.png?v8)`:swimmer:` | 🏄![](https://github.githubassets.com/images/icons/emoji/unicode/1f3c4.png?v8)`:surfer:` | 🎿![](https://github.githubassets.com/images/icons/emoji/unicode/1f3bf.png?v8)`:ski:` |\n| ♠![](https://github.githubassets.com/images/icons/emoji/unicode/2660.png?v8)`:spades:` | ♥![](https://github.githubassets.com/images/icons/emoji/unicode/2665.png?v8)`:hearts:` | ♣![](https://github.githubassets.com/images/icons/emoji/unicode/2663.png?v8)`:clubs:` |\n| ♦![](https://github.githubassets.com/images/icons/emoji/unicode/2666.png?v8)`:diamonds:` | 💎![](https://github.githubassets.com/images/icons/emoji/unicode/1f48e.png?v8)`:gem:` | 💍![](https://github.githubassets.com/images/icons/emoji/unicode/1f48d.png?v8)`:ring:` |\n| 🏆![](https://github.githubassets.com/images/icons/emoji/unicode/1f3c6.png?v8)`:trophy:` | 🎼![](https://github.githubassets.com/images/icons/emoji/unicode/1f3bc.png?v8)`:musical_score:` | 🎹![](https://github.githubassets.com/images/icons/emoji/unicode/1f3b9.png?v8)`:musical_keyboard:` |\n| 🎻![](https://github.githubassets.com/images/icons/emoji/unicode/1f3bb.png?v8)`:violin:` | 👾![](https://github.githubassets.com/images/icons/emoji/unicode/1f47e.png?v8)`:space_invader:` | 🎮![](https://github.githubassets.com/images/icons/emoji/unicode/1f3ae.png?v8)`:video_game:` |\n| 🃏![](https://github.githubassets.com/images/icons/emoji/unicode/1f0cf.png?v8)`:black_joker:` | 🎴![](https://github.githubassets.com/images/icons/emoji/unicode/1f3b4.png?v8)`:flower_playing_cards:` | 🎲![](https://github.githubassets.com/images/icons/emoji/unicode/1f3b2.png?v8)`:game_die:` |\n| 🎯![](https://github.githubassets.com/images/icons/emoji/unicode/1f3af.png?v8)`:dart:` | 🀄![](https://github.githubassets.com/images/icons/emoji/unicode/1f004.png?v8)`:mahjong:` | 🎬![](https://github.githubassets.com/images/icons/emoji/unicode/1f3ac.png?v8)`:clapper:` |\n| 📝![](https://github.githubassets.com/images/icons/emoji/unicode/1f4dd.png?v8)`:memo:` | 📝![](https://github.githubassets.com/images/icons/emoji/unicode/1f4dd.png?v8)`:pencil:` | 📖![](https://github.githubassets.com/images/icons/emoji/unicode/1f4d6.png?v8)`:book:` |\n| 🎨![](https://github.githubassets.com/images/icons/emoji/unicode/1f3a8.png?v8)`:art:` | 🎤![](https://github.githubassets.com/images/icons/emoji/unicode/1f3a4.png?v8)`:microphone:` | 🎧![](https://github.githubassets.com/images/icons/emoji/unicode/1f3a7.png?v8)`:headphones:` |\n| 🎺![](https://github.githubassets.com/images/icons/emoji/unicode/1f3ba.png?v8)`:trumpet:` | 🎷![](https://github.githubassets.com/images/icons/emoji/unicode/1f3b7.png?v8)`:saxophone:` | 🎸![](https://github.githubassets.com/images/icons/emoji/unicode/1f3b8.png?v8)`:guitar:` |\n| 👞![](https://github.githubassets.com/images/icons/emoji/unicode/1f45e.png?v8)`:shoe:` | 👡![](https://github.githubassets.com/images/icons/emoji/unicode/1f461.png?v8)`:sandal:` | 👠![](https://github.githubassets.com/images/icons/emoji/unicode/1f460.png?v8)`:high_heel:` |\n| 💄![](https://github.githubassets.com/images/icons/emoji/unicode/1f484.png?v8)`:lipstick:` | 👢![](https://github.githubassets.com/images/icons/emoji/unicode/1f462.png?v8)`:boot:` | 👕![](https://github.githubassets.com/images/icons/emoji/unicode/1f455.png?v8)`:shirt:` |\n| 👕![](https://github.githubassets.com/images/icons/emoji/unicode/1f455.png?v8)`:tshirt:` | 👔![](https://github.githubassets.com/images/icons/emoji/unicode/1f454.png?v8)`:necktie:` | 👚![](https://github.githubassets.com/images/icons/emoji/unicode/1f45a.png?v8)`:womans_clothes:` |\n| 👗![](https://github.githubassets.com/images/icons/emoji/unicode/1f457.png?v8)`:dress:` | 🎽![](https://github.githubassets.com/images/icons/emoji/unicode/1f3bd.png?v8)`:running_shirt_with_sash:` | 👖![](https://github.githubassets.com/images/icons/emoji/unicode/1f456.png?v8)`:jeans:` |\n| 👘![](https://github.githubassets.com/images/icons/emoji/unicode/1f458.png?v8)`:kimono:` | 👙![](https://github.githubassets.com/images/icons/emoji/unicode/1f459.png?v8)`:bikini:` | 🎀![](https://github.githubassets.com/images/icons/emoji/unicode/1f380.png?v8)`:ribbon:` |\n| 🎩![](https://github.githubassets.com/images/icons/emoji/unicode/1f3a9.png?v8)`:tophat:` | 👑![](https://github.githubassets.com/images/icons/emoji/unicode/1f451.png?v8)`:crown:` | 👒![](https://github.githubassets.com/images/icons/emoji/unicode/1f452.png?v8)`:womans_hat:` |\n| 👞![](https://github.githubassets.com/images/icons/emoji/unicode/1f45e.png?v8)`:mans_shoe:` | 🌂![](https://github.githubassets.com/images/icons/emoji/unicode/1f302.png?v8)`:closed_umbrella:` | 💼![](https://github.githubassets.com/images/icons/emoji/unicode/1f4bc.png?v8)`:briefcase:` |\n| 👜![](https://github.githubassets.com/images/icons/emoji/unicode/1f45c.png?v8)`:handbag:` | 👝![](https://github.githubassets.com/images/icons/emoji/unicode/1f45d.png?v8)`:pouch:` | 👛![](https://github.githubassets.com/images/icons/emoji/unicode/1f45b.png?v8)`:purse:` |\n| 👓![](https://github.githubassets.com/images/icons/emoji/unicode/1f453.png?v8)`:eyeglasses:` | 🎣![](https://github.githubassets.com/images/icons/emoji/unicode/1f3a3.png?v8)`:fishing_pole_and_fish:` | ☕![](https://github.githubassets.com/images/icons/emoji/unicode/2615.png?v8)`:coffee:` |\n| 🍵![](https://github.githubassets.com/images/icons/emoji/unicode/1f375.png?v8)`:tea:` | 🍶![](https://github.githubassets.com/images/icons/emoji/unicode/1f376.png?v8)`:sake:` | 🍼![](https://github.githubassets.com/images/icons/emoji/unicode/1f37c.png?v8)`:baby_bottle:` |\n| 🍺![](https://github.githubassets.com/images/icons/emoji/unicode/1f37a.png?v8)`:beer:` | 🍻![](https://github.githubassets.com/images/icons/emoji/unicode/1f37b.png?v8)`:beers:` | 🍸![](https://github.githubassets.com/images/icons/emoji/unicode/1f378.png?v8)`:cocktail:` |\n| 🍹![](https://github.githubassets.com/images/icons/emoji/unicode/1f379.png?v8)`:tropical_drink:` | 🍷![](https://github.githubassets.com/images/icons/emoji/unicode/1f377.png?v8)`:wine_glass:` | 🍴![](https://github.githubassets.com/images/icons/emoji/unicode/1f374.png?v8)`:fork_and_knife:` |\n| 🍕![](https://github.githubassets.com/images/icons/emoji/unicode/1f355.png?v8)`:pizza:` | 🍔![](https://github.githubassets.com/images/icons/emoji/unicode/1f354.png?v8)`:hamburger:` | 🍟![](https://github.githubassets.com/images/icons/emoji/unicode/1f35f.png?v8)`:fries:` |\n| 🍗![](https://github.githubassets.com/images/icons/emoji/unicode/1f357.png?v8)`:poultry_leg:` | 🍖![](https://github.githubassets.com/images/icons/emoji/unicode/1f356.png?v8)`:meat_on_bone:` | 🍝![](https://github.githubassets.com/images/icons/emoji/unicode/1f35d.png?v8)`:spaghetti:` |\n| 🍛![](https://github.githubassets.com/images/icons/emoji/unicode/1f35b.png?v8)`:curry:` | 🍤![](https://github.githubassets.com/images/icons/emoji/unicode/1f364.png?v8)`:fried_shrimp:` | 🍱![](https://github.githubassets.com/images/icons/emoji/unicode/1f371.png?v8)`:bento:` |\n| 🍣![](https://github.githubassets.com/images/icons/emoji/unicode/1f363.png?v8)`:sushi:` | 🍥![](https://github.githubassets.com/images/icons/emoji/unicode/1f365.png?v8)`:fish_cake:` | 🍙![](https://github.githubassets.com/images/icons/emoji/unicode/1f359.png?v8)`:rice_ball:` |\n| 🍘![](https://github.githubassets.com/images/icons/emoji/unicode/1f358.png?v8)`:rice_cracker:` | 🍚![](https://github.githubassets.com/images/icons/emoji/unicode/1f35a.png?v8)`:rice:` | 🍜![](https://github.githubassets.com/images/icons/emoji/unicode/1f35c.png?v8)`:ramen:` |\n| 🍲![](https://github.githubassets.com/images/icons/emoji/unicode/1f372.png?v8)`:stew:` | 🍢![](https://github.githubassets.com/images/icons/emoji/unicode/1f362.png?v8)`:oden:` | 🍡![](https://github.githubassets.com/images/icons/emoji/unicode/1f361.png?v8)`:dango:` |\n| 🥚![](https://github.githubassets.com/images/icons/emoji/unicode/1f95a.png?v8)`:egg:` | 🍞![](https://github.githubassets.com/images/icons/emoji/unicode/1f35e.png?v8)`:bread:` | 🍩![](https://github.githubassets.com/images/icons/emoji/unicode/1f369.png?v8)`:doughnut:` |\n| 🍮![](https://github.githubassets.com/images/icons/emoji/unicode/1f36e.png?v8)`:custard:` | 🍦![](https://github.githubassets.com/images/icons/emoji/unicode/1f366.png?v8)`:icecream:` | 🍨![](https://github.githubassets.com/images/icons/emoji/unicode/1f368.png?v8)`:ice_cream:` |\n| 🍧![](https://github.githubassets.com/images/icons/emoji/unicode/1f367.png?v8)`:shaved_ice:` | 🎂![](https://github.githubassets.com/images/icons/emoji/unicode/1f382.png?v8)`:birthday:` | 🍰![](https://github.githubassets.com/images/icons/emoji/unicode/1f370.png?v8)`:cake:` |\n| 🍪![](https://github.githubassets.com/images/icons/emoji/unicode/1f36a.png?v8)`:cookie:` | 🍫![](https://github.githubassets.com/images/icons/emoji/unicode/1f36b.png?v8)`:chocolate_bar:` | 🍬![](https://github.githubassets.com/images/icons/emoji/unicode/1f36c.png?v8)`:candy:` |\n| 🍭![](https://github.githubassets.com/images/icons/emoji/unicode/1f36d.png?v8)`:lollipop:` | 🍯![](https://github.githubassets.com/images/icons/emoji/unicode/1f36f.png?v8)`:honey_pot:` | 🍎![](https://github.githubassets.com/images/icons/emoji/unicode/1f34e.png?v8)`:apple:` |\n| 🍏![](https://github.githubassets.com/images/icons/emoji/unicode/1f34f.png?v8)`:green_apple:` | 🍊![](https://github.githubassets.com/images/icons/emoji/unicode/1f34a.png?v8)`:tangerine:` | 🍋![](https://github.githubassets.com/images/icons/emoji/unicode/1f34b.png?v8)`:lemon:` |\n| 🍒![](https://github.githubassets.com/images/icons/emoji/unicode/1f352.png?v8)`:cherries:` | 🍇![](https://github.githubassets.com/images/icons/emoji/unicode/1f347.png?v8)`:grapes:` | 🍉![](https://github.githubassets.com/images/icons/emoji/unicode/1f349.png?v8)`:watermelon:` |\n| 🍓![](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png?v8)`:strawberry:` | 🍑![](https://github.githubassets.com/images/icons/emoji/unicode/1f351.png?v8)`:peach:` | 🍈![](https://github.githubassets.com/images/icons/emoji/unicode/1f348.png?v8)`:melon:` |\n| 🍌![](https://github.githubassets.com/images/icons/emoji/unicode/1f34c.png?v8)`:banana:` | 🍐![](https://github.githubassets.com/images/icons/emoji/unicode/1f350.png?v8)`:pear:` | 🍍![](https://github.githubassets.com/images/icons/emoji/unicode/1f34d.png?v8)`:pineapple:` |\n| 🍠![](https://github.githubassets.com/images/icons/emoji/unicode/1f360.png?v8)`:sweet_potato:` | 🍆![](https://github.githubassets.com/images/icons/emoji/unicode/1f346.png?v8)`:eggplant:` | 🍅![](https://github.githubassets.com/images/icons/emoji/unicode/1f345.png?v8)`:tomato:` |\n| 🌽![](https://github.githubassets.com/images/icons/emoji/unicode/1f33d.png?v8)`:corn:` |                                                              |                                                              |\n\n## Places\n\n| 🏠![](https://github.githubassets.com/images/icons/emoji/unicode/1f3e0.png?v8)`:house:` | 🏡![](https://github.githubassets.com/images/icons/emoji/unicode/1f3e1.png?v8)`:house_with_garden:` | 🏫![](https://github.githubassets.com/images/icons/emoji/unicode/1f3eb.png?v8)`:school:` |\n| :----------------------------------------------------------- | :----------------------------------------------------------- | :----------------------------------------------------------- |\n| 🏢![](https://github.githubassets.com/images/icons/emoji/unicode/1f3e2.png?v8)`:office:` | 🏣![](https://github.githubassets.com/images/icons/emoji/unicode/1f3e3.png?v8)`:post_office:` | 🏥![](https://github.githubassets.com/images/icons/emoji/unicode/1f3e5.png?v8)`:hospital:` |\n| 🏦![](https://github.githubassets.com/images/icons/emoji/unicode/1f3e6.png?v8)`:bank:` | 🏪![](https://github.githubassets.com/images/icons/emoji/unicode/1f3ea.png?v8)`:convenience_store:` | 🏩![](https://github.githubassets.com/images/icons/emoji/unicode/1f3e9.png?v8)`:love_hotel:` |\n| 🏨![](https://github.githubassets.com/images/icons/emoji/unicode/1f3e8.png?v8)`:hotel:` | 💒![](https://github.githubassets.com/images/icons/emoji/unicode/1f492.png?v8)`:wedding:` | ⛪![](https://github.githubassets.com/images/icons/emoji/unicode/26ea.png?v8)`:church:` |\n| 🏬![](https://github.githubassets.com/images/icons/emoji/unicode/1f3ec.png?v8)`:department_store:` | 🏤![](https://github.githubassets.com/images/icons/emoji/unicode/1f3e4.png?v8)`:european_post_office:` | 🌇![](https://github.githubassets.com/images/icons/emoji/unicode/1f307.png?v8)`:city_sunrise:` |\n| 🌆![](https://github.githubassets.com/images/icons/emoji/unicode/1f306.png?v8)`:city_sunset:` | 🏯![](https://github.githubassets.com/images/icons/emoji/unicode/1f3ef.png?v8)`:japanese_castle:` | 🏰![](https://github.githubassets.com/images/icons/emoji/unicode/1f3f0.png?v8)`:european_castle:` |\n| ⛺![](https://github.githubassets.com/images/icons/emoji/unicode/26fa.png?v8)`:tent:` | 🏭![](https://github.githubassets.com/images/icons/emoji/unicode/1f3ed.png?v8)`:factory:` | 🗼![](https://github.githubassets.com/images/icons/emoji/unicode/1f5fc.png?v8)`:tokyo_tower:` |\n| 🗾![](https://github.githubassets.com/images/icons/emoji/unicode/1f5fe.png?v8)`:japan:` | 🗻![](https://github.githubassets.com/images/icons/emoji/unicode/1f5fb.png?v8)`:mount_fuji:` | 🌄![](https://github.githubassets.com/images/icons/emoji/unicode/1f304.png?v8)`:sunrise_over_mountains:` |\n| 🌅![](https://github.githubassets.com/images/icons/emoji/unicode/1f305.png?v8)`:sunrise:` | 🌠![](https://github.githubassets.com/images/icons/emoji/unicode/1f320.png?v8)`:stars:` | 🗽![](https://github.githubassets.com/images/icons/emoji/unicode/1f5fd.png?v8)`:statue_of_liberty:` |\n| 🌉![](https://github.githubassets.com/images/icons/emoji/unicode/1f309.png?v8)`:bridge_at_night:` | 🎠![](https://github.githubassets.com/images/icons/emoji/unicode/1f3a0.png?v8)`:carousel_horse:` | 🌈![](https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8)`:rainbow:` |\n| 🎡![](https://github.githubassets.com/images/icons/emoji/unicode/1f3a1.png?v8)`:ferris_wheel:` | ⛲![](https://github.githubassets.com/images/icons/emoji/unicode/26f2.png?v8)`:fountain:` | 🎢![](https://github.githubassets.com/images/icons/emoji/unicode/1f3a2.png?v8)`:roller_coaster:` |\n| 🚢![](https://github.githubassets.com/images/icons/emoji/unicode/1f6a2.png?v8)`:ship:` | 🚤![](https://github.githubassets.com/images/icons/emoji/unicode/1f6a4.png?v8)`:speedboat:` | ⛵![](https://github.githubassets.com/images/icons/emoji/unicode/26f5.png?v8)`:boat:` |\n| ⛵![](https://github.githubassets.com/images/icons/emoji/unicode/26f5.png?v8)`:sailboat:` | 🚣![](https://github.githubassets.com/images/icons/emoji/unicode/1f6a3.png?v8)`:rowboat:` | ⚓![](https://github.githubassets.com/images/icons/emoji/unicode/2693.png?v8)`:anchor:` |\n| 🚀![](https://github.githubassets.com/images/icons/emoji/unicode/1f680.png?v8)`:rocket:` | ✈![](https://github.githubassets.com/images/icons/emoji/unicode/2708.png?v8)`:airplane:` | 🚁![](https://github.githubassets.com/images/icons/emoji/unicode/1f681.png?v8)`:helicopter:` |\n| 🚂![](https://github.githubassets.com/images/icons/emoji/unicode/1f682.png?v8)`:steam_locomotive:` | 🚊![](https://github.githubassets.com/images/icons/emoji/unicode/1f68a.png?v8)`:tram:` | 🚞![](https://github.githubassets.com/images/icons/emoji/unicode/1f69e.png?v8)`:mountain_railway:` |\n| 🚲![](https://github.githubassets.com/images/icons/emoji/unicode/1f6b2.png?v8)`:bike:` | 🚡![](https://github.githubassets.com/images/icons/emoji/unicode/1f6a1.png?v8)`:aerial_tramway:` | 🚟![](https://github.githubassets.com/images/icons/emoji/unicode/1f69f.png?v8)`:suspension_railway:` |\n| 🚠![](https://github.githubassets.com/images/icons/emoji/unicode/1f6a0.png?v8)`:mountain_cableway:` | 🚜![](https://github.githubassets.com/images/icons/emoji/unicode/1f69c.png?v8)`:tractor:` | 🚙![](https://github.githubassets.com/images/icons/emoji/unicode/1f699.png?v8)`:blue_car:` |\n| 🚘![](https://github.githubassets.com/images/icons/emoji/unicode/1f698.png?v8)`:oncoming_automobile:` | 🚗![](https://github.githubassets.com/images/icons/emoji/unicode/1f697.png?v8)`:car:` | 🚗![](https://github.githubassets.com/images/icons/emoji/unicode/1f697.png?v8)`:red_car:` |\n| 🚕![](https://github.githubassets.com/images/icons/emoji/unicode/1f695.png?v8)`:taxi:` | 🚖![](https://github.githubassets.com/images/icons/emoji/unicode/1f696.png?v8)`:oncoming_taxi:` | 🚛![](https://github.githubassets.com/images/icons/emoji/unicode/1f69b.png?v8)`:articulated_lorry:` |\n| 🚌![](https://github.githubassets.com/images/icons/emoji/unicode/1f68c.png?v8)`:bus:` | 🚍![](https://github.githubassets.com/images/icons/emoji/unicode/1f68d.png?v8)`:oncoming_bus:` | 🚨![](https://github.githubassets.com/images/icons/emoji/unicode/1f6a8.png?v8)`:rotating_light:` |\n| 🚓![](https://github.githubassets.com/images/icons/emoji/unicode/1f693.png?v8)`:police_car:` | 🚔![](https://github.githubassets.com/images/icons/emoji/unicode/1f694.png?v8)`:oncoming_police_car:` | 🚒![](https://github.githubassets.com/images/icons/emoji/unicode/1f692.png?v8)`:fire_engine:` |\n| 🚑![](https://github.githubassets.com/images/icons/emoji/unicode/1f691.png?v8)`:ambulance:` | 🚐![](https://github.githubassets.com/images/icons/emoji/unicode/1f690.png?v8)`:minibus:` | 🚚![](https://github.githubassets.com/images/icons/emoji/unicode/1f69a.png?v8)`:truck:` |\n| 🚋![](https://github.githubassets.com/images/icons/emoji/unicode/1f68b.png?v8)`:train:` | 🚉![](https://github.githubassets.com/images/icons/emoji/unicode/1f689.png?v8)`:station:` | 🚆![](https://github.githubassets.com/images/icons/emoji/unicode/1f686.png?v8)`:train2:` |\n| 🚅![](https://github.githubassets.com/images/icons/emoji/unicode/1f685.png?v8)`:bullettrain_front:` | 🚄![](https://github.githubassets.com/images/icons/emoji/unicode/1f684.png?v8)`:bullettrain_side:` | 🚈![](https://github.githubassets.com/images/icons/emoji/unicode/1f688.png?v8)`:light_rail:` |\n| 🚝![](https://github.githubassets.com/images/icons/emoji/unicode/1f69d.png?v8)`:monorail:` | 🚃![](https://github.githubassets.com/images/icons/emoji/unicode/1f683.png?v8)`:railway_car:` | 🚎![](https://github.githubassets.com/images/icons/emoji/unicode/1f68e.png?v8)`:trolleybus:` |\n| 🎫![](https://github.githubassets.com/images/icons/emoji/unicode/1f3ab.png?v8)`:ticket:` | ⛽![](https://github.githubassets.com/images/icons/emoji/unicode/26fd.png?v8)`:fuelpump:` | 🚦![](https://github.githubassets.com/images/icons/emoji/unicode/1f6a6.png?v8)`:vertical_traffic_light:` |\n| 🚥![](https://github.githubassets.com/images/icons/emoji/unicode/1f6a5.png?v8)`:traffic_light:` | ⚠![](https://github.githubassets.com/images/icons/emoji/unicode/26a0.png?v8)`:warning:` | 🚧![](https://github.githubassets.com/images/icons/emoji/unicode/1f6a7.png?v8)`:construction:` |\n| 🔰![](https://github.githubassets.com/images/icons/emoji/unicode/1f530.png?v8)`:beginner:` | 🏧![](https://github.githubassets.com/images/icons/emoji/unicode/1f3e7.png?v8)`:atm:` | 🎰![](https://github.githubassets.com/images/icons/emoji/unicode/1f3b0.png?v8)`:slot_machine:` |\n| 🚏![](https://github.githubassets.com/images/icons/emoji/unicode/1f68f.png?v8)`:busstop:` | 💈![](https://github.githubassets.com/images/icons/emoji/unicode/1f488.png?v8)`:barber:` | ♨![](https://github.githubassets.com/images/icons/emoji/unicode/2668.png?v8)`:hotsprings:` |\n| 🏁![](https://github.githubassets.com/images/icons/emoji/unicode/1f3c1.png?v8)`:checkered_flag:` | 🎌![](https://github.githubassets.com/images/icons/emoji/unicode/1f38c.png?v8)`:crossed_flags:` | 🏮![](https://github.githubassets.com/images/icons/emoji/unicode/1f3ee.png?v8)`:izakaya_lantern:` |\n| 🗿![](https://github.githubassets.com/images/icons/emoji/unicode/1f5ff.png?v8)`:moyai:` | 🎪![](https://github.githubassets.com/images/icons/emoji/unicode/1f3aa.png?v8)`:circus_tent:` | 🎭![](https://github.githubassets.com/images/icons/emoji/unicode/1f3ad.png?v8)`:performing_arts:` |\n| 📍![](https://github.githubassets.com/images/icons/emoji/unicode/1f4cd.png?v8)`:round_pushpin:` | 🚩![](https://github.githubassets.com/images/icons/emoji/unicode/1f6a9.png?v8)`:triangular_flag_on_post:` | 🇯🇵![](https://github.githubassets.com/images/icons/emoji/unicode/1f1ef-1f1f5.png?v8)`:jp:` |\n| 🇰🇷![](https://github.githubassets.com/images/icons/emoji/unicode/1f1f0-1f1f7.png?v8)`:kr:` | 🇨🇳![](https://github.githubassets.com/images/icons/emoji/unicode/1f1e8-1f1f3.png?v8)`:cn:` | 🇺🇸![](https://github.githubassets.com/images/icons/emoji/unicode/1f1fa-1f1f8.png?v8)`:us:` |\n| 🇫🇷![](https://github.githubassets.com/images/icons/emoji/unicode/1f1eb-1f1f7.png?v8)`:fr:` | 🇪🇸![](https://github.githubassets.com/images/icons/emoji/unicode/1f1ea-1f1f8.png?v8)`:es:` | 🇮🇹![](https://github.githubassets.com/images/icons/emoji/unicode/1f1ee-1f1f9.png?v8)`:it:` |\n| 🇷🇺![](https://github.githubassets.com/images/icons/emoji/unicode/1f1f7-1f1fa.png?v8)`:ru:` | 🇬🇧![](https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1e7.png?v8)`:gb:` | 🇬🇧![](https://github.githubassets.com/images/icons/emoji/unicode/1f1ec-1f1e7.png?v8)`:uk:` |\n| 🇩🇪![](https://github.githubassets.com/images/icons/emoji/unicode/1f1e9-1f1ea.png?v8)`:de:` |                                                              |                                                              |\n\n## Symbols\n\n| 1⃣![](https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8)`:one:` | 2⃣![](https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8)`:two:` | 3⃣![](https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8)`:three:` |\n| :----------------------------------------------------------- | :----------------------------------------------------------- | :----------------------------------------------------------- |\n| 4⃣![](https://github.githubassets.com/images/icons/emoji/unicode/0034-20e3.png?v8)`:four:` | 5⃣![](https://github.githubassets.com/images/icons/emoji/unicode/0035-20e3.png?v8)`:five:` | 6⃣![](https://github.githubassets.com/images/icons/emoji/unicode/0036-20e3.png?v8)`:six:` |\n| 7⃣![](https://github.githubassets.com/images/icons/emoji/unicode/0037-20e3.png?v8)`:seven:` | 8⃣![](https://github.githubassets.com/images/icons/emoji/unicode/0038-20e3.png?v8)`:eight:` | 9⃣![](https://github.githubassets.com/images/icons/emoji/unicode/0039-20e3.png?v8)`:nine:` |\n| 🔟![](https://github.githubassets.com/images/icons/emoji/unicode/1f51f.png?v8)`:keycap_ten:` | 🔢![](https://github.githubassets.com/images/icons/emoji/unicode/1f522.png?v8)`:1234:` | 0⃣![](https://github.githubassets.com/images/icons/emoji/unicode/0030-20e3.png?v8)`:zero:` |\n| #⃣![](https://github.githubassets.com/images/icons/emoji/unicode/0023-20e3.png?v8)`:hash:` | 🔣![](https://github.githubassets.com/images/icons/emoji/unicode/1f523.png?v8)`:symbols:` | ◀![](https://github.githubassets.com/images/icons/emoji/unicode/25c0.png?v8)`:arrow_backward:` |\n| ⬇![](https://github.githubassets.com/images/icons/emoji/unicode/2b07.png?v8)`:arrow_down:` | ▶![](https://github.githubassets.com/images/icons/emoji/unicode/25b6.png?v8)`:arrow_forward:` | ⬅![](https://github.githubassets.com/images/icons/emoji/unicode/2b05.png?v8)`:arrow_left:` |\n| 🔠![](https://github.githubassets.com/images/icons/emoji/unicode/1f520.png?v8)`:capital_abcd:` | 🔡![](https://github.githubassets.com/images/icons/emoji/unicode/1f521.png?v8)`:abcd:` | 🔤![](https://github.githubassets.com/images/icons/emoji/unicode/1f524.png?v8)`:abc:` |\n| ↙![](https://github.githubassets.com/images/icons/emoji/unicode/2199.png?v8)`:arrow_lower_left:` | ↘![](https://github.githubassets.com/images/icons/emoji/unicode/2198.png?v8)`:arrow_lower_right:` | ➡![](https://github.githubassets.com/images/icons/emoji/unicode/27a1.png?v8)`:arrow_right:` |\n| ⬆![](https://github.githubassets.com/images/icons/emoji/unicode/2b06.png?v8)`:arrow_up:` | ↖![](https://github.githubassets.com/images/icons/emoji/unicode/2196.png?v8)`:arrow_upper_left:` | ↗![](https://github.githubassets.com/images/icons/emoji/unicode/2197.png?v8)`:arrow_upper_right:` |\n| ⏬![](https://github.githubassets.com/images/icons/emoji/unicode/23ec.png?v8)`:arrow_double_down:` | ⏫![](https://github.githubassets.com/images/icons/emoji/unicode/23eb.png?v8)`:arrow_double_up:` | 🔽![](https://github.githubassets.com/images/icons/emoji/unicode/1f53d.png?v8)`:arrow_down_small:` |\n| ⤵![](https://github.githubassets.com/images/icons/emoji/unicode/2935.png?v8)`:arrow_heading_down:` | ⤴![](https://github.githubassets.com/images/icons/emoji/unicode/2934.png?v8)`:arrow_heading_up:` | ↩![](https://github.githubassets.com/images/icons/emoji/unicode/21a9.png?v8)`:leftwards_arrow_with_hook:` |\n| ↪![](https://github.githubassets.com/images/icons/emoji/unicode/21aa.png?v8)`:arrow_right_hook:` | ↔![](https://github.githubassets.com/images/icons/emoji/unicode/2194.png?v8)`:left_right_arrow:` | ↕![](https://github.githubassets.com/images/icons/emoji/unicode/2195.png?v8)`:arrow_up_down:` |\n| 🔼![](https://github.githubassets.com/images/icons/emoji/unicode/1f53c.png?v8)`:arrow_up_small:` | 🔃![](https://github.githubassets.com/images/icons/emoji/unicode/1f503.png?v8)`:arrows_clockwise:` | 🔄![](https://github.githubassets.com/images/icons/emoji/unicode/1f504.png?v8)`:arrows_counterclockwise:` |\n| ⏪![](https://github.githubassets.com/images/icons/emoji/unicode/23ea.png?v8)`:rewind:` | ⏩![](https://github.githubassets.com/images/icons/emoji/unicode/23e9.png?v8)`:fast_forward:` | ℹ![](https://github.githubassets.com/images/icons/emoji/unicode/2139.png?v8)`:information_source:` |\n| 🆗![](https://github.githubassets.com/images/icons/emoji/unicode/1f197.png?v8)`:ok:` | 🔀![](https://github.githubassets.com/images/icons/emoji/unicode/1f500.png?v8)`:twisted_rightwards_arrows:` | 🔁![](https://github.githubassets.com/images/icons/emoji/unicode/1f501.png?v8)`:repeat:` |\n| 🔂![](https://github.githubassets.com/images/icons/emoji/unicode/1f502.png?v8)`:repeat_one:` | 🆕![](https://github.githubassets.com/images/icons/emoji/unicode/1f195.png?v8)`:new:` | 🔝![](https://github.githubassets.com/images/icons/emoji/unicode/1f51d.png?v8)`:top:` |\n| 🆙![](https://github.githubassets.com/images/icons/emoji/unicode/1f199.png?v8)`:up:` | 🆒![](https://github.githubassets.com/images/icons/emoji/unicode/1f192.png?v8)`:cool:` | 🆓![](https://github.githubassets.com/images/icons/emoji/unicode/1f193.png?v8)`:free:` |\n| 🆖![](https://github.githubassets.com/images/icons/emoji/unicode/1f196.png?v8)`:ng:` | 🎦![](https://github.githubassets.com/images/icons/emoji/unicode/1f3a6.png?v8)`:cinema:` | 🈁![](https://github.githubassets.com/images/icons/emoji/unicode/1f201.png?v8)`:koko:` |\n| 📶![](https://github.githubassets.com/images/icons/emoji/unicode/1f4f6.png?v8)`:signal_strength:` | 🈹![](https://github.githubassets.com/images/icons/emoji/unicode/1f239.png?v8)`:u5272:` | 🈴![](https://github.githubassets.com/images/icons/emoji/unicode/1f234.png?v8)`:u5408:` |\n| 🈺![](https://github.githubassets.com/images/icons/emoji/unicode/1f23a.png?v8)`:u55b6:` | 🈯![](https://github.githubassets.com/images/icons/emoji/unicode/1f22f.png?v8)`:u6307:` | 🈷![](https://github.githubassets.com/images/icons/emoji/unicode/1f237.png?v8)`:u6708:` |\n| 🈶![](https://github.githubassets.com/images/icons/emoji/unicode/1f236.png?v8)`:u6709:` | 🈵![](https://github.githubassets.com/images/icons/emoji/unicode/1f235.png?v8)`:u6e80:` | 🈚![](https://github.githubassets.com/images/icons/emoji/unicode/1f21a.png?v8)`:u7121:` |\n| 🈸![](https://github.githubassets.com/images/icons/emoji/unicode/1f238.png?v8)`:u7533:` | 🈳![](https://github.githubassets.com/images/icons/emoji/unicode/1f233.png?v8)`:u7a7a:` | 🈲![](https://github.githubassets.com/images/icons/emoji/unicode/1f232.png?v8)`:u7981:` |\n| 🈂![](https://github.githubassets.com/images/icons/emoji/unicode/1f202.png?v8)`:sa:` | 🚻![](https://github.githubassets.com/images/icons/emoji/unicode/1f6bb.png?v8)`:restroom:` | 🚹![](https://github.githubassets.com/images/icons/emoji/unicode/1f6b9.png?v8)`:mens:` |\n| 🚺![](https://github.githubassets.com/images/icons/emoji/unicode/1f6ba.png?v8)`:womens:` | 🚼![](https://github.githubassets.com/images/icons/emoji/unicode/1f6bc.png?v8)`:baby_symbol:` | 🚭![](https://github.githubassets.com/images/icons/emoji/unicode/1f6ad.png?v8)`:no_smoking:` |\n| 🅿![](https://github.githubassets.com/images/icons/emoji/unicode/1f17f.png?v8)`:parking:` | ♿![](https://github.githubassets.com/images/icons/emoji/unicode/267f.png?v8)`:wheelchair:` | 🚇![](https://github.githubassets.com/images/icons/emoji/unicode/1f687.png?v8)`:metro:` |\n| 🛄![](https://github.githubassets.com/images/icons/emoji/unicode/1f6c4.png?v8)`:baggage_claim:` | 🉑![](https://github.githubassets.com/images/icons/emoji/unicode/1f251.png?v8)`:accept:` | 🚾![](https://github.githubassets.com/images/icons/emoji/unicode/1f6be.png?v8)`:wc:` |\n| 🚰![](https://github.githubassets.com/images/icons/emoji/unicode/1f6b0.png?v8)`:potable_water:` | 🚮![](https://github.githubassets.com/images/icons/emoji/unicode/1f6ae.png?v8)`:put_litter_in_its_place:` | ㊙![](https://github.githubassets.com/images/icons/emoji/unicode/3299.png?v8)`:secret:` |\n| ㊗![](https://github.githubassets.com/images/icons/emoji/unicode/3297.png?v8)`:congratulations:` | Ⓜ![](https://github.githubassets.com/images/icons/emoji/unicode/24c2.png?v8)`:m:` | 🛂![](https://github.githubassets.com/images/icons/emoji/unicode/1f6c2.png?v8)`:passport_control:` |\n| 🛅![](https://github.githubassets.com/images/icons/emoji/unicode/1f6c5.png?v8)`:left_luggage:` | 🛃![](https://github.githubassets.com/images/icons/emoji/unicode/1f6c3.png?v8)`:customs:` | 🉐![](https://github.githubassets.com/images/icons/emoji/unicode/1f250.png?v8)`:ideograph_advantage:` |\n| 🆑![](https://github.githubassets.com/images/icons/emoji/unicode/1f191.png?v8)`:cl:` | 🆘![](https://github.githubassets.com/images/icons/emoji/unicode/1f198.png?v8)`:sos:` | 🆔![](https://github.githubassets.com/images/icons/emoji/unicode/1f194.png?v8)`:id:` |\n| 🚫![](https://github.githubassets.com/images/icons/emoji/unicode/1f6ab.png?v8)`:no_entry_sign:` | 🔞![](https://github.githubassets.com/images/icons/emoji/unicode/1f51e.png?v8)`:underage:` | 📵![](https://github.githubassets.com/images/icons/emoji/unicode/1f4f5.png?v8)`:no_mobile_phones:` |\n| 🚯![](https://github.githubassets.com/images/icons/emoji/unicode/1f6af.png?v8)`:do_not_litter:` | :non-potable_water: `:non-potable_water:`                    | 🚳![](https://github.githubassets.com/images/icons/emoji/unicode/1f6b3.png?v8)`:no_bicycles:` |\n| 🚷![](https://github.githubassets.com/images/icons/emoji/unicode/1f6b7.png?v8)`:no_pedestrians:` | 🚸![](https://github.githubassets.com/images/icons/emoji/unicode/1f6b8.png?v8)`:children_crossing:` | ⛔![](https://github.githubassets.com/images/icons/emoji/unicode/26d4.png?v8)`:no_entry:` |\n| ✳![](https://github.githubassets.com/images/icons/emoji/unicode/2733.png?v8)`:eight_spoked_asterisk:` | ✴![](https://github.githubassets.com/images/icons/emoji/unicode/2734.png?v8)`:eight_pointed_black_star:` | 💟![](https://github.githubassets.com/images/icons/emoji/unicode/1f49f.png?v8)`:heart_decoration:` |\n| 🆚![](https://github.githubassets.com/images/icons/emoji/unicode/1f19a.png?v8)`:vs:` | 📳![](https://github.githubassets.com/images/icons/emoji/unicode/1f4f3.png?v8)`:vibration_mode:` | 📴![](https://github.githubassets.com/images/icons/emoji/unicode/1f4f4.png?v8)`:mobile_phone_off:` |\n| 💹![](https://github.githubassets.com/images/icons/emoji/unicode/1f4b9.png?v8)`:chart:` | 💱![](https://github.githubassets.com/images/icons/emoji/unicode/1f4b1.png?v8)`:currency_exchange:` | ♈![](https://github.githubassets.com/images/icons/emoji/unicode/2648.png?v8)`:aries:` |\n| ♉![](https://github.githubassets.com/images/icons/emoji/unicode/2649.png?v8)`:taurus:` | ♊![](https://github.githubassets.com/images/icons/emoji/unicode/264a.png?v8)`:gemini:` | ♋![](https://github.githubassets.com/images/icons/emoji/unicode/264b.png?v8)`:cancer:` |\n| ♌![](https://github.githubassets.com/images/icons/emoji/unicode/264c.png?v8)`:leo:` | ♍![](https://github.githubassets.com/images/icons/emoji/unicode/264d.png?v8)`:virgo:` | ♎![](https://github.githubassets.com/images/icons/emoji/unicode/264e.png?v8)`:libra:` |\n| ♏![](https://github.githubassets.com/images/icons/emoji/unicode/264f.png?v8)`:scorpius:` | ♐![](https://github.githubassets.com/images/icons/emoji/unicode/2650.png?v8)`:sagittarius:` | ♑![](https://github.githubassets.com/images/icons/emoji/unicode/2651.png?v8)`:capricorn:` |\n| ♒![](https://github.githubassets.com/images/icons/emoji/unicode/2652.png?v8)`:aquarius:` | ♓![](https://github.githubassets.com/images/icons/emoji/unicode/2653.png?v8)`:pisces:` | ⛎![](https://github.githubassets.com/images/icons/emoji/unicode/26ce.png?v8)`:ophiuchus:` |\n| 🔯![](https://github.githubassets.com/images/icons/emoji/unicode/1f52f.png?v8)`:six_pointed_star:` | ❎![](https://github.githubassets.com/images/icons/emoji/unicode/274e.png?v8)`:negative_squared_cross_mark:` | 🅰![](https://github.githubassets.com/images/icons/emoji/unicode/1f170.png?v8)`:a:` |\n| 🅱![](https://github.githubassets.com/images/icons/emoji/unicode/1f171.png?v8)`:b:` | 🆎![](https://github.githubassets.com/images/icons/emoji/unicode/1f18e.png?v8)`:ab:` | 🅾![](https://github.githubassets.com/images/icons/emoji/unicode/1f17e.png?v8)`:o2:` |\n| 💠![](https://github.githubassets.com/images/icons/emoji/unicode/1f4a0.png?v8)`:diamond_shape_with_a_dot_inside:` | ♻![](https://github.githubassets.com/images/icons/emoji/unicode/267b.png?v8)`:recycle:` | 🔚![](https://github.githubassets.com/images/icons/emoji/unicode/1f51a.png?v8)`:end:` |\n| 🔛![](https://github.githubassets.com/images/icons/emoji/unicode/1f51b.png?v8)`:on:` | 🔜![](https://github.githubassets.com/images/icons/emoji/unicode/1f51c.png?v8)`:soon:` | 🕐![](https://github.githubassets.com/images/icons/emoji/unicode/1f550.png?v8)`:clock1:` |\n| 🕜![](https://github.githubassets.com/images/icons/emoji/unicode/1f55c.png?v8)`:clock130:` | 🕙![](https://github.githubassets.com/images/icons/emoji/unicode/1f559.png?v8)`:clock10:` | 🕥![](https://github.githubassets.com/images/icons/emoji/unicode/1f565.png?v8)`:clock1030:` |\n| 🕚![](https://github.githubassets.com/images/icons/emoji/unicode/1f55a.png?v8)`:clock11:` | 🕦![](https://github.githubassets.com/images/icons/emoji/unicode/1f566.png?v8)`:clock1130:` | 🕛![](https://github.githubassets.com/images/icons/emoji/unicode/1f55b.png?v8)`:clock12:` |\n| 🕧![](https://github.githubassets.com/images/icons/emoji/unicode/1f567.png?v8)`:clock1230:` | 🕑![](https://github.githubassets.com/images/icons/emoji/unicode/1f551.png?v8)`:clock2:` | 🕝![](https://github.githubassets.com/images/icons/emoji/unicode/1f55d.png?v8)`:clock230:` |\n| 🕒![](https://github.githubassets.com/images/icons/emoji/unicode/1f552.png?v8)`:clock3:` | 🕞![](https://github.githubassets.com/images/icons/emoji/unicode/1f55e.png?v8)`:clock330:` | 🕓![](https://github.githubassets.com/images/icons/emoji/unicode/1f553.png?v8)`:clock4:` |\n| 🕟![](https://github.githubassets.com/images/icons/emoji/unicode/1f55f.png?v8)`:clock430:` | 🕔![](https://github.githubassets.com/images/icons/emoji/unicode/1f554.png?v8)`:clock5:` | 🕠![](https://github.githubassets.com/images/icons/emoji/unicode/1f560.png?v8)`:clock530:` |\n| 🕕![](https://github.githubassets.com/images/icons/emoji/unicode/1f555.png?v8)`:clock6:` | 🕡![](https://github.githubassets.com/images/icons/emoji/unicode/1f561.png?v8)`:clock630:` | 🕖![](https://github.githubassets.com/images/icons/emoji/unicode/1f556.png?v8)`:clock7:` |\n| 🕢![](https://github.githubassets.com/images/icons/emoji/unicode/1f562.png?v8)`:clock730:` | 🕗![](https://github.githubassets.com/images/icons/emoji/unicode/1f557.png?v8)`:clock8:` | 🕣![](https://github.githubassets.com/images/icons/emoji/unicode/1f563.png?v8)`:clock830:` |\n| 🕘![](https://github.githubassets.com/images/icons/emoji/unicode/1f558.png?v8)`:clock9:` | 🕤![](https://github.githubassets.com/images/icons/emoji/unicode/1f564.png?v8)`:clock930:` | 💲![](https://github.githubassets.com/images/icons/emoji/unicode/1f4b2.png?v8)`:heavy_dollar_sign:` |\n| ©![](https://github.githubassets.com/images/icons/emoji/unicode/00a9.png?v8)`:copyright:` | ®![](https://github.githubassets.com/images/icons/emoji/unicode/00ae.png?v8)`:registered:` | ™![](https://github.githubassets.com/images/icons/emoji/unicode/2122.png?v8)`:tm:` |\n| ❌![](https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8)`:x:` | ❗![](https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8)`:heavy_exclamation_mark:` | ‼![](https://github.githubassets.com/images/icons/emoji/unicode/203c.png?v8)`:bangbang:` |\n| ⁉![](https://github.githubassets.com/images/icons/emoji/unicode/2049.png?v8)`:interrobang:` | ⭕![](https://github.githubassets.com/images/icons/emoji/unicode/2b55.png?v8)`:o:` | ✖![](https://github.githubassets.com/images/icons/emoji/unicode/2716.png?v8)`:heavy_multiplication_x:` |\n| ➕![](https://github.githubassets.com/images/icons/emoji/unicode/2795.png?v8)`:heavy_plus_sign:` | ➖![](https://github.githubassets.com/images/icons/emoji/unicode/2796.png?v8)`:heavy_minus_sign:` | ➗![](https://github.githubassets.com/images/icons/emoji/unicode/2797.png?v8)`:heavy_division_sign:` |\n| 💮![](https://github.githubassets.com/images/icons/emoji/unicode/1f4ae.png?v8)`:white_flower:` | 💯![](https://github.githubassets.com/images/icons/emoji/unicode/1f4af.png?v8)`:100:` | ✔![](https://github.githubassets.com/images/icons/emoji/unicode/2714.png?v8)`:heavy_check_mark:` |\n| ☑![](https://github.githubassets.com/images/icons/emoji/unicode/2611.png?v8)`:ballot_box_with_check:` | 🔘![](https://github.githubassets.com/images/icons/emoji/unicode/1f518.png?v8)`:radio_button:` | 🔗![](https://github.githubassets.com/images/icons/emoji/unicode/1f517.png?v8)`:link:` |\n| ➰![](https://github.githubassets.com/images/icons/emoji/unicode/27b0.png?v8)`:curly_loop:` | 〰![](https://github.githubassets.com/images/icons/emoji/unicode/3030.png?v8)`:wavy_dash:` | 〽![](https://github.githubassets.com/images/icons/emoji/unicode/303d.png?v8)`:part_alternation_mark:` |\n| 🔱![](https://github.githubassets.com/images/icons/emoji/unicode/1f531.png?v8)`:trident:` | :black_square: `:black_square:`                              | :white_square: `:white_square:`                              |\n| ✅![](https://github.githubassets.com/images/icons/emoji/unicode/2705.png?v8)`:white_check_mark:` | 🔲![](https://github.githubassets.com/images/icons/emoji/unicode/1f532.png?v8)`:black_square_button:` | 🔳![](https://github.githubassets.com/images/icons/emoji/unicode/1f533.png?v8)`:white_square_button:` |\n| ⚫![](https://github.githubassets.com/images/icons/emoji/unicode/26ab.png?v8)`:black_circle:` | ⚪![](https://github.githubassets.com/images/icons/emoji/unicode/26aa.png?v8)`:white_circle:` | 🔴![](https://github.githubassets.com/images/icons/emoji/unicode/1f534.png?v8)`:red_circle:` |\n| 🔵![](https://github.githubassets.com/images/icons/emoji/unicode/1f535.png?v8)`:large_blue_circle:` | 🔷![](https://github.githubassets.com/images/icons/emoji/unicode/1f537.png?v8)`:large_blue_diamond:` | 🔶![](https://github.githubassets.com/images/icons/emoji/unicode/1f536.png?v8)`:large_orange_diamond:` |\n| 🔹![](https://github.githubassets.com/images/icons/emoji/unicode/1f539.png?v8)`:small_blue_diamond:` | 🔸![](https://github.githubassets.com/images/icons/emoji/unicode/1f538.png?v8)`:small_orange_diamond:` | 🔺![](https://github.githubassets.com/images/icons/emoji/unicode/1f53a.png?v8)`:small_red_triangle:` |\n| 🔻![](https://github.githubassets.com/images/icons/emoji/unicode/1f53b.png?v8)`:small_red_triangle_down:` | ![](https://github.githubassets.com/images/icons/emoji/shipit.png?v8)`:shipit:` |                                                              |\n\n\n<style>\n  img {\n    float:left;\n    zoom:50%;\n  }\n</style>\n\n\n","tags":["Markdown","Emoji"],"categories":["Markdown","Emoji"]},{"title":"Markdown 基础语法-二","url":"/undefined/a1529388.html","content":"\n{% note blue 'fas fa-rocket' %}\n\n {% post_link Markdown-基础语法-一 ' 📑 Markdown 基础语法-一' %} - {% post_link Markdown-基础语法-二 ' 📑 Markdown 基础语法-二' %} - {% post_link Markdown-Emoji-速查 ' ✨ Markdown Emoji 速查' %}\n\n{% endnote %}\n\n## 一、代码\n\n语法：\n### 单行代码：\n\n代码之间分别用一个反引号包起来\n示例：\n```\n`代码内容`\n```\n效果\n`这是单行代码`\n\n若想在代码中添加撇号，可以使用多个撇号包裹里面需要添加的撇号，但注意里面的连续的撇号数量不能超过外面的数量。\n\n// 显示一个撇号\n示例：\n\n```\n`` ` ``\n```\n效果：\n`` ` ``\n\n注意「行内代码」开头或结尾包含关键字「反引号 `` ` ``」时，开头和结尾必须包含空格。\n\n### 多行代码/代码块：\n\n缩进 4 个空格，需要注意的是，每行代码都需要至少缩进 4 个空格，不能像段落一样采用首行标记的偷懒写法，一个代码区会一直持续到没有缩进 4 个空格的那一行。Markdown中可以用两个`反引号`来标记代码。也可以用```` `来包裹代码段，且两边的撇号单独占一行。\n\n示例/效果：\n\n```none\n代\n码\n块\n内\n容\n```\n注：多行代码也可回车+tap\n\n如果这样写：` ```java`+`代码`+```` ``` ````，则代表java代码，实例效果如下：\n\n```java\nclass HelloWorld{\n    public static void main(String[] args){\n        System.out.println(\"Hello World!\");\n    }\n}\n```\n\n## 二、流程图\n\n```\nflow\nst=>start: 开始\nop=>operation: My Operation\ncond=>condition: Yes or No?\ne=>end\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n建议使用画图工具（脑图）画完后上传图片比较简单\n\n\n\n## 三、反斜杠 \\\n\n我们经常需要在文章中插入一些特殊符号，而这些符号恰好是前面所讲的标识符号，可以在特殊符号前插入 \\ 来直接显示符号，而不让 Markdown 来将其解释为标识符号。\n\nMarkdown 支持以下这些符号前插入 \\ 而显示其本来样子：\n```\n\\   反斜线\n`   反引号\n*   星号\n_   底线\n{}  花括号\n[]  方括号\n()  括弧\n#   井字号\n+   加号\n-   减号\n.   英文句点\n!   惊叹号\n```\n<font size=5>注意 </font> hexo 使用 marked+mathjax 渲染 LaTex 公式时会把 `\\\\` 都转义成` \\` ，导致公式显示异常（不换行），需要将 `\\\\` 改为 `\\\\\\\\` 方可显示正常。注：推荐换为 kramed 渲染引擎+katex 公式渲染器。\n\n示例：\n\n```\n$$\n\\begin{align*}\ny = y(x,t) &= A e^{i\\theta} \\\\\\\\\n&= A (\\cos \\theta + i \\sin \\theta) \\\\\\\\\n&= A (\\cos(kx - \\omega t) + i \\sin(kx - \\omega t)) \\\\\\\\\n&= A\\cos(kx - \\omega t) + i A\\sin(kx - \\omega t)  \\\\\\\\\n&= A\\cos \\Big(\\frac{2\\pi}{\\lambda}x - \\frac{2\\pi v}{\\lambda} t \\Big) + i A\\sin \\Big(\\frac{2\\pi}{\\lambda}x - \\frac{2\\pi v}{\\lambda} t \\Big)  \\\\\\\\\n&= A\\cos \\frac{2\\pi}{\\lambda} (x - v t) + i A\\sin \\frac{2\\pi}{\\lambda} (x - v t)\n\\end{align*}\n$$\n```\n效果：\n$$\n\\begin{align*}\ny = y(x,t) &= A e^{i\\theta} \\\\\n&= A (\\cos \\theta + i \\sin \\theta) \\\\\n&= A (\\cos(kx - \\omega t) + i \\sin(kx - \\omega t)) \\\\\n&= A\\cos(kx - \\omega t) + i A\\sin(kx - \\omega t)  \\\\\n&= A\\cos \\Big(\\frac{2\\pi}{\\lambda}x - \\frac{2\\pi v}{\\lambda} t \\Big) + i A\\sin \\Big(\\frac{2\\pi}{\\lambda}x - \\frac{2\\pi v}{\\lambda} t \\Big)  \\\\\n&= A\\cos \\frac{2\\pi}{\\lambda} (x - v t) + i A\\sin \\frac{2\\pi}{\\lambda} (x - v t)\n\\end{align*}\n$$\n\ntest：\n\n$RMSE = 1 - \\dfrac{\\sum_{i=1}^n (y_i - \\hat{y}_i)^2} {\\sum_{i=1}^n (y_i - \\bar{y})^2}$\n\n$\\frac{1}{ {(2\\pi)}^\\frac{D}{2} }$\n\n$X\\stackrel{F}{\\longrightarrow}Y$\n\n\n\n**公式显示也可以用贴图方案：**\n\n1. 在 https://www.codecogs.com/latex/eqneditor.php 网页上部的输入框里输入 LaTeX 公式，比如 ``$x=\\frac{-b\\pm\\sqrt{b^2-4ac}}{2a}$``；\n\n2. 在网页下部拷贝 URL Encoded 的内容，比如以上公式生成的是 `https://latex.codecogs.com/png.latex?%24%24x%3D%5Cfrac%7B-b%5Cpm%5Csqrt%7Bb%5E2-4ac%7D%7D%7B2a%7D%24%24`；\n\n   ![img](https://raw.githubusercontent.com/mzlogin/mzlogin.github.io/master/images/posts/markdown/latex-img.png)\n\n3. 在文档需要的地方使用以上 URL 贴图，比如\n\n   ```\n   ![](https://latex.codecogs.com/png.latex?%24%24x%3D%5Cfrac%7B-b%5Cpm%5Csqrt%7Bb%5E2-4ac%7D%7D%7B2a%7D%24%24)\n   ```\n\n## 四、Markdown 上标、下标\n\n**语法详解**\n\n上标、下标是一种文字的特殊写法，常用于化学式、数学公式、引用文字的脚注等。\n\nMarkdown 的原生语法不支持上、下标的写法。我们需要通过 html 标签实现此类效果。\n\n在 Markdown 中，我们可以通过 `<sub>` 和 `<sup>` 标签来实现上标和下标。\n\n**实例 1**：\n\n使用上标表示数学公式。\n\n```markdown\na<sup>2</sup> + b<sup>2</sup> = c<sup>2</sup>\n```\n\n其渲染效果如下：\n\na<sup>2</sup> + b<sup>2</sup> = c<sup>2</sup>\n\n**实例 2**：\n\n使用上标表示特殊语义。\n\n```markdown\nWindows 10 <sup>TM</sup>\n```\n\n其渲染效果如下：\n\nWindows 10 <sup>TM</sup>\n\n**实例 3**：\n\n使用下标书写化学公式。\n\n```markdown\n2KClO<sub>3</sub> ==== 2KCl + 3O<sub>2</sub>↑\n```\n\n其渲染效果如下：\n\n2KClO<sub>3</sub> ==== 2KCl + 3O<sub>2</sub>↑\n\n**实例 4**：\n\n上标下标嵌套使用。\n\n```markdown\na<sup>b<sub>c<sup>d</sup></sub></sup>\n#Matery+kramed 下写法\na<sup>b<sub>c<sup>d</sup>\n```\n\n其渲染效果如下：\n\na<sup>b<sub>c<sup>d</sup>\n\n**实例 5**：\n\n使用特殊符号作为上标。\n\n```markdown\nIMOOC<sup>©</sup>\n```\n\n其渲染效果如下：\n\nIMOOC<sup>©</sup>\n\n## 五、Markdown 脚注尾注\n\n### 1. 前言\n\n脚注和尾注都是对文章的补充说明。\n\n脚注通常与被注释内容出现在同一页，并位于该页面的最下方，一般用来解释专有名词、数据来源等。\n\n尾注通常出现在文章的最后一页，写在文章全部正文之后，一般用来列明引用的文章列表等。\n\n### 2. 语法详解\n\n\n\n#### 2.1 脚注、尾注的声明\n\n**添加引用的描述**\n\n要增加脚注（尾注），首先需要在文章的适当位置增加引用的描述，形如：`[^引用ID]: 说明文字`。\n\n**实例 1**：\n\n脚注的声明。\n\n```markdown\n[^footnote]: 此处是 **脚注** 的 *文本内容*。\n```\n\n注意，此步完成后，不会有渲染的内容输出，必须将引用添加到内容中才有显示。\n\n**引用部位添加引用注释**\n\n在需要增加引用标记的内容后面增加 `[^引用ID]`。\n\n**实例 2**：\n\n完整的脚注。\n\n```markdown\n这里有一个脚注[^脚注ID1]。\n\n这里有一个脚注[^脚注ID2]。\n\n\n[^脚注ID1]: 此处是 **脚注** 的 *文本内容*。\n[^脚注ID2]: 此处是 **脚注** 的 *文本内容*。\n```\n\n脚注的标号会自动编号。\n\n在 Markdown 中，尾注和脚注的声明方式是一样的，区别在于是否把引用的描述部分写到了文章的最末尾。由于 Markdown 在一些特定渲染输出的情况下（比如：PDF）才有分页的概念，所以我们优先采用尾注的形式，也就是将注释内容写到文章末尾。\n\n### 3. 使用场景及实例\n\n**实例 4**：\n\n实现百度文库效果的《出师表》。\n\n```markdown\n**《出师表》（节选）**\n\n先帝[^注释1]创业[^注释2]未半而中道[^注释3]崩殂[^注释4]，今[^注释5]天下三分[^注释6]，益州疲弊[^注释7]，此[^注释8]诚危急存亡之秋也。然[^注释9]侍卫之臣不懈于内，忠志之士忘身[^注释10]于外者，盖追先帝之殊遇[^注释11]，欲报之于陛下也。诚[^注释12]宜开张圣听[^注释13]，以光[^注释14]先帝遗德，恢弘[^注释15]志士之气，不宜妄自菲薄[^注释16]，引喻失义[^注释17]，以塞忠谏之路也[^注释18]。\n\n[^注释1]: 先帝：指汉昭烈帝刘备。先，尊称死去的人。\n[^注释2]: 创：开创，创立；业：统一天下的大业。\n[^注释3]: 中道：中途。\n[^注释4]: 崩殂（cú）：死。崩，古时指皇帝死亡。殂，死亡。\n[^注释5]: 今：现在。\n[^注释6]: 三分：天下分为孙权，曹操，刘备三大势力。\n[^注释7]: 益州疲弊：弱，处境艰难；益州：汉代行政区域十三刺史部之一，包括今四川省和陕西省一带，这里指蜀汉。疲弊（pí bì）：人力缺乏，物力缺无，民生凋敝。\n[^注释8]: 此：这；诚：的确，实在；之：的；秋：时，时候，这里指关键时期，一般多指不好的。\n[^注释9]: 然：然而；侍：侍奉；卫：护卫；懈：松懈，懈怠；于：在；内：皇宫中。\n[^注释10]: 忘身：舍身忘死，奋不顾身。\n[^注释11]: 盖：原来；追：追念；殊遇：优待，厚遇。\n[^注释12]: 诚：的确，确实；宜：应该。\n[^注释13]: 开张圣听：扩大圣明的听闻，意思是要后主广泛地听取别人的意见；开张，扩大。\n[^注释14]: 光：发扬光大，用作动词；遗德：留下的美德。\n[^注释15]: 恢弘：发扬扩大，用作动词。恢，大。弘，大，宽，这里是动词，也做“恢宏”；气：志气。\n[^注释16]: 妄自菲薄：过于看轻自己；妄：过分；菲薄：小看，轻视。\n[^注释17]: 引喻失义：讲话不恰当。引喻：称引、譬喻；喻：比如；义：适宜、恰当。\n[^注释18]: 以：以致（与以伤先帝之明的以用法相同：以致）；塞：阻塞；谏：劝谏。\n```\n\n其渲染效果如下：\n\n**《出师表》（节选）**\n\n先帝[^注释1]创业[^注释2]未半而中道[^注释3]崩殂[^注释4]，今[^注释5]天下三分[^注释6]，益州疲弊[^注释7]，此[^注释8]诚危急存亡之秋也。然[^注释9]侍卫之臣不懈于内，忠志之士忘身[^注释10]于外者，盖追先帝之殊遇[^注释11]，欲报之于陛下也。诚[^注释12]宜开张圣听[^注释13]，以光[^注释14]先帝遗德，恢弘[^注释15]志士之气，不宜妄自菲薄[^注释16]，引喻失义[^注释17]，以塞忠谏之路也[^注释18]。\n\n[^注释1]: 先帝：指汉昭烈帝刘备。先，尊称死去的人。\n[^注释2]: 创：开创，创立；业：统一天下的大业。\n[^注释3]: 中道：中途。\n[^注释4]: 崩殂（cú）：死。崩，古时指皇帝死亡。殂，死亡。\n[^注释5]: 今：现在。\n[^注释6]: 三分：天下分为孙权，曹操，刘备三大势力。\n[^注释7]: 益州疲弊：弱，处境艰难；益州：汉代行政区域十三刺史部之一，包括今四川省和陕西省一带，这里指蜀汉。疲弊（pí bì）：人力缺乏，物力缺无，民生凋敝。\n[^注释8]: 此：这；诚：的确，实在；之：的；秋：时，时候，这里指关键时期，一般多指不好的。\n[^注释9]: 然：然而；侍：侍奉；卫：护卫；懈：松懈，懈怠；于：在；内：皇宫中。\n[^注释10]: 忘身：舍身忘死，奋不顾身。\n[^注释11]: 盖：原来；追：追念；殊遇：优待，厚遇。\n[^注释12]: 诚：的确，确实；宜：应该。\n[^注释13]: 开张圣听：扩大圣明的听闻，意思是要后主广泛地听取别人的意见；开张，扩大。\n[^注释14]: 光：发扬光大，用作动词；遗德：留下的美德。\n[^注释15]: 恢弘：发扬扩大，用作动词。恢，大。弘，大，宽，这里是动词，也做“恢宏”；气：志气。\n[^注释16]: 妄自菲薄：过于看轻自己；妄：过分；菲薄：小看，轻视。\n[^注释17]: 引喻失义：讲话不恰当。引喻：称引、譬喻；喻：比如；义：适宜、恰当。\n[^注释18]: 以：以致（与以伤先帝之明的以用法相同：以致）；塞：阻塞；谏：劝谏。\n\n![图片描述](https://img.mukewang.com/wiki/5ebc11d3093c5e5616921248.jpg)\n\n## 六、Markdown 数学公式\n\n\n\n### 1. 前言\n\n在专业的学术论文中，数学公式往往是不可或缺的。在 Word 中，想表达出一个复杂的公式非常繁琐，幸运的是 Markdown 其语法中，支持使用 LaTeX 语法实现在文档中插入数学公式。\n\n**环境说明**：\n考虑到 Markdown 工具之间的不兼容，有的内容直接从页面复制粘贴到本地不会正常显示，大家学习时自己动手写是肯定没问题的。本节所有实例代码及演示效果均使用 Typora 工具完成。\nLaTex 是 Markdown 扩展功能，需要在 Typora 中开启 LaTex 支持，具体方式为：「设置」-> 「Markdown」->「Markdown 扩展语法」-> 勾选「内联公式」，如下图：\n![图片描述](https://img.mukewang.com/wiki/5ebc19060898afb114000960.jpg)\n\n\n\n### 2. 语法详解\n\n\n\n#### 2.1 公式的声明\n\nMarkdown 中的数学公式也分为「行中公式」和「独立公式」两种。\n\n##### 2.1.1 行中公式\n\n行中公式使用两个单独的「美元符 `$`」表示。\n\n**实例 1**：\n\n```markdown\n$1 + 1 = 2$\n```\n\n其渲染效果如下：\n\n$1 + 1 = 2$\n\n##### 2.1.1 独立公式\n\n独立公式的写法是将公式两边用两个连续的「美元符 ` $$ `」包裹，换行通过在行尾添加 `\\\\` 实现。\n\n**实例 2**：\n\n```markdown\n$$\n\\begin{align*}\nx + y = 10 \\\\\nx - y = 6 \\\\\n2x = 16 \\\\\nx = 8 \\\\\ny = 2\n\\end{align*}\n$$\n```\n\n其渲染效果如下：\n$$\n\\begin{align*}\nx + y = 10 \\\\\nx - y = 6 \\\\\n2x = 16 \\\\\nx = 8 \\\\\ny = 2\n\\end{align*}\n$$\n\n#### 2.2 运算符\n\n##### 2.2.1 四则运算符\n\n四则运算符是理工运算中的基础，主要包含加减乘除和绝对值运算。\n\n**实例 3**：\n\n四则运算符号汇总。\n\n```markdown\n加法符号：$x+y=z$  \n减法符号：$x-y=z$  \n加减符号：$x \\pm y=z$  \n减加符号：$x \\mp y=z$  \n叉乘符号：$x \\times y=z$  \n点乘符号：$x \\cdot y=z$  \n星乘符号：$x \\ast y=z$  \n除法符号：$x \\div y=z$  \n斜除符号：$x/y=z$  \n分式1：$\\frac{x+y}{y+z}$   \n分式2：${x+y} \\over {y+z}$  \n绝对值：$|x+y|$  \n```\n\n其渲染效果如下：\n\n加法符号：$x+y=z$  \n减法符号：$x-y=z$  \n加减符号：$x \\pm y=z$  \n减加符号：$x \\mp y=z$  \n叉乘符号：$x \\times y=z$  \n点乘符号：$x \\cdot y=z$  \n星乘符号：$x \\ast y=z$  \n除法符号：$x \\div y=z$  \n斜除符号：$x/y=z$  \n分式1：$\\frac{x+y}{y+z}$   \n分式2：${x+y} \\over {y+z}$  \n绝对值：$|x+y|$  \n\n##### 2.2.2 逻辑运算符\n\n**实例 4**：\n\n逻辑运算符号汇总。\n\n```markdown\n等于符号：$x+y=z$  \n大于符号：$x+y>z$  \n小于符号：$x+y<z$  \n大于等于符号：$x+y \\geq z$  \n小于等于符号：$x+y \\leq z$  \n不等于符号：$x+y \\neq z$  \n不大于等于符号：$x+y \\ngeq z$  \n不大于等于符号：$x+y \\not\\geq z$  \n不小于等于符号：$x+y \\nleq z$  \n不小于等于符号：$x+y \\not\\leq z$  \n约等于符号：$x+y \\approx z$  \n恒定等于符号：$x+y \\equiv z$  \n```\n\n其渲染效果如下：\n\n等于符号：$x+y=z$  \n大于符号：$x+y>z$  \n小于符号：$x+y<z$  \n大于等于符号：$x+y \\geq z$  \n小于等于符号：$x+y \\leq z$  \n不等于符号：$x+y \\neq z$  \n不大于等于符号：$x+y \\ngeq z$  \n不大于等于符号：$x+y \\not\\geq z$  \n不小于等于符号：$x+y \\nleq z$  \n不小于等于符号：$x+y \\not\\leq z$  \n约等于符号：$x+y \\approx z$  \n恒定等于符号：$x+y \\equiv z$  \n\n##### 2.2.3 高等运算符\n\n**实例 5**：\n\n高等运算符号汇总。\n\n```markdown\n平均数符号：$\\overline{xyz}$   \n开二次方符号：$\\sqrt x$       \n开方符号：$\\sqrt[3]{x+y}$   \n对数符号：$\\log(x)$  \n极限符号：$\\lim^{x \\to \\infty}_{y \\to 0}{\\frac{x}{y}}$  \n极限符号：$\\displaystyle \\lim^{x \\to \\infty}_{y \\to 0}{\\frac{x}{y}}$  \n求和符号：$\\sum^{x \\to \\infty}_{y \\to 0}{\\frac{x}{y}}$  \n求和符号：$\\displaystyle \\sum^{x \\to \\infty}_{y \\to 0}{\\frac{x}{y}}$  \n积分符号：$\\int^{\\infty}_{0}{xdx}$  \n积分符号：$\\displaystyle \\int^{\\infty}_{0}{xdx}$ \n微分符号：$\\frac{\\partial x}{\\partial y}$  \n矩阵符号：$\\left[ \\begin{matrix} &1 &2 &\\cdots &4 &5 &6 &\\cdots &8\\\\ &\\vdots &\\ddots &\\cdots &13 &14 &15 &\\cdots &16\\end{matrix} \\right]$\n```\n\n其渲染效果如下：\n\n平均数符号：$\\overline{xyz}$   \n开二次方符号：$\\sqrt x$       \n开方符号：$\\sqrt[3]{x+y}$   \n对数符号：$\\log(x)$  \n极限符号：$\\lim^{x \\to \\infty}_{y \\to 0}{\\frac{x}{y}}$  \n极限符号：$\\displaystyle \\lim^{x \\to \\infty}_{y \\to 0}{\\frac{x}{y}}$  \n求和符号：$\\sum^{x \\to \\infty}_{y \\to 0}{\\frac{x}{y}}$  \n求和符号：$\\displaystyle \\sum^{x \\to \\infty}_{y \\to 0}{\\frac{x}{y}}$  \n积分符号：$\\int^{\\infty}_{0}{xdx}$  \n积分符号：$\\displaystyle \\int^{\\infty}_{0}{xdx}$ \n微分符号：$\\frac{\\partial x}{\\partial y}$  \n矩阵符号：$\\left[ \\begin{matrix} &1 &2 &\\cdots &4 &5 &6 &\\cdots &8\\\\ &\\vdots &\\ddots &\\cdots &13 &14 &15 &\\cdots &16\\end{matrix} \\right]$\n\n#### 2.3 上标、下标\n\n不同于上面所示上标、下标，在数学公式中有一种更为简单的定义方式。\n\n**实例 6**：\n\n```\n上标符号：$x^2$  \n下标符号：$y_1$  \n组合符号：$a^{x^{2}+y^{2}}$  \n```\n\n其渲染效果如下：\n\n上标符号：$x^2$  \n下标符号：$y_1$  \n组合符号：$a^{x^{2}+y^{2}}$  \n\n\n\n#### 2.4 希腊字母\n\n在 Markdown 文档的公式中插入希腊字母的方法是，在美元符号包裹住的中间，直接插入 LaTeX 形式的希腊字母语法即可。\n\n**实例 7**：\n\n```markdown\n阿尔法：$\\Alpha$，$\\alpha$  \n贝塔：$\\Beta$，$\\beta$  \n伽玛：$\\Gamma$，$\\gamma$  \n德尔塔：$\\Delta$，$\\delta$  \n艾普西龙：$\\Epsilon$，$\\epsilon$  \n捷塔：$\\Zeta$，$\\zeta$  \n依塔：$\\Eta$，$\\eta$  \n西塔：$\\Theta$，$\\theta$  \n艾欧塔：$\\Iota$，$\\iota$  \n喀帕：$\\Kappa$，$\\kappa$  \n拉姆达：$\\Lambda$，$\\lambda$  \n缪：$\\Mu$，$\\mu$  \n拗：$\\Nu$，$\\nu$  \n克西：$\\Xi$，$\\xi$  \n欧麦克轮：$\\Omicron$，$\\omicron$  \n派：$\\Pi$，$\\pi$  \n柔：$\\Rho$，$\\rho$  \n西格玛：$\\Sigma$，$\\sigma$  \n套：$\\Tau$，$\\tau$  \n宇普西龙：$\\Upsilon$，$\\upsilon$  \n发艾：$\\Phi$，$\\phi$  \n器：$\\Chi$，$\\chi$  \n普赛：$\\Psi$，$\\psi$  \n欧米伽：$\\Omega$，$\\omega$  \n```\n\n其渲染效果如下：\n\n阿尔法：$A$，$\\alpha$  \n贝塔：$B$，$\\beta$  \n伽玛：$\\Gamma$，$\\gamma$  \n德尔塔：$\\Delta$，$\\delta$  \n艾普西龙：$E$，$\\epsilon$  \n捷塔：$Z$，$\\zeta$  \n依塔：$H$，$\\eta$  \n西塔：$\\Theta$，$\\theta$  \n艾欧塔：$I$，$\\iota$  \n喀帕：$K$，$\\kappa$  \n拉姆达：$\\Lambda$，$\\lambda$  \n缪：$M$，$\\mu$  \n拗：$N$，$\\nu$  \n克西：$\\Xi$，$\\xi$  \n欧麦克轮：$O$，$\\omicron$  \n派：$\\Pi$，$\\pi$  \n柔：$P$，$\\rho$  \n西格玛：$\\Sigma$，$\\sigma$  \n套：$T$，$\\tau$  \n宇普西龙：$\\Upsilon$，$\\upsilon$  \n发艾：$\\Phi$，$\\phi$  \n器：$X$，$\\chi$  \n普赛：$\\Psi$，$\\psi$  \n欧米伽：$\\Omega$，$\\omega$  \n\n这里需要注意：希腊字母区分大小写，其大小写的定义跟随公式中，声明该希腊字母的语法的首字母大小写，同英文大写字母的也可用` $英文大写字母$ `表达渲染。\n\n\n\n### 3. 使用场景及实例\n\n数学公式常出现在算法描述或专业论文之中，是提升文章可读性和专业感的重要手段。\n\n**实例 8**：\n\n等比数列的通项公式。\n\n```markdown\n$$\na_n = a_1q^{n-1}= \\frac {a_1}{q} \\cdot q^n(n \\in N^*) \\\\\n其中前 n 项的和公式为：\\\\\nS_n = \\left\\{ \n\\begin{aligned}\n\\frac {a_1 \\cdot (1-q^n)}{1-q} &,q \\neq 1 \\\\\nna_1 &,q=1\n\\end{aligned}\n\\right.\n$$\n```\n\n其渲染效果如下：\n$$\na_n = a_1q^{n-1}= \\frac {a_1}{q} \\cdot q^n(n \\in N^*) \\\\\n其中前 n 项的和公式为：\\\\\nS_n = \\left\\{ \n\\begin{aligned}\n\\frac {a_1 \\cdot (1-q^n)}{1-q} &,q \\neq 1 \\\\\nna_1 &,q=1\n\\end{aligned}\n\\right.\n$$\n\n### 4. 小结\n\n- Markdown 可以扩展对 LaTeX 的支持，使得文本有能力渲染成数学公式；\n- Markdown 的同时支持行内公式及独立公式；\n- Markdown 的数学公式语法与 LaTeX 定义一致。\n\n## 七、Todo List（github)\n\n用法跟普通列表的用法差不多，只不过在每一项文字前面加了 [ ] 或者 [x]。[ ] 中间有且只有一个空格，表示未完成，另一个表示已完成。\n示例：\n\n```\n- [ ] task one\n- [x] task two\n```\n效果：\n\n![](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/20210526003802.png \"todo\")\n\n## 八、Emoji（github）\n\nGithub 比较有意思的是可以支持 emoji。比如 `:smile:` 表示笑脸等等\n示例：\n\n```\n:smile:\n```\n效果：:smile:\n\n具体可以查看 [Emoji Cheat Sheet](http://www.webpagefx.com/tools/emoji-cheat-sheet/)\n\n## 九、Markdown 生成目录\n\n### 1. 前言\n\n目录是文章内容的整体索引，是文章结构的最直观表现形式。\n\nMarkdown 为生成目录提供了快捷方式，大大降低了文章目录的编排复杂度。\n\n### 2. 语法详解\n\n#### 2.1 目录的自动生成\n\n在 Markdown 中，自动生成目录非常简单，只需要在恰当的位置添加 `[TOC]` 符号，凡是以 `#` 定义的标题都会被编排到目录中。\n\n**实例 1**：\n\n使用 `[TOC]` 生成文档目录导航。\n\n```markdown\n[TOC]\n\n# 一级标题\n\n一些内容。。。。\n\n## 二级标题\n\n一些内容。。。。\n\n### 三级标题\n\n一些内容。。。。\n```\n\n渲染效果如下：\n\n![图片描述](https://img.mukewang.com/wiki/5ebc130c098cdca919400900.jpg)\n\n#### 2.2 手动书写目录\n\n尽管自动生成目录非常方便，我们也难免有自定义目录的需求，如只显示一二级大标题等。\n\n手动添加目录的方法就是将「列表」和「页内超链接」相结合。\n\n**实例 2**：\n\n用列表和链接做出目录效果。\n\n```markdown\n- [一级标题](#一级标题)\n  - [标题 1-1](#二级标题 1-1)\n  - [标题 1-2](#二级标题 1-2)\n- [二级标题](#二级标题)\n  - [标题 2-1](#二级标题 2-1)\n  - [标题 2-2](#二级标题 2-2)\n- [一级标题](#一级标题)\n  - [标题 1-1](#二级标题 1-1)\n  - [标题 1-2](#二级标题 1-2)\n- [二级标题](#二级标题)\n  - [标题 2-1](#二级标题 2-1)\n  - [标题 2-2](#二级标题 2-2)\n\n# 一级标题\n一些内容……\n## 二级标题 1-1\n一些内容……\n## 二级标题 1-2\n一些内容……\n# 二级标题\n一些内容……\n## 二级标题 2-1\n一些内容……\n## 二级标题 2-2\n一些内容……\n```\n\n其渲染效果如下：\n\n![图片描述](https://img.mukewang.com/wiki/5ebc1317092dca0b19401724.jpg)\n\n\n\n### 3. 使用场景\n\n目录适用于有章节标题的文章，通常用于跳转，所以适合在网页或 PDF 文件中使用。\n\n### 4. 小结\n\n- Markdown 支持自动使用 `[toc]` 标记生成目录；\n- 当自动生成的目录无法满足需求时，我们仍可通过「页内超链接」的形式定义目录；\n- 由于 Markdown 没有分页的概念，所以目录中无法自动页码。\n\n## 写作工具\n\n### ①MarkdownPad\n\nMarkdownPad 被很多人称赞为 windows 下最好用的 Markdown 编辑器之一，不过仅支持 windows。它有免费版和收费版（MarkdownPad Pro），一般情况下免费版就够用了，想用 pro 版的可以自行网上下载，强大的国人 crack 无处不在的~ ~。\n\nMarkdownPad 支持键盘快捷键和工具栏操作，即可添加标记也可移除，支持即时 HTML 预览、支持自定义配色方案、字体、大小和布局、支持音乐视频，可以导出 HTML 和 PDF。\n\nMarkdownPad 是独立的软件。\n\n更多介绍及下载：http://markdownpad.com/\n\n### ②Typora（亲测）\n\nTypora 也是非常用名，非常好用的 markdown 编辑器，它的设计理念很不一样，是真正的即时预览型编辑器，不同于左右两个窗口的编辑器。Typora 的设计理念就是极致简洁，它将「写字」和「预览」这两件事情合并了。\n\n如果要修改已经写好的 markdown 标记可以点击切换到“源代码模式”。\n\nTypora 同样支持 Windows、OS X 和 Linux 多个操作系统，支持数学编辑，可与 Word 直接格式转换，可以进行多种文档格式转换。Typora 流畅度和反应速度很快，特别适合那些手速快的人。\n\nTypora 是独立的软件。\n\n更多介绍及下载：https://www.typora.io/\n\n### ③Hbuilder X\n先hexo s 启动本地服务器预览\n可以通过 Hbuilder X 内置浏览器观察文章内容\n实现边写变预览便于修改\n\n### ④更多\nmarkdown 编辑器产品非常多，以上只是本人接触过的一些，相信还有很多很好的 markdown 存在,橘生淮南则为橘，橘生淮北则为枳，找到适合自己的才是最好的。\n\nPS: 详细信息可以查看[官方文档](https://guides.github.com/features/mastering-markdown/)\n\n\n\n{% note green 'fas fa-rocket' %}\n\n**下篇**：{% post_link Markdown-Emoji-速查 ' ✨ Markdown Emoji 速查' %}\n\n{% endnote %}\n","tags":["Markdown"],"categories":["Markdown"]},{"title":"Markdown 基础语法-一","url":"/undefined/793ae297.html","content":"{% note blue 'fas fa-rocket' %}\n\n {% post_link Markdown-基础语法-一 ' 📑 Markdown 基础语法-一' %} - {% post_link Markdown-基础语法-二 ' 📑 Markdown 基础语法-二' %} - {% post_link Markdown-Emoji-速查 ' ✨ Markdown Emoji 速查' %}\n\n{% endnote %}\n\n## Markdown 简介\n\nMarkdown 是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。\n\n**优点**：\n\n- 因为是纯文本，所以只要支持 Markdown 的地方都能获得一样的编辑效果，可以让作者摆脱排版的困扰，专心写作。\n- 操作简单。比如:WYSIWYG 编辑时标记个标题，先选中内容，再点击导航栏的标题按钮，选择几级标题。要三个步骤。而 Markdown 只需要在标题内容前加#即可\n- 支持 HTML 语法\n\n**缺点**：\n\n- 需要记一些语法（当然，是很简单）。\n\n- 有些平台不支持 Markdown 编辑模式。\n\n- 若想写 HTML 语法需要用到\\`\n\n  - 比如: `<h1>这是一个标题</h1>` 的代码为\n\n\n\n```\n`<h1>这是一个标题</h1>`\n```\n\nHexo 是使用 Markdown 编辑的。\n\n## 一、标题\n\n在想要设置为标题的文字前面加 # 来表示\n\n一个 # 是一级标题，二个 # 是二级标题，以此类推。支持六级标题。\n\n注：标准语法一般在 # 后跟个空格再写文字。\n示例：\n\n```\n# 这是一级标题\n## 这是二级标题\n### 这是三级标题\n#### 这是四级标题\n##### 这是五级标题\n###### 这是六级标题\n```\n\n效果：\n\n<img src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/20210530181152.png\" style=\"zoom:50%;\" />\n\n## 二、段落元素\n\n### 段落与换行\n\n　　Markdown 中的段落指连续的一段文字，编写时段落之间用至少一个空行隔开，段落内多个空格将被视为一个空格，段首不支持缩进。：  \n　　在 Markdown 中，即使插入多个换行符，渲染时也会被合并成单一空行。如果想要在显示时显示多个空行，可以插入` <br/>`或`\\ `来实现，注意的是，插入的 `<br/>` 应与前后的段落中间至少空一行。  \n　　如果要让文字另起一行而不分段，需在行尾增加两个空格（在 Typora 中实现此效果需要在源代码模式下编辑）。 \n\n### 行首缩进\n\n 　　直接在 Markdown 里用空格和 Tab 键缩进在渲染后会被忽略掉，需要借助 HTML 转义字符在行首添加空格来实现，`&ensp;` 代表半角空格，`&emsp;` 代表全角空格（中文可直接使用全角空格）。\n\n示例代码：\n\n```\n&emsp;&emsp;春天来了，又到了万物复苏的季节。\n　　春天来了，又到了万物复苏的季节。\n```\n\n示例效果：\n\n&emsp;&emsp;春天来了，又到了万物复苏的季节。\n\n　　春天来了，又到了万物复苏的季节。\n\n**配置全局段落样式**\n\n```markdown\n### 这是标题\n\n正文第一段。正文第一段。正文第一段。正文第一段。\n正文第一段。正文第一段。正文第一段。正文第一段。\n正文第一段。正文第一段。正文第一段。正文第一段。\n正文第一段。正文第一段。正文第一段。正文第一段。\n正文第一段。正文第一段。\n\n正文第二段。正文第二段。正文第二段。正文第二段。\n正文第二段。正文第二段。正文第二段。正文第二段。\n正文第二段。正文第二段。正文第二段。正文第二段。\n正文第二段。正文第二段。正文第二段。正文第二段。\n正文第二段。正文第二段。\n\n注意css样式放在文章最后。\n\n<style>p{text-indent:2em}</style>\n```\n渲染结果如下：\n\n![图片描述](https://img.mukewang.com/wiki/5eb2d5d00934e61517860540.jpg)\n\n```\n### 水调歌头·明月几时有\n\n#### 苏轼 / 宋\n\n丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。\n\n明月几时有？把酒问青天。\n不知天上宫阙，今夕是何年。\n我欲乘风归去，又恐琼楼玉宇，高处不胜寒。\n起舞弄清影，何似在人间。\n\n转朱阁，低绮户，照无眠。不应有恨，何事长向别时圆？\n人有悲欢离合，月有阴晴圆缺，此事古难全。\n但愿人长久，千里共婵娟。\n\n<style>\n  h3, h4 {text-align: center;}\n  p {text-indent: 2em;}\n</style>\n\n```\n\n渲染效果如下：\n\n![图片描述](https://img.mukewang.com/wiki/5eb2d601097c8d9f20040782.jpg)\n\n## 三、字体\n\n### **1、常规语法**\n\n加粗\n要加粗的文字左右分别用两个 * 号包起来\n\n\n也可`<b>加粗内容</b>`\n\n斜体\n要倾斜的文字左右分别用一个 * 号包起来\n也可`<i>倾斜内容</i>`\n\n斜体加粗\n要倾斜和加粗的文字左右分别用三个 * 号包起来\n也可`<b><i>加粗倾斜内容</i></b>`\n\n删除线\n要加删除线的文字左右分别用两个 ~~ 号包起来（删除线用 HTML 语法比较麻烦建议使用 Markdown 语法）\n\n示例：\n\n```\n**这是加粗**\n*这是倾斜*\n***这是斜体加粗***\n~~这是加删除线~~\n```\n\n效果：\n\n**这是加粗**\n*这是倾斜*\n***这是斜体加粗***\n~~这是删除线~~\n\n**下划线**\n\n  下划线在word中可以说很简单的操作，但是在Markdown中就不是那么容易了。想要实现下划线的效果，需要写一长串的符号：`<span style=\"border-bottom:2px dashed red\">`+`内容`+`</span>`。这个当然是自定义程度最高的了，涉及到css的语法，可以定义下划线的宽度、样式以及颜色。\n\n比如：<span style=\"border-bottom:2px dashed red\">Hello World</span>\n\n  如果为了简单那么可以使用u标签，也就是`<u>`+`内容`+`</u>`，比如：<u>Hello World</u>。可以看到这是最平常的一种样式。如果只需要简单使用下划线，那么可以用第二种方式。\n\n### **2、更改字体、大小、颜色**\n\n#### 概述\n\n  `语法：`\n  `<font face =\"宋体\">内容</font>`、`<font color=yellow>内容</font>`、`<font size=5>内容</font>`。\n例子：\n\n```\n<font face=\"黑体\">我是黑体字</font>\n<font face=\"微软雅黑\">我是微软雅黑</font>\n<font face=\"STCAIYUN\">我是华文彩云</font>\n<font color=red>我是红色</font>\n<font color=#008000>我是绿色</font>\n<font color=Blue>我是蓝色</font>\n<font size=5>我是尺寸</font>\n<font face=\"黑体\" color=green size=5>我是黑体，绿色，尺寸为5</font>\n<font size=6 color= blue face=\"宋体\">Hello World!</font>\n```\n  `效果：`\n\n<font face=\"黑体\">我是黑体字</font><br/>  \n<font face=\"微软雅黑\">我是微软雅黑</font><br/>  \n<font face=\"STCAIYUN\">我是华文彩云</font><br/>  \n<font color=red>我是红色</font><br/>  \n<font color=#008000>我是绿色</font><br/>  \n<font color=Blue>我是蓝色</font><br/>  \n<font size=5>我是尺寸</font><br/>  \n<font face=\"黑体\" color=green size=5>我是黑体，绿色，尺寸为5</font><br/>  \n<font size=6 color= blue face=\"宋体\">Hello World!</font>  \n\n#### 常用字体\n\n字体在不同环境中支持程度不同，表现结果可能也不同。在设计上，尽量选择较为通用的字体。以下是一些 Web 常用中文字体：\n\n| 字体中文名称 | 字体写法                        |\n| :----------- | :------------------------------ |\n| 黑体         | `<font face='SimHei'>`          |\n| 宋体         | `<font face='SimSun'>`          |\n| 新宋体       | `<font face='NSimSun'>`         |\n| 仿宋         | `<font face='FangSong'>`        |\n| 楷体         | `<font face='KaiTi'>`           |\n| 仿宋_GB2312  | `<font face='FangSong_GB2312'>` |\n| 楷体_GB2312  | `<font face='KaiTi_GB2312'>`    |\n| 微软雅黑     | `<font face='Microsoft YaHei'>` |\n\n#### 使用 `<big>` 和 `<small>` 标签修改局部字号\n\n**实例**：\n\n```markdown\n#### 使用 `<big>` 或 `<small>` 标签的修改字号\n\n这段文字里既包含<big>放大了的文字</big>，也包含<small>缩小了的文字</small>\n```\n\n其渲染结果如下：\n\n这段文字里既包含<big>放大了的文字</big>，也包含<small>缩小了的文字</small>  \n\n#### 全局字体字号的设置\n\n**实例 **：\n\n使用 `style` 样式修改全局字体和字号。\n\n```markdown\n#### 使用 `style` 修改字体字号\n\n# WORD中常用的一号宋体标题\n\n## WORD中常用的二号宋体标题\n\n### WORD中常用的三号宋体标题\n\nWord 中常用的四号正文楷体\n\n<style>\nh1 { font: 26pt song !important; }\nh2 { font: 22pt song !important; }\nh3 { font: 16pt song !important; }\np { font: 14pt kai !important; }\n</style>\n```\n\n其渲染结果如下：\n\n![图片描述](https://img.mukewang.com/wiki/5eaeb09809928f7e23220616.jpg)\n\n#### 字体颜色\n\n**前景色**\n\n在 Markdown 文件中，建议使用 `<font>` 标签的 `color` 属性修改文字颜色。\n\n**实例 1**：\n\n```markdown\n#### 使用 `<font>` 的标签的修改文字前景色\n\n<font color=\"red\">红色</font>\n<font color=\"green\">绿色</font>\n<font color=\"blue\">蓝色</font>\n\n<font color=\"rgb(200, 100, 100)\">使用 rgb 颜色值</font>\n\n<font color=\"#FF00BB\">使用十六进制颜色值</font>\n```\n\n渲染结果如下：\n\n<font color=\"red\">红色</font><br/>\n<font color=\"green\">绿色</font><br/>\n<font color=\"blue\">蓝色</font><br/>\n\n<font color=\"rgb(200, 100, 100)\">使用 rgb 颜色值</font><br/>\n\n<font color=\"#FF00BB\">使用十六进制颜色值</font>\n\n除了修改 `color` 属性外，还可以使用 `style` 样式属性修改文字颜色。\n\n**实例 2**：\n\n```markdown\n#### 使用 `style` 的标签的修改文字前景色\n\n<font style=\"color: red\">红色</font>\n<font style=\"color: green\">绿色</font>\n<font style=\"color: blue\">蓝色</font>\n\n<font style=\"color: rgb(200,100,100)\">使用 rgb 颜色值</font>\n\n<font style=\"color: #FF00BB\">使用十六进制颜色值</font>\n```\n\n其渲染结果如下：\n\n<font style=\"color: red\">红色</font><br/>\n<font style=\"color: green\">绿色</font><br/>\n<font style=\"color: blue\">蓝色</font><br/>\n\n<font style=\"color: rgb(200,100,100)\">使用 rgb 颜色值</font><br/>\n\n<font style=\"color: #FF00BB\">使用十六进制颜色值</font>\n\n**背景色**\n\nMarkdown 文档中定义文字背景色需要通过修改 `style` 样式实现。\n\n**实例 3**：\n\n```markdown\n#### 使用 `style` 属性修改文字的背景色\n\n<font style=\"background: red\">红色</font>\n<font style=\"background: green\">绿色</font>\n<font style=\"background: blue\">蓝色</font>\n\n<font style=\"background: rgb(200,100,100)\">使用 rgb 颜色值</font>\n\n<font style=\"background: #FF00BB\">使用十六进制颜色值</font>\n```\n\n其渲染结果如下：\n\n<font style=\"background: red\">红色</font><br/>\n<font style=\"background: green\">绿色</font><br/>\n<font style=\"background: blue\">蓝色</font><br/>\n\n<font style=\"background: rgb(200,100,100)\">使用 rgb 颜色值</font><br/>\n\n<font style=\"background: #FF00BB\">使用十六进制颜色值</font>\n\n**实例 4**：\n\n利用 `style` 的丰富样式，我们可以定义出丰富的文字形式。\n\n```markdown\n#### 更丰富背景样式\n\n\n<font style=\"background: url('http://www.wenliku.com/d/file/patterns/2019-06-26/d8fac26c38c9b2a7e2393fc9af766e8f.jpg') \">I wish you a Merry Christmas</font>\n\n使用图片作背景\n\n\n<font style=\"background: linear-gradient( to right, #ff1616, #ff7716, #ffdc16, #36c945, #10a5ce, #0f0096, #a51eff, #ff1616);\">太阳太阳，给我们带来，七色光彩</font>\n\n渐变背景色\n```\n\n其渲染结果如下：\n\n<font style=\"background: url('http://www.wenliku.com/d/file/patterns/2019-06-26/d8fac26c38c9b2a7e2393fc9af766e8f.jpg') \">I wish you a Merry Christmas</font><br/>\n\n<font style=\"background: linear-gradient( to right, #ff1616, #ff7716, #ffdc16, #36c945, #10a5ce, #0f0096, #a51eff, #ff1616);\">太阳太阳，给我们带来，七色光彩</font>\n\n#### 小结\n\n1. 写正式文档尽量使用全局字体，写个人文档可以更自由的发挥；\n2. 字号的定义尽量不要使用固定值，比如 `size=2` 或者 `font-size: 20px`，对于一种整体性较好，适应多种分辨率的布局形式，可以多使用相应字号如 `<big>`、`<small>`、`font-size: 2rem` 等；\n3. 字体效果与电脑中已安装的字体文件有关，由于电脑使用者、操作系统间的差异，同一 Markdown 在不同的电脑上表现可能会不同，请尽量使用通用字体。\n4. 同一颜色值在不同显示器上会有色差，选取颜色时尽量使用安全色。\n5. 为了确保整篇文章的整体风格一致，通常只需要配置全局的前景色和背景色即可。\n\n尽量不要主动定义 Markdown 文档中字体，如果 Markdown 中字体定义过多，维护的成本会很高。当我们需要修改字体字号的时候，请尽量使用 `<font>` 标签，因为 `<font>` 标签语义明确。  \n对于颜色，请尽量使用柔和的颜色，防止刺伤眼睛\n\n### **3、为文字添加背景色**\n\n  当然这个添加背景色是整个一行都会添加。\n  `语法`:`<table><tr><td bgcolor=#003454>内容</td></tr></table>`、\n &emsp;&emsp;&emsp;`<table><tr><td bgcolor=yellow>内容</td></tr></table>`\n  `例子`:`table><tr><td bgcolor=yellow><font color=Blue>Hello World!</font></td></tr></table>`\n  `效果`:\n\n<table><tr><td bgcolor=yellow><font color=Blue>Hello World!</font></td></tr></table>\n### **4、设置文字对齐方式**\n\n  在Markdown中设置文字对齐方式通过下列语法：\n\n  `居中对齐`:`<center>内容</center>`\n\n  `左对齐`:`<p align=\"left\">内容</p>`\n\n  `右对齐`:`<p align=\"right\">内容</p>`\n\n  `举例效果：`:\n\n<p align=\"left\">富强、民主、文明、和谐，自由、平等、公正、法治，爱国、敬业、诚信、友善</p>\n\n<center>富强、民主、文明、和谐，自由、平等、公正、法治，爱国、敬业、诚信、友善</center>\n\n<p align=\"right\">富强、民主、文明、和谐，自由、平等、公正、法治，爱国、敬业、诚信、友善</p>\n\n## 四、引用\n\n在引用的文字前加 > 即可。引用也可以嵌套，如加两个 >> 三个 >>>\n\nn 个…(貌似理论可以一直加下去)\n\n示例：\n```\n> 这是引用的内容\n>> 这是引用的内容\n>>>>>>>>>> 这是引用的内容\n>\n>> 这是引用的内容\n>\n> 这是引用的内容\n```\n效果：\n\n> 这是引用的内容\n> > 这是引用的内容\n> >\n> > >>>>>>>> 这是引用的内容\n>\n> > 这是引用的内容\n>\n> 这是引用的内容\n\n如果需要在块引用内的换行，可以在行尾增加两个连续的空格。\n\n这一写法还可以简化成只在第一行加入引用符号。\n\n```\n> 一支穿云箭，千军万马来相见；  \n两副忠义胆，刀山火海提命现。  \n—— 星仔\n```\n\n如果需要在块引用里分段，只要在块引用内增加由块引用符号开启的空行即可。\n\n```\n> 一支穿云箭，千军万马来相见；\n>\n> 两副忠义胆，刀山火海提命现。\n>\n> —— 星仔\n```\n\n**自定义块引用的样式**\n\n如果需要定制块引用的样式，可以通过 CSS 实现。\n\n示例：\n\n```markdown\n### 扩展块引用的样式\n\n> 一支穿云箭，千军万马来相见；  \n> 两副忠义胆，刀山火海提命现。  \n> —— 星仔\n\n<style>\nblockquote {\n  border-left: 2px dashed #333 !important;\n  background: linear-gradient(to bottom, #efe 0%,#fef 100%) !important;\n}\n</style>\n```\n\n其渲染结果如下：\n\n> 一支穿云箭，千军万马来相见；  \n> 两副忠义胆，刀山火海提命现。  \n> —— 星仔\n\n<style>\nblockquote {\n  border-left: 2px dashed #333 !important;\n  background: linear-gradient(to bottom, #efe 0%,#fef 100%) !important;\n}\n</style>\n\n![图片描述](https://img.mukewang.com/wiki/5eae94e009d93f3a23900348.jpg)\n\n**小结**\n\n1. 在块引用中，同一引用范围内的空行也是需要由块引用标识引导的；\n2. 在块引用中，我们依然可以使用其他特殊样式，比如粗体字、列表等。\n\n在有讨论、说明性质的文章中，块引用通常放在文章的开头，即从一开始抛出某个观点，后面再用大篇幅去做详细的解读，块引用有很好的聚焦功能，整篇文章中块引用的占比尽量不要太多，否则会导致读者的注意力不集中。\n\n## 五、分割线\n\n###  分隔线的声明\n\n在 Markdown 文件中，连续的三个「星号 `*`」，或者连续的三个「减号 `-`」，或者连续的三个「下划线 `_`」会被渲染成分割线。\n\n**实例 1**：\n\n```\n---\n----\n***\n*****\n```\n效果：\n\n***\n***\n\n###  分割线的样式\n\nMarkdown 的目标是整个文档的风格统一，但是既然依托于 html 语法，那我们就依然能通过修改 CSS 的方式定制分割线的样式。\n\n**实例 2**：\n\n修改分割线的粗细\n\n```markdown\n### 分割线的尺寸\n\n#### 3px 宽线条\n___\n\n#### 5px 宽线条\n___\n\n#### 10px 宽线条\n___\n\n<style>\nhr:nth-of-type(1) {\n  border-width: 3px 0 0 0 !important;\n}\nhr:nth-of-type(2) {\n  border-width: 5px 0 0 0 !important;\n}\nhr:nth-of-type(3) {\n  border-width: 10px 0 0 0 !important;\n}\n</style>\n```\n\n渲染结果如下：\n\n___\n\n\n___\n\n\n___\n\n<style>\nhr:nth-of-type(1) {\n  border-width: 3px 0 0 0 !important;\n}\nhr:nth-of-type(2) {\n  border-width: 5px 0 0 0 !important;\n}\nhr:nth-of-type(3) {\n  border-width: 10px 0 0 0 !important;\n}\n</style>\n\n![图片描述](https://img.mukewang.com/wiki/5eae6ea3093eb01e24380612.jpg)\n\n**实例 3**：\n\n修改分割线的颜色：\n\n```markdown\n### 分割线的颜色\n\n#### 红色分割线\n___\n\n#### 蓝色分割线\n___\n\n#### 半透明的黑色分割线\n___\n\n#### 渐变色分割线\n___\n\n<style>\nhr:nth-of-type(1) {\n  border-color: red !important;\n}\nhr:nth-of-type(2) {\n  border-color: #00F !important;\n}\nhr:nth-of-type(3) {\n  border-color: #0005 !important;\n}\nhr:nth-of-type(4) {\n  border-image: linear-gradient(to right, #F00, #0F0 20%, #00F 80%, #000) 1 !important;\n}\n</style>\n```\n\n渲染结果如下：\n\n![图片描述](https://img.mukewang.com/wiki/5eae6eb109a888e124440712.jpg)\n\n**实例 4**：\n\n修改分割线的类型：\n\n```markdown\n### 分割线的类型\n\n#### 实线分隔线\n___\n\n#### 虚线分割线\n___\n\n#### 点状分割线\n___\n\n#### 双线分割线\n___\n\n#### 凹槽分割线\n___\n\n#### Inset分割线\n___\n\n#### Outset分割线\n___\n\n<style>\nhr {\n  border-style: none !important;\n  border-top-width: 5px !important;\n}\nhr:nth-of-type(1) {\n  border-top-style: solid !important;\n}\nhr:nth-of-type(2) {\n  border-top-style: dashed !important;\n}\nhr:nth-of-type(3) {\n  border-top-style: dotted !important;\n}\nhr:nth-of-type(4) {\n  border-top-style: double !important;\n}\nhr:nth-of-type(5) {\n  border-top-style: groove !important;\n}\nhr:nth-of-type(6) {\n  border-top-style: ridge !important;\n}\nhr:nth-of-type(7) {\n  border-top-style: inset !important;\n}\nhr:nth-of-type(8) {\n  border-top-style: outset !important;\n}\n</style>\n```\n\n渲染结果如下：\n\n![图片描述](https://img.mukewang.com/wiki/5eae6ebe096a8caa24361218.jpg)\n\n### 小结\n\n1. 分割线使用的关键字 `*`、`-`、`_`，都包含多种语义，当我们希望增加分割线的时候，请注意确保该字符连续出现，并且保证至少三个，同时，该行前后不允许有别的内容；\n2. 使用减号 `-`，用于分隔线的时候需要注意，因为减号还有二级标题的作用，即在一行文字的下面插入三个减号时，该文字变成二级标题，所以使用减号需要确保前面有一空行；\n3. 建议在文章中都是用下划线 `_`，作为换行的输入，这样避免语义错误，同时与 Word 的方式更加接近。\n\n在一篇文章中分割线不宜出现次数过多，不然会显得文章整体过于琐碎凌乱，缺少主题。分割线虽然不是使用频繁的布局工具，但在展示个性、引起读者注意等方面有非常好的效果，用好分割线对文章整体格调的提升有非常大的帮助。\n\n##  六、插入多媒体\n\n### **图片**\n\n#### 行内式\n\n语法：\n\n```\n![图片alt](图片地址 ''图片title'')\n\n图片alt就是显示在图片下面的文字，相当于对图片内容的解释。\n图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加\n```\n使用 HTML 语法`<img src=\"图片地址\" alt=\"\" title=\"\"><>`\n\n示例：\n```\n![](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/markdown.jpg \"markdown\")\n```\n效果：\n\n![](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/markdown.jpg \"markdown\")\n\n#### 参考式\n\n  `参考式链接语法`：`![图片名][id]`+`[id]:图片地址`,后者可以写在文章的任意位置，当然一般写在底部。\n\n```markdown\n![][img1]\n![][img2]\n\n[img1]: https://hbfile.huabanimg.com/img/weekly/74/topic/3624245/49465709_sq120 \"麦兜兜\"\n[img2]: https://hbfile.huabanimg.com/img/weekly/74/topic/3624245/49464585_sq120 \"新之助\"\n```\n\n#### 图片的对齐方式\n\n  `语法`: markdown内`!`前打个空格即可左对齐，多个空格可调整位置。或者 `<div align=\"center\"><img src=\"图片地址\" /></div>`\n\n图片可以用`<img>`中`align`标签或者`style`设置样式实现对齐方式（left、right、center）。\n\n**示例：**\n\n```\n<div align=\"center\">\n<img src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/markdown.jpg\"/>\n</div>\n```\n\n **效果：**\n\n<div align=\"center\"><img src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/markdown.jpg\"/></div>\n\n\n\n**以下示例为文字环绕设置：**\n\n```\n\n<img src='https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/markdown.jpg' align='right' style='width:300px;height:100px'/>\n\n<img src='https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/markdown.jpg' style='float:right;width:300px;height:100px'/>\n\n<img align=\"left\" width=\"65\" height=\"75\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/markdown.jpg\"/>\n\n<img src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/markdown.jpg\" width=\"200\" height=\"100\" div align=\"right\"/>\n```\n\n\n\n**以下示例为段内/行内图片设置：**\n\n```\n<div style=\"text-align:center\">\n<img src='https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/markdown.jpg'/>\n</div>\n\n<img src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/markdown.jpg\" alt=\"\" style=\"width:200px;display:inline\">\n```\n\n**html让同一行的文字和图片居中对齐显示**\n\n实现方法:css属性->vertical-align:middle\n\n给行内的每个内容标签都加上这个属性（注：改属性只对行内元素起作用，如果不是行内元素要加上diaplay:inline-block）；\n\n实现效果如图：（rem布局）\n\n![img](https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/20180626163527276)\n\n`示例：`\n\n```\n<div class=\"satisDiv span12 borderB pad10px h44\">\n     <span class=\"fs028rem \">满意度:</span>\n     <span class=\"ml030rem fs028rem\">十分满意</span>\n     <img class=\"ml020rem\" data-rateLevel=\"1\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/20210530155320.png\" width=\"16px;\">\n     <span class=\"ml030rem fs028rem\">满意</span>\n     <img class=\"ml020rem\" data-rateLevel=\"2\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/20210530155320.png\" width=\"16px;\">\n     <span class=\"ml030rem fs028rem\">一般</span>\n     <img class=\"ml020rem\" data-rateLevel=\"3\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/20210530155320.png\" width=\"16px;\">\n</div>\n```\n\n css:\n\n```css\n.satisDiv span,img{\n    padding-left:0;\n    vertical-align:middle;\n    display:inline-block;\n    float: none;\n}\n```\n\n`效果`:\n\n<div class=\"satisDiv span12 borderB pad10px h44\">\n     <span class=\"fs028rem \">满意度:</span>\n     <span class=\"ml030rem fs028rem\">十分满意</span>\n     <img class=\"ml020rem\" data-rateLevel=\"1\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/20210530155320.png\" width=\"16px;\">\n     <span class=\"ml030rem fs028rem\">满意</span>\n     <img class=\"ml020rem\" data-rateLevel=\"2\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/20210530155320.png\" width=\"16px;\">\n     <span class=\"ml030rem fs028rem\">一般</span>\n     <img class=\"ml020rem\" data-rateLevel=\"3\" src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/20210530155320.png\" width=\"16px;\">\n</div>\n#### 图片大小的设置\n\n  `语法`：`<img src=\"URL\" width=\"数值或者百分比\" height=\"数值或百分比\"/>`\n\n  `例子`:`<img src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/markdown.jpg\" width=\"200\" height=\"100\"/>`\n\n  `效果`:\n\n<img src=\"https://cdn.jsdelivr.net/gh/dyphire/PicGo/img/markdown.jpg\" width=\"200\" height=\"100\"/>\n\n#### 图片的样式\n\nMarkdown 本身没有为图片增加特殊的样式，如果我们需要特殊定义，可以通过 手动修改全局样式 `<style>` 实现。\n\n**示例 **：\n\n圆形图片。\n\n```markdown\n#### 使图片圆角\n\n![](https://c-ssl.duitang.com/uploads/item/201905/03/20190503105835_VfkU3.thumb.1000_0.png)\n\n<style>\n  img {\n    border-radius: 50% !important;\n    border: 30px solid #eee;\n  }\n</style>\n```\n\n\n\n图片是文档中最长出现的媒体文件，是用来表达内容的最好载体之一。一篇文章通常可以增加头部的封面图、尾部的签名图等。\n\n**示例 **：\n\n做一个类似图片预览的效果。\n\n```markdown\n#### 拼图九宫格\n\n![][img6]\n![][img5]\n![][img4]\n\n![][img3]\n![][img2]\n![][img1]\n\n![][img9]\n![][img8]\n![][img7]\n\n[img1]: https://c-ssl.duitang.com/uploads/item/202004/10/20200410101433_eTTNZ.thumb.300_300_c.jpeg\n[img2]: https://c-ssl.duitang.com/uploads/item/202004/10/20200410101434_iWadw.thumb.300_300_c.jpeg\n[img3]: https://c-ssl.duitang.com/uploads/item/202004/10/20200410101434_Z3JVy.thumb.300_300_c.jpeg\n[img4]: https://c-ssl.duitang.com/uploads/item/202004/10/20200410101435_NiLkv.thumb.300_300_c.jpeg\n[img5]: https://c-ssl.duitang.com/uploads/item/202004/10/20200410101437_CxzYm.thumb.300_300_c.jpeg\n[img6]: https://c-ssl.duitang.com/uploads/item/202004/10/20200410101437_wdizF.thumb.300_300_c.jpeg\n[img7]: https://c-ssl.duitang.com/uploads/item/202004/10/20200410101438_J8vff.thumb.300_300_c.jpeg\n[img8]: https://c-ssl.duitang.com/uploads/item/202004/10/20200410101439_cVcLx.thumb.300_300_c.jpeg\n[img9]: https://c-ssl.duitang.com/uploads/item/202004/10/20200410101439_yhUv3.thumb.300_300_c.jpeg\n\n<style>\nimg {\n\twidth: 150px !important;\n\theight: 150px !important;\n\tborder: 1px solid #EEE;\n}\n</style>\n```\n\n### 文章添加视频和 gif\n\n添加视频代码:(长宽可以自己定义)\n\n```html\n<iframe height=100 width=100 src=\"视频地址\">\n```\n\n添加 gif 代码:(长宽可以自己定义)\n\n```html\n<iframe height=100 width=100 src=\"gif 图片地址\">\n```\n\n\n\n## 七、超链接\n\n语法：\n\n### **行式链接**\n\n```\n[超链接名](超链接地址 \"超链接title\")\ntitle可加可不加\n```\n使用 HTML 语法`<a href=\"超链接地址\" title=\"\">超链接名</a>`\n示例：\n\n```\n[Dyphire's Blog](https://dyphire.github.io)\n```\n效果：\n\n[Dyphire's Blog](https://dyphire.github.io)\n\n### **参考式链接**\n\n  `参考式链接语法`：`[链接名][id]`+`[id]:链接地址`,后者可以写在文章的任意位置，当然一般写在底部。\n\n### **自动链接**\n\n  Markdown也可以自动链接的形式来处理网址和电子邮件信箱，只需要用尖括号括起来就可以了，Markdown会将其自动转换成链接。\n  `例子`:`<http://baidu.com>`\n  `效果`:<http://baidu.com>\n\n### 标签页内跳转\n\n1. 设定锚点\n\n```html\n<span id=\"锚点id\">任意title</span>\n```\n\n其中 `<span>` 可以用 `<div>` 或者 `</a>` 标签代替，我们要的是 `id`这个属性。\n\n1. 设定链接地址\n\n```markdown\n[任意title](#锚点id)\n```\n\n\n\n## 八、列表\n\n### 无序列表\n\n语法：\n无序列表用 - + * 任何一种都可以\n\n```\n- 列表内容\n+ 列表内容\n* 列表内容\n\n注意：- + * 跟内容之间都要有一个空格\n```\n使用 HTML 语法\n```\n<ul>\n<li>列表内容<li>\n<li>列表内容</li>\n</ul>\n```\n效果：\n\n- 列表内容\n+ 列表内容\n* 列表内容\n\n### 有序列表\n\n语法：\n数字加点\n```\n1. 列表内容\n2. 列表内容\n3. 列表内容\n```\n注意：序号跟内容之间要有空格\n使用 HTML 语法\n\n```\n<ol>\n<li>列表内容<li>\n<li>列表内容</li>\n</ol>\n```\n效果：\n\n1. 列表内容\t\n2. 列表内容\n3. 列表内容\n\n### 列表嵌套\n\n上一级和下一级之间敲三个空格即可(敲一下 Tap 键也可)\n\n- 一级无序列表内容 + 二级无序列表内容\n- 一级有序列表内容 + 二级有序/无序列表内容\n\n示例：\n```\n1. 有序项目1-1\n    1. 有序项目2-1\n    1. 有序项目2-2\n        - 无序项目3-1\n        - 无序项目3-1\n    1. 有序项目2-3\n```\n效果：\n\n1. 有序项目1-1\n    1. 有序项目2-1\n    1. 有序项目2-2\n        - 无序项目3-1\n        - 无序项目3-1\n    1. 有序项目2-3\n\n### 列表中嵌套其他内容\n\n段落、图片、引用等内容可以通过缩进的方式进入到列表的结构中。\n示例：\n\n```\n* 带段落的列表项\n\n  在列表项中的段落\n\n  * 带段落的列表项\n\n    在列表项中的段落\n\n* 带图片的列表项\n\n  ![](https://www.imooc.com/static/img/index/logo.png)\n\n  * 带图片的列表项\n\n    ![](https://www.imooc.com/static/img/index/logo.png)\n\n* 带引用的列表项\n\n  > 引用内容\n\n  * 带引用的列表项\n\n    > 引用内容\n```\n效果：\n\n* 带段落的列表项\n\n  在列表项中的段落\n\n  * 带段落的列表项\n\n    在列表项中的段落\n\n* 带图片的列表项\n\n  ![](https://www.imooc.com/static/img/index/logo.png)\n\n  * 带图片的列表项\n\n    ![](https://www.imooc.com/static/img/index/logo.png)\n\n* 带引用的列表项\n\n  > 引用内容\n\n  * 带引用的列表项\n\n    > 引用内容\n\n## 九、Markdown 注释\n\n### 1. 前言\n\n在任何一款现代程序语言中，注释都是至关重要的，它是源代码文件提升可读性的重要补充，也是多人协作时的重要工具。\n\nMarkdown 的注释可以通过三种方法实现：第一是通过 html 的 `<!-- -->` 标记；第二可以通过样式隐藏段落内容，即 `<div style=\"display:none\">`；第三是通过 Markdown 自身的解析原理实现。\n\n**环境说明**：\n考虑到 Markdown 工具之间的不兼容，有的内容直接从页面复制粘贴到本地不会正常显示，大家学习时自己动手写是肯定没问题的。本节所有实例代码及演示效果均使用 Typora 工具完成。\n本节所有截图均为 Typora 导出 HTML 后网页的渲染效果。\n\n### 2. 语法详解\n\n#### 2.1 使用原生 HTML 注释语法\n\n因为 Markdown 文档是基于 HTML 实现的，所以可以通过 HTML 原生对注释的支持实现文档注释效果。\n\n**实例 1**：\n\n```markdown\n#### 基于 HTML 标签的注释\n\n<!-- 这是一段被注释掉的文字 -->\n\n这是一段没有被注释的文字\n```\n\n其渲染结果如下：\n\n<!-- 这是一段被注释掉的文字 -->\n\n这是一段没有被注释的文字\n\n\n\n*请注意：此种方法被注释的内容是不被渲染输出的。*\n\n#### 2.2 使用 HTML 样式实现隐藏\n\n这种方式原则上并不是注释，而是将内容隐藏，已达到注释效果。\n\n**实例 2**：\n\n```markdown\n#### 基于 HTML 样式\n\n<div style=\"display:none\">\n这是一段被注释掉的文字\n</div>\n\n这是一段没有被注释的文字\n```\n\n其渲染结果如下：\n\n<div style=\"display:none\">\n这是一段被注释掉的文字\n</div>\n这是一段没有被注释的文字\n\n\n\n*请注意：此种方法被注释的内容是会被渲染输出的，只是在输出时会被隐藏。*\n\n\n\n#### 2.3 通过 Markdown 自身的解析功能\n\n这种方法是利用了 Markdown 自身的语法，在 “超链接” 章节的内容中提到过可以通过 「中括号 `[]`」 的方式定义全局超链接，而这种方式声明的内容不会被渲染成文字内容输出，因此达到了注释的效果。\n\n**实例 3**：\n\n```markdown\n#### 通过 Markdown 解析达到注释效果\n\n[//]: (这是一段被注释掉的文字)\n\n这是一段没有被注释的文字\n```\n\n其渲染结果如下：\n\n[//]: (这是一段被注释掉的文字)\n\n这是一段没有被注释的文字\n\n\n\n*请注意：此种方法被注释的内容是不被渲染输出的。*\n\n\n\n### 3. 使用场景及实例\n\n写作者在书写文档的时候难免会出现无法一次完成的情况，这时候将草稿部分注释起来，可以让文章在不影响读者阅读的情况下保持持续更新。另一方面，Markdown 仍是一种编码语言，在使用过程中，尤其是团队协作过程中，我们可能需要一些特殊用法来实现想要的功能，那此时注释就非常适合作为代码说明。\n\n**实例 4**：一段适合多人协作编辑的文档\n\n```markdown\n#### 一个适合多人编辑的文档\n\n### 一、前言\n\n<!--\n负责人：项目经理\n补充内容：项目背景、实现目标、开发周期、责任人员分配。\n计划用时：1周\n-->\n\n### 二、需求整理\n\n<!--\n负责人：架构师\n补充内容：项目的最终需求整理，功能点描述，尽可能全面地体现重点和难点\n计划用时：1周\n-->\n\n### 三、架构设计\n\n<!--\n负责人：架构师\n补充内容：项目的技术选型、主体架构、通过流程图、E-R图等形式体现。\n计划用时：2周\n-->\n\n### 四、详细设计\n\n<!--\n负责人：技术专员、设计师\n补充内容：项目主要技术实现思路、UI设计等。\n计划用时：3周\n-->\n\n### 五、任务跟踪表\n\n<!-- 全部完成打钩 √，休息日用斜杠 /，未按时完成部分打叉 × -->\n\n|周数|周一|周二|周三|周四|周五|周六|周日|总结|\n|---|---|---|---|---|---|---|---|---|\n|第一周|√|√|√|√|√|/|/|按时完成|\n|第二周|√|√|×|×|×|/|/|进行中|\n|第三周|||||||\n|第四周|||||||\n```\n\n其渲染结果如下：\n\n![图片描述](https://img.mukewang.com/wiki/5eb2ea6d094a556c13301110.jpg)\n\n## 十、表格\n\n### 普通表格\n\n语法：\n\n```\n| 表头 | 表头 | 表头 |\n| ---- | :--: | ---: |\n| 内容 | 内容 | 内容 |\n| 内容 | 内容 | 内容 |\n\n第二行分割表头和内容。\n- 有一个就行，为了对齐，多加了几个\n文字默认居左\n-两边加：表示文字居中\n-右边加：表示文字居右\n注：原生的语法两边都要用 | 包起来。此处省略\n```\nHTML 语法过于麻烦 建议使用 Markdown\n示例：\n```\n姓名|技能|排行\n–|:–:|–:\n刘备|蹦迪|大哥\n关羽|骑马|二哥\n张飞|打拳|三弟\n```\n效果：\n\n姓名|技能|排行\n-| :-: | -:\n刘备|蹦迪|大哥\n关羽|骑马|二哥\n张飞|打拳|三弟\n### 在表格单元格里换行\n\n借助于 HTML 里的 `<br />` 实现。\n\n示例代码：\n\n```\n| Header1 | Header2                          |\n|---------|----------------------------------|\n| item 1  | 1. one<br />2. two<br />3. three |\n```\n\n示例效果：\n\n| Header1 | Header2                          |\n| ------- | -------------------------------- |\n| item 1  | 1. one<br />2. two<br />3. three |\n\n{% note green 'fas fa-rocket' %}\n\n**下篇**： {% post_link Markdown-基础语法-二 ' 📑 Markdown 基础语法-二' %}\n\n{% endnote %}\n","tags":["Markdown"],"categories":["Markdown"]}]